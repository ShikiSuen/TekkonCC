// (c) 2022 and onwards The vChewing Project (MIT-NTL License).
// ====================
// This code is released under the MIT license (SPDX-License-Identifier: MIT)
// ... with NTL restriction stating that:
// No trademark license is granted to use the trade names, trademarks, service
// marks, or product names of Contributor, except as required to fulfill notice
// requirements defined in MIT License.

// ADVICE: Save as UTF8 without BOM signature!!!

#import <Foundation/Foundation.h>
#import <XCTest/XCTest.h>

#import "Tekkon.hh"

using namespace Tekkon;

@interface TekkonCCTests_Advanced : XCTestCase

@end

@implementation TekkonCCTests_Advanced

// =========== PHONABET TYPINNG HANDLING TESTS (ADVANCED) ===========

- (void)test_Zhuyin_QwertyDachenKeys {
  // Testing Dachen Traditional Mapping (QWERTY);
  Composer composer = Composer("", ofDachen);
  XCTAssertEqual(composer.cnvSequence("18 "), "ㄅㄚ ");
  XCTAssertEqual(composer.cnvSequence("m,4"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("5j/ "), "ㄓㄨㄥ ");
  XCTAssertEqual(composer.cnvSequence("fu."), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("g0 "), "ㄕㄢ ");
  XCTAssertEqual(composer.cnvSequence("xup6"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xu;6"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("z/"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("tjo "), "ㄔㄨㄟ ");
  XCTAssertEqual(composer.cnvSequence("284"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("2u4"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("hl3"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("5 "), "ㄓ ");
  XCTAssertEqual(composer.cnvSequence("193"), "ㄅㄞˇ");
}

- (void)test_Zhuyin_Dachen26Keys {
  // Testing handleDachen26()
  Composer composer = Composer("", ofDachen26);
  XCTAssertEqual(composer.cnvSequence("dull"), "ㄎㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("eule"), "ㄍㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("eup"), "ㄍㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("qqulle"), "ㄅㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("qqulld"), "ㄅㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("wwjll"), "ㄉㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("qquu"), "ㄅㄚ");
  XCTAssertEqual(composer.cnvSequence("qquue"), "ㄅㄚˊ");
  XCTAssertEqual(composer.cnvSequence("qquur"), "ㄅㄚˇ");
  XCTAssertEqual(composer.cnvSequence("qquud"), "ㄅㄚˋ");
  XCTAssertEqual(composer.cnvSequence("qquuy"), "ㄅㄚ˙");
  XCTAssertEqual(composer.cnvSequence("qqi"), "ㄅㄛ");
  XCTAssertEqual(composer.cnvSequence("qqie"), "ㄅㄛˊ");
  XCTAssertEqual(composer.cnvSequence("qqir"), "ㄅㄛˇ");
  XCTAssertEqual(composer.cnvSequence("qqid"), "ㄅㄛˋ");
  XCTAssertEqual(composer.cnvSequence("qqiy"), "ㄅㄛ˙");
  XCTAssertEqual(composer.cnvSequence("qqii"), "ㄅㄞ");
  XCTAssertEqual(composer.cnvSequence("qqiie"), "ㄅㄞˊ");
  XCTAssertEqual(composer.cnvSequence("qqiir"), "ㄅㄞˇ");
  XCTAssertEqual(composer.cnvSequence("qqiid"), "ㄅㄞˋ");
  XCTAssertEqual(composer.cnvSequence("qqiiy"), "ㄅㄞ˙");
  XCTAssertEqual(composer.cnvSequence("qqo"), "ㄅㄟ");
  XCTAssertEqual(composer.cnvSequence("qqor"), "ㄅㄟˇ");
  XCTAssertEqual(composer.cnvSequence("qqod"), "ㄅㄟˋ");
  XCTAssertEqual(composer.cnvSequence("qqoy"), "ㄅㄟ˙");
  XCTAssertEqual(composer.cnvSequence("qql"), "ㄅㄠ");
  XCTAssertEqual(composer.cnvSequence("qqle"), "ㄅㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qqlr"), "ㄅㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qqld"), "ㄅㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qqoo"), "ㄅㄢ");
  XCTAssertEqual(composer.cnvSequence("qqoor"), "ㄅㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qqood"), "ㄅㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qqp"), "ㄅㄣ");
  XCTAssertEqual(composer.cnvSequence("qqpr"), "ㄅㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qqpd"), "ㄅㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qqll"), "ㄅㄤ");
  XCTAssertEqual(composer.cnvSequence("qqllr"), "ㄅㄤˇ");
  XCTAssertEqual(composer.cnvSequence("qqlld"), "ㄅㄤˋ");
  XCTAssertEqual(composer.cnvSequence("qqn"), "ㄅㄥ");
  XCTAssertEqual(composer.cnvSequence("qqne"), "ㄅㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qqnr"), "ㄅㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qqnd"), "ㄅㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qqu"), "ㄅㄧ");
  XCTAssertEqual(composer.cnvSequence("qque"), "ㄅㄧˊ");
  XCTAssertEqual(composer.cnvSequence("qqur"), "ㄅㄧˇ");
  XCTAssertEqual(composer.cnvSequence("qqud"), "ㄅㄧˋ");
  XCTAssertEqual(composer.cnvSequence("qqub"), "ㄅㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("qqube"), "ㄅㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("qqubr"), "ㄅㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("qqubd"), "ㄅㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("qqul"), "ㄅㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("qqulr"), "ㄅㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qquld"), "ㄅㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qquoo"), "ㄅㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("qquooe"), "ㄅㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qquoor"), "ㄅㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qquood"), "ㄅㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qqup"), "ㄅㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("qqupr"), "ㄅㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qqupd"), "ㄅㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qqun"), "ㄅㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("qqunr"), "ㄅㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qqund"), "ㄅㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qqj"), "ㄅㄨ");
  XCTAssertEqual(composer.cnvSequence("qqje"), "ㄅㄨˊ");
  XCTAssertEqual(composer.cnvSequence("qqjr"), "ㄅㄨˇ");
  XCTAssertEqual(composer.cnvSequence("qqjd"), "ㄅㄨˋ");
  XCTAssertEqual(composer.cnvSequence("quu"), "ㄆㄚ");
  XCTAssertEqual(composer.cnvSequence("quue"), "ㄆㄚˊ");
  XCTAssertEqual(composer.cnvSequence("quur"), "ㄆㄚˇ");
  XCTAssertEqual(composer.cnvSequence("quud"), "ㄆㄚˋ");
  XCTAssertEqual(composer.cnvSequence("quuy"), "ㄆㄚ˙");
  XCTAssertEqual(composer.cnvSequence("qi"), "ㄆㄛ");
  XCTAssertEqual(composer.cnvSequence("qie"), "ㄆㄛˊ");
  XCTAssertEqual(composer.cnvSequence("qir"), "ㄆㄛˇ");
  XCTAssertEqual(composer.cnvSequence("qid"), "ㄆㄛˋ");
  XCTAssertEqual(composer.cnvSequence("qii"), "ㄆㄞ");
  XCTAssertEqual(composer.cnvSequence("qiie"), "ㄆㄞˊ");
  XCTAssertEqual(composer.cnvSequence("qiir"), "ㄆㄞˇ");
  XCTAssertEqual(composer.cnvSequence("qiid"), "ㄆㄞˋ");
  XCTAssertEqual(composer.cnvSequence("qo"), "ㄆㄟ");
  XCTAssertEqual(composer.cnvSequence("qoe"), "ㄆㄟˊ");
  XCTAssertEqual(composer.cnvSequence("qor"), "ㄆㄟˇ");
  XCTAssertEqual(composer.cnvSequence("qod"), "ㄆㄟˋ");
  XCTAssertEqual(composer.cnvSequence("ql"), "ㄆㄠ");
  XCTAssertEqual(composer.cnvSequence("qle"), "ㄆㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qlr"), "ㄆㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qld"), "ㄆㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qm"), "ㄆㄡ");
  XCTAssertEqual(composer.cnvSequence("qme"), "ㄆㄡˊ");
  XCTAssertEqual(composer.cnvSequence("qmr"), "ㄆㄡˇ");
  XCTAssertEqual(composer.cnvSequence("qmd"), "ㄆㄡˋ");
  XCTAssertEqual(composer.cnvSequence("qoo"), "ㄆㄢ");
  XCTAssertEqual(composer.cnvSequence("qooe"), "ㄆㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qoor"), "ㄆㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qood"), "ㄆㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qp"), "ㄆㄣ");
  XCTAssertEqual(composer.cnvSequence("qpe"), "ㄆㄣˊ");
  XCTAssertEqual(composer.cnvSequence("qpr"), "ㄆㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qpd"), "ㄆㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qll"), "ㄆㄤ");
  XCTAssertEqual(composer.cnvSequence("qlle"), "ㄆㄤˊ");
  XCTAssertEqual(composer.cnvSequence("qllr"), "ㄆㄤˇ");
  XCTAssertEqual(composer.cnvSequence("qlld"), "ㄆㄤˋ");
  XCTAssertEqual(composer.cnvSequence("qn"), "ㄆㄥ");
  XCTAssertEqual(composer.cnvSequence("qne"), "ㄆㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qnr"), "ㄆㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qnd"), "ㄆㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qu"), "ㄆㄧ");
  XCTAssertEqual(composer.cnvSequence("que"), "ㄆㄧˊ");
  XCTAssertEqual(composer.cnvSequence("qur"), "ㄆㄧˇ");
  XCTAssertEqual(composer.cnvSequence("qud"), "ㄆㄧˋ");
  XCTAssertEqual(composer.cnvSequence("quuu"), "ㄆㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("qub"), "ㄆㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("qubr"), "ㄆㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("qubd"), "ㄆㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("qul"), "ㄆㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("qule"), "ㄆㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qulr"), "ㄆㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("quld"), "ㄆㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("quoo"), "ㄆㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("quooe"), "ㄆㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("quoor"), "ㄆㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("quood"), "ㄆㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qup"), "ㄆㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("qupe"), "ㄆㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("qupr"), "ㄆㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qupd"), "ㄆㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qun"), "ㄆㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("qune"), "ㄆㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qunr"), "ㄆㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qund"), "ㄆㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qj"), "ㄆㄨ");
  XCTAssertEqual(composer.cnvSequence("qje"), "ㄆㄨˊ");
  XCTAssertEqual(composer.cnvSequence("qjr"), "ㄆㄨˇ");
  XCTAssertEqual(composer.cnvSequence("qjd"), "ㄆㄨˋ");
  XCTAssertEqual(composer.cnvSequence("auu"), "ㄇㄚ");
  XCTAssertEqual(composer.cnvSequence("auue"), "ㄇㄚˊ");
  XCTAssertEqual(composer.cnvSequence("auur"), "ㄇㄚˇ");
  XCTAssertEqual(composer.cnvSequence("auud"), "ㄇㄚˋ");
  XCTAssertEqual(composer.cnvSequence("auuy"), "ㄇㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ai"), "ㄇㄛ");
  XCTAssertEqual(composer.cnvSequence("aie"), "ㄇㄛˊ");
  XCTAssertEqual(composer.cnvSequence("air"), "ㄇㄛˇ");
  XCTAssertEqual(composer.cnvSequence("aid"), "ㄇㄛˋ");
  XCTAssertEqual(composer.cnvSequence("aiy"), "ㄇㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ak"), "ㄇㄜ");
  XCTAssertEqual(composer.cnvSequence("akd"), "ㄇㄜˋ");
  XCTAssertEqual(composer.cnvSequence("aky"), "ㄇㄜ˙");
  XCTAssertEqual(composer.cnvSequence("aii"), "ㄇㄞ");
  XCTAssertEqual(composer.cnvSequence("aiie"), "ㄇㄞˊ");
  XCTAssertEqual(composer.cnvSequence("aiir"), "ㄇㄞˇ");
  XCTAssertEqual(composer.cnvSequence("aiid"), "ㄇㄞˋ");
  XCTAssertEqual(composer.cnvSequence("aoe"), "ㄇㄟˊ");
  XCTAssertEqual(composer.cnvSequence("aor"), "ㄇㄟˇ");
  XCTAssertEqual(composer.cnvSequence("aod"), "ㄇㄟˋ");
  XCTAssertEqual(composer.cnvSequence("al"), "ㄇㄠ");
  XCTAssertEqual(composer.cnvSequence("ale"), "ㄇㄠˊ");
  XCTAssertEqual(composer.cnvSequence("alr"), "ㄇㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ald"), "ㄇㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ame"), "ㄇㄡˊ");
  XCTAssertEqual(composer.cnvSequence("amr"), "ㄇㄡˇ");
  XCTAssertEqual(composer.cnvSequence("amd"), "ㄇㄡˋ");
  XCTAssertEqual(composer.cnvSequence("aoo"), "ㄇㄢ");
  XCTAssertEqual(composer.cnvSequence("aooe"), "ㄇㄢˊ");
  XCTAssertEqual(composer.cnvSequence("aoor"), "ㄇㄢˇ");
  XCTAssertEqual(composer.cnvSequence("aood"), "ㄇㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ap"), "ㄇㄣ");
  XCTAssertEqual(composer.cnvSequence("ape"), "ㄇㄣˊ");
  XCTAssertEqual(composer.cnvSequence("apr"), "ㄇㄣˇ");
  XCTAssertEqual(composer.cnvSequence("apd"), "ㄇㄣˋ");
  XCTAssertEqual(composer.cnvSequence("apy"), "ㄇㄣ˙");
  XCTAssertEqual(composer.cnvSequence("all"), "ㄇㄤ");
  XCTAssertEqual(composer.cnvSequence("alle"), "ㄇㄤˊ");
  XCTAssertEqual(composer.cnvSequence("allr"), "ㄇㄤˇ");
  XCTAssertEqual(composer.cnvSequence("alld"), "ㄇㄤˋ");
  XCTAssertEqual(composer.cnvSequence("an"), "ㄇㄥ");
  XCTAssertEqual(composer.cnvSequence("ane"), "ㄇㄥˊ");
  XCTAssertEqual(composer.cnvSequence("anr"), "ㄇㄥˇ");
  XCTAssertEqual(composer.cnvSequence("and"), "ㄇㄥˋ");
  XCTAssertEqual(composer.cnvSequence("au"), "ㄇㄧ");
  XCTAssertEqual(composer.cnvSequence("aue"), "ㄇㄧˊ");
  XCTAssertEqual(composer.cnvSequence("aur"), "ㄇㄧˇ");
  XCTAssertEqual(composer.cnvSequence("aud"), "ㄇㄧˋ");
  XCTAssertEqual(composer.cnvSequence("aub"), "ㄇㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("aube"), "ㄇㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("aubd"), "ㄇㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("aul"), "ㄇㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("aule"), "ㄇㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("aulr"), "ㄇㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("auld"), "ㄇㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("aume"), "ㄇㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("aumr"), "ㄇㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("aumd"), "ㄇㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("auoo"), "ㄇㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("auooe"), "ㄇㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("auoor"), "ㄇㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("auood"), "ㄇㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("aup"), "ㄇㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("aupe"), "ㄇㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("aupr"), "ㄇㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("aune"), "ㄇㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("aunr"), "ㄇㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("aund"), "ㄇㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("aje"), "ㄇㄨˊ");
  XCTAssertEqual(composer.cnvSequence("ajr"), "ㄇㄨˇ");
  XCTAssertEqual(composer.cnvSequence("ajd"), "ㄇㄨˋ");
  XCTAssertEqual(composer.cnvSequence("zuu"), "ㄈㄚ");
  XCTAssertEqual(composer.cnvSequence("zuue"), "ㄈㄚˊ");
  XCTAssertEqual(composer.cnvSequence("zuur"), "ㄈㄚˇ");
  XCTAssertEqual(composer.cnvSequence("zuud"), "ㄈㄚˋ");
  XCTAssertEqual(composer.cnvSequence("zie"), "ㄈㄛˊ");
  XCTAssertEqual(composer.cnvSequence("zo"), "ㄈㄟ");
  XCTAssertEqual(composer.cnvSequence("zoe"), "ㄈㄟˊ");
  XCTAssertEqual(composer.cnvSequence("zor"), "ㄈㄟˇ");
  XCTAssertEqual(composer.cnvSequence("zod"), "ㄈㄟˋ");
  XCTAssertEqual(composer.cnvSequence("zm"), "ㄈㄡ");
  XCTAssertEqual(composer.cnvSequence("zme"), "ㄈㄡˊ");
  XCTAssertEqual(composer.cnvSequence("zmr"), "ㄈㄡˇ");
  XCTAssertEqual(composer.cnvSequence("zmd"), "ㄈㄡˋ");
  XCTAssertEqual(composer.cnvSequence("zoo"), "ㄈㄢ");
  XCTAssertEqual(composer.cnvSequence("zooe"), "ㄈㄢˊ");
  XCTAssertEqual(composer.cnvSequence("zoor"), "ㄈㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zood"), "ㄈㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zp"), "ㄈㄣ");
  XCTAssertEqual(composer.cnvSequence("zpe"), "ㄈㄣˊ");
  XCTAssertEqual(composer.cnvSequence("zpr"), "ㄈㄣˇ");
  XCTAssertEqual(composer.cnvSequence("zpd"), "ㄈㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zpy"), "ㄈㄣ˙");
  XCTAssertEqual(composer.cnvSequence("zll"), "ㄈㄤ");
  XCTAssertEqual(composer.cnvSequence("zlle"), "ㄈㄤˊ");
  XCTAssertEqual(composer.cnvSequence("zllr"), "ㄈㄤˇ");
  XCTAssertEqual(composer.cnvSequence("zlld"), "ㄈㄤˋ");
  XCTAssertEqual(composer.cnvSequence("zn"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("zne"), "ㄈㄥˊ");
  XCTAssertEqual(composer.cnvSequence("znr"), "ㄈㄥˇ");
  XCTAssertEqual(composer.cnvSequence("znd"), "ㄈㄥˋ");
  XCTAssertEqual(composer.cnvSequence("zuld"), "ㄈㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("zj"), "ㄈㄨ");
  XCTAssertEqual(composer.cnvSequence("zje"), "ㄈㄨˊ");
  XCTAssertEqual(composer.cnvSequence("zjr"), "ㄈㄨˇ");
  XCTAssertEqual(composer.cnvSequence("zjd"), "ㄈㄨˋ");
  XCTAssertEqual(composer.cnvSequence("wwuu"), "ㄉㄚ");
  XCTAssertEqual(composer.cnvSequence("wwuue"), "ㄉㄚˊ");
  XCTAssertEqual(composer.cnvSequence("wwuur"), "ㄉㄚˇ");
  XCTAssertEqual(composer.cnvSequence("wwuud"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("wwuuy"), "ㄉㄚ˙");
  XCTAssertEqual(composer.cnvSequence("wwk"), "ㄉㄜ");
  XCTAssertEqual(composer.cnvSequence("wwke"), "ㄉㄜˊ");
  XCTAssertEqual(composer.cnvSequence("wwky"), "ㄉㄜ˙");
  XCTAssertEqual(composer.cnvSequence("wwii"), "ㄉㄞ");
  XCTAssertEqual(composer.cnvSequence("wwiir"), "ㄉㄞˇ");
  XCTAssertEqual(composer.cnvSequence("wwiid"), "ㄉㄞˋ");
  XCTAssertEqual(composer.cnvSequence("wwor"), "ㄉㄟˇ");
  XCTAssertEqual(composer.cnvSequence("wwl"), "ㄉㄠ");
  XCTAssertEqual(composer.cnvSequence("wwle"), "ㄉㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wwlr"), "ㄉㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wwld"), "ㄉㄠˋ");
  XCTAssertEqual(composer.cnvSequence("wwm"), "ㄉㄡ");
  XCTAssertEqual(composer.cnvSequence("wwme"), "ㄉㄡˊ");
  XCTAssertEqual(composer.cnvSequence("wwmr"), "ㄉㄡˇ");
  XCTAssertEqual(composer.cnvSequence("wwmd"), "ㄉㄡˋ");
  XCTAssertEqual(composer.cnvSequence("wwoo"), "ㄉㄢ");
  XCTAssertEqual(composer.cnvSequence("wwoor"), "ㄉㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wwood"), "ㄉㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wwpd"), "ㄉㄣˋ");
  XCTAssertEqual(composer.cnvSequence("wwll"), "ㄉㄤ");
  XCTAssertEqual(composer.cnvSequence("wwllr"), "ㄉㄤˇ");
  XCTAssertEqual(composer.cnvSequence("wwlld"), "ㄉㄤˋ");
  XCTAssertEqual(composer.cnvSequence("wwn"), "ㄉㄥ");
  XCTAssertEqual(composer.cnvSequence("wwnr"), "ㄉㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wwnd"), "ㄉㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wwu"), "ㄉㄧ");
  XCTAssertEqual(composer.cnvSequence("wwue"), "ㄉㄧˊ");
  XCTAssertEqual(composer.cnvSequence("wwur"), "ㄉㄧˇ");
  XCTAssertEqual(composer.cnvSequence("wwud"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("wwuuur"), "ㄉㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("wwub"), "ㄉㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("wwube"), "ㄉㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("wwubr"), "ㄉㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("wwubd"), "ㄉㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("wwul"), "ㄉㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("wwulr"), "ㄉㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wwuld"), "ㄉㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("wwum"), "ㄉㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("wwuoo"), "ㄉㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("wwuooe"), "ㄉㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wwuoor"), "ㄉㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wwuood"), "ㄉㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wwun"), "ㄉㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("wwune"), "ㄉㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wwunr"), "ㄉㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wwund"), "ㄉㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wwj"), "ㄉㄨ");
  XCTAssertEqual(composer.cnvSequence("wwje"), "ㄉㄨˊ");
  XCTAssertEqual(composer.cnvSequence("wwjr"), "ㄉㄨˇ");
  XCTAssertEqual(composer.cnvSequence("wwjd"), "ㄉㄨˋ");
  XCTAssertEqual(composer.cnvSequence("wwji"), "ㄉㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("wwjie"), "ㄉㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("wwjir"), "ㄉㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("wwjid"), "ㄉㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("wwjiy"), "ㄉㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("wwjo"), "ㄉㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("wwjor"), "ㄉㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("wwjod"), "ㄉㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("wwjoo"), "ㄉㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("wwjoor"), "ㄉㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wwjood"), "ㄉㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wwjp"), "ㄉㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("wwjpr"), "ㄉㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("wwjpd"), "ㄉㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("wwjn"), "ㄉㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("wwjnr"), "ㄉㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wwjnd"), "ㄉㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wuu"), "ㄊㄚ");
  XCTAssertEqual(composer.cnvSequence("wuur"), "ㄊㄚˇ");
  XCTAssertEqual(composer.cnvSequence("wuud"), "ㄊㄚˋ");
  XCTAssertEqual(composer.cnvSequence("wkd"), "ㄊㄜˋ");
  XCTAssertEqual(composer.cnvSequence("wii"), "ㄊㄞ");
  XCTAssertEqual(composer.cnvSequence("wiie"), "ㄊㄞˊ");
  XCTAssertEqual(composer.cnvSequence("wiir"), "ㄊㄞˇ");
  XCTAssertEqual(composer.cnvSequence("wiid"), "ㄊㄞˋ");
  XCTAssertEqual(composer.cnvSequence("wiiy"), "ㄊㄞ˙");
  XCTAssertEqual(composer.cnvSequence("wl"), "ㄊㄠ");
  XCTAssertEqual(composer.cnvSequence("wle"), "ㄊㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wlr"), "ㄊㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wld"), "ㄊㄠˋ");
  XCTAssertEqual(composer.cnvSequence("wly"), "ㄊㄠ˙");
  XCTAssertEqual(composer.cnvSequence("wm"), "ㄊㄡ");
  XCTAssertEqual(composer.cnvSequence("wme"), "ㄊㄡˊ");
  XCTAssertEqual(composer.cnvSequence("wmr"), "ㄊㄡˇ");
  XCTAssertEqual(composer.cnvSequence("wmd"), "ㄊㄡˋ");
  XCTAssertEqual(composer.cnvSequence("wmy"), "ㄊㄡ˙");
  XCTAssertEqual(composer.cnvSequence("woo"), "ㄊㄢ");
  XCTAssertEqual(composer.cnvSequence("wooe"), "ㄊㄢˊ");
  XCTAssertEqual(composer.cnvSequence("woor"), "ㄊㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wood"), "ㄊㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wll"), "ㄊㄤ");
  XCTAssertEqual(composer.cnvSequence("wlle"), "ㄊㄤˊ");
  XCTAssertEqual(composer.cnvSequence("wllr"), "ㄊㄤˇ");
  XCTAssertEqual(composer.cnvSequence("wlld"), "ㄊㄤˋ");
  XCTAssertEqual(composer.cnvSequence("wn"), "ㄊㄥ");
  XCTAssertEqual(composer.cnvSequence("wne"), "ㄊㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wnd"), "ㄊㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wu"), "ㄊㄧ");
  XCTAssertEqual(composer.cnvSequence("wue"), "ㄊㄧˊ");
  XCTAssertEqual(composer.cnvSequence("wur"), "ㄊㄧˇ");
  XCTAssertEqual(composer.cnvSequence("wud"), "ㄊㄧˋ");
  XCTAssertEqual(composer.cnvSequence("wub"), "ㄊㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("wube"), "ㄊㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("wubr"), "ㄊㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("wubd"), "ㄊㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("wul"), "ㄊㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("wule"), "ㄊㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wulr"), "ㄊㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wuld"), "ㄊㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("wuoo"), "ㄊㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("wuooe"), "ㄊㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wuoor"), "ㄊㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wuood"), "ㄊㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wun"), "ㄊㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("wune"), "ㄊㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wunr"), "ㄊㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wund"), "ㄊㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wj"), "ㄊㄨ");
  XCTAssertEqual(composer.cnvSequence("wje"), "ㄊㄨˊ");
  XCTAssertEqual(composer.cnvSequence("wjr"), "ㄊㄨˇ");
  XCTAssertEqual(composer.cnvSequence("wjd"), "ㄊㄨˋ");
  XCTAssertEqual(composer.cnvSequence("wji"), "ㄊㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("wjie"), "ㄊㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("wjir"), "ㄊㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("wjid"), "ㄊㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("wjo"), "ㄊㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("wjoe"), "ㄊㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("wjor"), "ㄊㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("wjod"), "ㄊㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("wjoo"), "ㄊㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("wjooe"), "ㄊㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wjoor"), "ㄊㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wjood"), "ㄊㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wjp"), "ㄊㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("wjpe"), "ㄊㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("wjpr"), "ㄊㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("wjpd"), "ㄊㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("wjn"), "ㄊㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("wjne"), "ㄊㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wjnr"), "ㄊㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wjnd"), "ㄊㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("suu"), "ㄋㄚ");
  XCTAssertEqual(composer.cnvSequence("suue"), "ㄋㄚˊ");
  XCTAssertEqual(composer.cnvSequence("suur"), "ㄋㄚˇ");
  XCTAssertEqual(composer.cnvSequence("suud"), "ㄋㄚˋ");
  XCTAssertEqual(composer.cnvSequence("suuy"), "ㄋㄚ˙");
  XCTAssertEqual(composer.cnvSequence("skd"), "ㄋㄜˋ");
  XCTAssertEqual(composer.cnvSequence("sky"), "ㄋㄜ˙");
  XCTAssertEqual(composer.cnvSequence("siie"), "ㄋㄞˊ");
  XCTAssertEqual(composer.cnvSequence("siir"), "ㄋㄞˇ");
  XCTAssertEqual(composer.cnvSequence("siid"), "ㄋㄞˋ");
  XCTAssertEqual(composer.cnvSequence("soe"), "ㄋㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sor"), "ㄋㄟˇ");
  XCTAssertEqual(composer.cnvSequence("sod"), "ㄋㄟˋ");
  XCTAssertEqual(composer.cnvSequence("sl"), "ㄋㄠ");
  XCTAssertEqual(composer.cnvSequence("sle"), "ㄋㄠˊ");
  XCTAssertEqual(composer.cnvSequence("slr"), "ㄋㄠˇ");
  XCTAssertEqual(composer.cnvSequence("sld"), "ㄋㄠˋ");
  XCTAssertEqual(composer.cnvSequence("sme"), "ㄋㄡˊ");
  XCTAssertEqual(composer.cnvSequence("smr"), "ㄋㄡˇ");
  XCTAssertEqual(composer.cnvSequence("smd"), "ㄋㄡˋ");
  XCTAssertEqual(composer.cnvSequence("soo"), "ㄋㄢ");
  XCTAssertEqual(composer.cnvSequence("sooe"), "ㄋㄢˊ");
  XCTAssertEqual(composer.cnvSequence("soor"), "ㄋㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sood"), "ㄋㄢˋ");
  XCTAssertEqual(composer.cnvSequence("spr"), "ㄋㄣˇ");
  XCTAssertEqual(composer.cnvSequence("spd"), "ㄋㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sll"), "ㄋㄤ");
  XCTAssertEqual(composer.cnvSequence("slle"), "ㄋㄤˊ");
  XCTAssertEqual(composer.cnvSequence("sllr"), "ㄋㄤˇ");
  XCTAssertEqual(composer.cnvSequence("slld"), "ㄋㄤˋ");
  XCTAssertEqual(composer.cnvSequence("slly"), "ㄋㄤ˙");
  XCTAssertEqual(composer.cnvSequence("sne"), "ㄋㄥˊ");
  XCTAssertEqual(composer.cnvSequence("snr"), "ㄋㄥˇ");
  XCTAssertEqual(composer.cnvSequence("su"), "ㄋㄧ");
  XCTAssertEqual(composer.cnvSequence("sue"), "ㄋㄧˊ");
  XCTAssertEqual(composer.cnvSequence("sur"), "ㄋㄧˇ");
  XCTAssertEqual(composer.cnvSequence("sud"), "ㄋㄧˋ");
  XCTAssertEqual(composer.cnvSequence("sub"), "ㄋㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("sube"), "ㄋㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("subd"), "ㄋㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("sulr"), "ㄋㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("suld"), "ㄋㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("sum"), "ㄋㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("sume"), "ㄋㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("sumr"), "ㄋㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("sumd"), "ㄋㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("suoo"), "ㄋㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("suooe"), "ㄋㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("suoor"), "ㄋㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("suood"), "ㄋㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sup"), "ㄋㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("supe"), "ㄋㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("supr"), "ㄋㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("supd"), "ㄋㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sulle"), "ㄋㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("sullr"), "ㄋㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("sulld"), "ㄋㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("sune"), "ㄋㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sunr"), "ㄋㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sund"), "ㄋㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("sje"), "ㄋㄨˊ");
  XCTAssertEqual(composer.cnvSequence("sjr"), "ㄋㄨˇ");
  XCTAssertEqual(composer.cnvSequence("sjd"), "ㄋㄨˋ");
  XCTAssertEqual(composer.cnvSequence("sjie"), "ㄋㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("sjir"), "ㄋㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("sjid"), "ㄋㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("sjoe"), "ㄋㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sjooe"), "ㄋㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("sjoor"), "ㄋㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sjood"), "ㄋㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sjpe"), "ㄋㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("sjne"), "ㄋㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sjnr"), "ㄋㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sjnd"), "ㄋㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("smme"), "ㄋㄩˊ");
  XCTAssertEqual(composer.cnvSequence("smmr"), "ㄋㄩˇ");
  XCTAssertEqual(composer.cnvSequence("smmd"), "ㄋㄩˋ");
  XCTAssertEqual(composer.cnvSequence("smmbd"), "ㄋㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("xuu"), "ㄌㄚ");
  XCTAssertEqual(composer.cnvSequence("xuue"), "ㄌㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xuur"), "ㄌㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xuud"), "ㄌㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xuuy"), "ㄌㄚ˙");
  XCTAssertEqual(composer.cnvSequence("xi"), "ㄌㄛ");
  XCTAssertEqual(composer.cnvSequence("xiy"), "ㄌㄛ˙");
  XCTAssertEqual(composer.cnvSequence("xk"), "ㄌㄜ");
  XCTAssertEqual(composer.cnvSequence("xke"), "ㄌㄜˊ");
  XCTAssertEqual(composer.cnvSequence("xkd"), "ㄌㄜˋ");
  XCTAssertEqual(composer.cnvSequence("xky"), "ㄌㄜ˙");
  XCTAssertEqual(composer.cnvSequence("xiie"), "ㄌㄞˊ");
  XCTAssertEqual(composer.cnvSequence("xiir"), "ㄌㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xiid"), "ㄌㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xo"), "ㄌㄟ");
  XCTAssertEqual(composer.cnvSequence("xoe"), "ㄌㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xor"), "ㄌㄟˇ");
  XCTAssertEqual(composer.cnvSequence("xod"), "ㄌㄟˋ");
  XCTAssertEqual(composer.cnvSequence("xoy"), "ㄌㄟ˙");
  XCTAssertEqual(composer.cnvSequence("xl"), "ㄌㄠ");
  XCTAssertEqual(composer.cnvSequence("xle"), "ㄌㄠˊ");
  XCTAssertEqual(composer.cnvSequence("xlr"), "ㄌㄠˇ");
  XCTAssertEqual(composer.cnvSequence("xld"), "ㄌㄠˋ");
  XCTAssertEqual(composer.cnvSequence("xm"), "ㄌㄡ");
  XCTAssertEqual(composer.cnvSequence("xme"), "ㄌㄡˊ");
  XCTAssertEqual(composer.cnvSequence("xmr"), "ㄌㄡˇ");
  XCTAssertEqual(composer.cnvSequence("xmd"), "ㄌㄡˋ");
  XCTAssertEqual(composer.cnvSequence("xmy"), "ㄌㄡ˙");
  XCTAssertEqual(composer.cnvSequence("xooe"), "ㄌㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xoor"), "ㄌㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xood"), "ㄌㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xll"), "ㄌㄤ");
  XCTAssertEqual(composer.cnvSequence("xlle"), "ㄌㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xllr"), "ㄌㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xlld"), "ㄌㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xn"), "ㄌㄥ");
  XCTAssertEqual(composer.cnvSequence("xne"), "ㄌㄥˊ");
  XCTAssertEqual(composer.cnvSequence("xnr"), "ㄌㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xnd"), "ㄌㄥˋ");
  XCTAssertEqual(composer.cnvSequence("xu"), "ㄌㄧ");
  XCTAssertEqual(composer.cnvSequence("xue"), "ㄌㄧˊ");
  XCTAssertEqual(composer.cnvSequence("xur"), "ㄌㄧˇ");
  XCTAssertEqual(composer.cnvSequence("xud"), "ㄌㄧˋ");
  XCTAssertEqual(composer.cnvSequence("xuy"), "ㄌㄧ˙");
  XCTAssertEqual(composer.cnvSequence("xuuur"), "ㄌㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xub"), "ㄌㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("xube"), "ㄌㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("xubr"), "ㄌㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("xubd"), "ㄌㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("xul"), "ㄌㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("xule"), "ㄌㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("xulr"), "ㄌㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("xuld"), "ㄌㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("xum"), "ㄌㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("xume"), "ㄌㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("xumr"), "ㄌㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("xumd"), "ㄌㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("xuoo"), "ㄌㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("xuooe"), "ㄌㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xuoor"), "ㄌㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xuood"), "ㄌㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xupe"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xupr"), "ㄌㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xupd"), "ㄌㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xulle"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xullr"), "ㄌㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xulld"), "ㄌㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xun"), "ㄌㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("xune"), "ㄌㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("xunr"), "ㄌㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xund"), "ㄌㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("xj"), "ㄌㄨ");
  XCTAssertEqual(composer.cnvSequence("xje"), "ㄌㄨˊ");
  XCTAssertEqual(composer.cnvSequence("xjr"), "ㄌㄨˇ");
  XCTAssertEqual(composer.cnvSequence("xjd"), "ㄌㄨˋ");
  XCTAssertEqual(composer.cnvSequence("xji"), "ㄌㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("xjie"), "ㄌㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("xjir"), "ㄌㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("xjid"), "ㄌㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("xjiy"), "ㄌㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("xjooe"), "ㄌㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xjoor"), "ㄌㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xjood"), "ㄌㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xjp"), "ㄌㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("xjpe"), "ㄌㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xjpr"), "ㄌㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xjpd"), "ㄌㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xjn"), "ㄌㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("xjne"), "ㄌㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("xjnr"), "ㄌㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xjnd"), "ㄌㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("xmm"), "ㄌㄩ");
  XCTAssertEqual(composer.cnvSequence("xmme"), "ㄌㄩˊ");
  XCTAssertEqual(composer.cnvSequence("xmmr"), "ㄌㄩˇ");
  XCTAssertEqual(composer.cnvSequence("xmmd"), "ㄌㄩˋ");
  XCTAssertEqual(composer.cnvSequence("xmmb"), "ㄌㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("xmmbr"), "ㄌㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("xmmbd"), "ㄌㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("xmmooe"), "ㄌㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xmmoor"), "ㄌㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("euu"), "ㄍㄚ");
  XCTAssertEqual(composer.cnvSequence("euue"), "ㄍㄚˊ");
  XCTAssertEqual(composer.cnvSequence("euur"), "ㄍㄚˇ");
  XCTAssertEqual(composer.cnvSequence("euud"), "ㄍㄚˋ");
  XCTAssertEqual(composer.cnvSequence("euuy"), "ㄍㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ek"), "ㄍㄜ");
  XCTAssertEqual(composer.cnvSequence("eke"), "ㄍㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ekr"), "ㄍㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ekd"), "ㄍㄜˋ");
  XCTAssertEqual(composer.cnvSequence("eky"), "ㄍㄜ˙");
  XCTAssertEqual(composer.cnvSequence("eii"), "ㄍㄞ");
  XCTAssertEqual(composer.cnvSequence("eiir"), "ㄍㄞˇ");
  XCTAssertEqual(composer.cnvSequence("eiid"), "ㄍㄞˋ");
  XCTAssertEqual(composer.cnvSequence("eor"), "ㄍㄟˇ");
  XCTAssertEqual(composer.cnvSequence("el"), "ㄍㄠ");
  XCTAssertEqual(composer.cnvSequence("elr"), "ㄍㄠˇ");
  XCTAssertEqual(composer.cnvSequence("eld"), "ㄍㄠˋ");
  XCTAssertEqual(composer.cnvSequence("em"), "ㄍㄡ");
  XCTAssertEqual(composer.cnvSequence("emr"), "ㄍㄡˇ");
  XCTAssertEqual(composer.cnvSequence("emd"), "ㄍㄡˋ");
  XCTAssertEqual(composer.cnvSequence("eoo"), "ㄍㄢ");
  XCTAssertEqual(composer.cnvSequence("eoor"), "ㄍㄢˇ");
  XCTAssertEqual(composer.cnvSequence("eood"), "ㄍㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ep"), "ㄍㄣ");
  XCTAssertEqual(composer.cnvSequence("epe"), "ㄍㄣˊ");
  XCTAssertEqual(composer.cnvSequence("epr"), "ㄍㄣˇ");
  XCTAssertEqual(composer.cnvSequence("epd"), "ㄍㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ell"), "ㄍㄤ");
  XCTAssertEqual(composer.cnvSequence("ellr"), "ㄍㄤˇ");
  XCTAssertEqual(composer.cnvSequence("elld"), "ㄍㄤˋ");
  XCTAssertEqual(composer.cnvSequence("en"), "ㄍㄥ");
  XCTAssertEqual(composer.cnvSequence("enr"), "ㄍㄥˇ");
  XCTAssertEqual(composer.cnvSequence("end"), "ㄍㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ej"), "ㄍㄨ");
  XCTAssertEqual(composer.cnvSequence("eje"), "ㄍㄨˊ");
  XCTAssertEqual(composer.cnvSequence("ejr"), "ㄍㄨˇ");
  XCTAssertEqual(composer.cnvSequence("ejd"), "ㄍㄨˋ");
  XCTAssertEqual(composer.cnvSequence("eju"), "ㄍㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("ejue"), "ㄍㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ejur"), "ㄍㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ejud"), "ㄍㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("eji"), "ㄍㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("ejie"), "ㄍㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("ejir"), "ㄍㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("ejid"), "ㄍㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("ejii"), "ㄍㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("ejiir"), "ㄍㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ejiid"), "ㄍㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ejo"), "ㄍㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("ejor"), "ㄍㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("ejod"), "ㄍㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("ejoo"), "ㄍㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("ejoor"), "ㄍㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ejood"), "ㄍㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ejp"), "ㄍㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("ejpr"), "ㄍㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("ejpd"), "ㄍㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ejll"), "ㄍㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("ejllr"), "ㄍㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ejlld"), "ㄍㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ejn"), "ㄍㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("ejne"), "ㄍㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ejnr"), "ㄍㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ejnd"), "ㄍㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("duu"), "ㄎㄚ");
  XCTAssertEqual(composer.cnvSequence("duur"), "ㄎㄚˇ");
  XCTAssertEqual(composer.cnvSequence("duud"), "ㄎㄚˋ");
  XCTAssertEqual(composer.cnvSequence("dk"), "ㄎㄜ");
  XCTAssertEqual(composer.cnvSequence("dke"), "ㄎㄜˊ");
  XCTAssertEqual(composer.cnvSequence("dkr"), "ㄎㄜˇ");
  XCTAssertEqual(composer.cnvSequence("dkd"), "ㄎㄜˋ");
  XCTAssertEqual(composer.cnvSequence("dii"), "ㄎㄞ");
  XCTAssertEqual(composer.cnvSequence("diir"), "ㄎㄞˇ");
  XCTAssertEqual(composer.cnvSequence("diid"), "ㄎㄞˋ");
  XCTAssertEqual(composer.cnvSequence("dl"), "ㄎㄠ");
  XCTAssertEqual(composer.cnvSequence("dlr"), "ㄎㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dld"), "ㄎㄠˋ");
  XCTAssertEqual(composer.cnvSequence("dm"), "ㄎㄡ");
  XCTAssertEqual(composer.cnvSequence("dmr"), "ㄎㄡˇ");
  XCTAssertEqual(composer.cnvSequence("dmd"), "ㄎㄡˋ");
  XCTAssertEqual(composer.cnvSequence("doo"), "ㄎㄢ");
  XCTAssertEqual(composer.cnvSequence("door"), "ㄎㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dood"), "ㄎㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dp"), "ㄎㄣ");
  XCTAssertEqual(composer.cnvSequence("dpr"), "ㄎㄣˇ");
  XCTAssertEqual(composer.cnvSequence("dpd"), "ㄎㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dll"), "ㄎㄤ");
  XCTAssertEqual(composer.cnvSequence("dlle"), "ㄎㄤˊ");
  XCTAssertEqual(composer.cnvSequence("dllr"), "ㄎㄤˇ");
  XCTAssertEqual(composer.cnvSequence("dlld"), "ㄎㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dn"), "ㄎㄥ");
  XCTAssertEqual(composer.cnvSequence("dnr"), "ㄎㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dj"), "ㄎㄨ");
  XCTAssertEqual(composer.cnvSequence("dje"), "ㄎㄨˊ");
  XCTAssertEqual(composer.cnvSequence("djr"), "ㄎㄨˇ");
  XCTAssertEqual(composer.cnvSequence("djd"), "ㄎㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dju"), "ㄎㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("djur"), "ㄎㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("djud"), "ㄎㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("djid"), "ㄎㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("djii"), "ㄎㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("djiir"), "ㄎㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("djiid"), "ㄎㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("djo"), "ㄎㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("djoe"), "ㄎㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("djor"), "ㄎㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("djod"), "ㄎㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("djoo"), "ㄎㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("djoor"), "ㄎㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("djood"), "ㄎㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("djp"), "ㄎㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("djpr"), "ㄎㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("djpd"), "ㄎㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("djll"), "ㄎㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("djlle"), "ㄎㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("djllr"), "ㄎㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("djlld"), "ㄎㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("djn"), "ㄎㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("djnr"), "ㄎㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("djnd"), "ㄎㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cuu"), "ㄏㄚ");
  XCTAssertEqual(composer.cnvSequence("cuue"), "ㄏㄚˊ");
  XCTAssertEqual(composer.cnvSequence("cuur"), "ㄏㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ck"), "ㄏㄜ");
  XCTAssertEqual(composer.cnvSequence("cke"), "ㄏㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ckr"), "ㄏㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ckd"), "ㄏㄜˋ");
  XCTAssertEqual(composer.cnvSequence("cii"), "ㄏㄞ");
  XCTAssertEqual(composer.cnvSequence("ciie"), "ㄏㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ciir"), "ㄏㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ciid"), "ㄏㄞˋ");
  XCTAssertEqual(composer.cnvSequence("co"), "ㄏㄟ");
  XCTAssertEqual(composer.cnvSequence("cor"), "ㄏㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cl"), "ㄏㄠ");
  XCTAssertEqual(composer.cnvSequence("cle"), "ㄏㄠˊ");
  XCTAssertEqual(composer.cnvSequence("clr"), "ㄏㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cld"), "ㄏㄠˋ");
  XCTAssertEqual(composer.cnvSequence("cm"), "ㄏㄡ");
  XCTAssertEqual(composer.cnvSequence("cme"), "ㄏㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cmr"), "ㄏㄡˇ");
  XCTAssertEqual(composer.cnvSequence("cmd"), "ㄏㄡˋ");
  XCTAssertEqual(composer.cnvSequence("coo"), "ㄏㄢ");
  XCTAssertEqual(composer.cnvSequence("cooe"), "ㄏㄢˊ");
  XCTAssertEqual(composer.cnvSequence("coor"), "ㄏㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cood"), "ㄏㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cp"), "ㄏㄣ");
  XCTAssertEqual(composer.cnvSequence("cpe"), "ㄏㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cpr"), "ㄏㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cpd"), "ㄏㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cll"), "ㄏㄤ");
  XCTAssertEqual(composer.cnvSequence("clle"), "ㄏㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cllr"), "ㄏㄤˇ");
  XCTAssertEqual(composer.cnvSequence("clld"), "ㄏㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cn"), "ㄏㄥ");
  XCTAssertEqual(composer.cnvSequence("cne"), "ㄏㄥˊ");
  XCTAssertEqual(composer.cnvSequence("cnd"), "ㄏㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cj"), "ㄏㄨ");
  XCTAssertEqual(composer.cnvSequence("cje"), "ㄏㄨˊ");
  XCTAssertEqual(composer.cnvSequence("cjr"), "ㄏㄨˇ");
  XCTAssertEqual(composer.cnvSequence("cjd"), "ㄏㄨˋ");
  XCTAssertEqual(composer.cnvSequence("cju"), "ㄏㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("cjue"), "ㄏㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("cjur"), "ㄏㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cjud"), "ㄏㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cji"), "ㄏㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("cjie"), "ㄏㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("cjir"), "ㄏㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("cjid"), "ㄏㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("cjiy"), "ㄏㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("cjiie"), "ㄏㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("cjiid"), "ㄏㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cjo"), "ㄏㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("cjoe"), "ㄏㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cjor"), "ㄏㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cjod"), "ㄏㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("cjoo"), "ㄏㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("cjooe"), "ㄏㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cjoor"), "ㄏㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cjood"), "ㄏㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cjp"), "ㄏㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("cjpe"), "ㄏㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cjpr"), "ㄏㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cjpd"), "ㄏㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cjll"), "ㄏㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("cjlle"), "ㄏㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cjllr"), "ㄏㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cjlld"), "ㄏㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cjlly"), "ㄏㄨㄤ˙");
  XCTAssertEqual(composer.cnvSequence("cjn"), "ㄏㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("cjne"), "ㄏㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("cjnr"), "ㄏㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("cjnd"), "ㄏㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ru"), "ㄐㄧ");
  XCTAssertEqual(composer.cnvSequence("rue"), "ㄐㄧˊ");
  XCTAssertEqual(composer.cnvSequence("rur"), "ㄐㄧˇ");
  XCTAssertEqual(composer.cnvSequence("rud"), "ㄐㄧˋ");
  XCTAssertEqual(composer.cnvSequence("ruuu"), "ㄐㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("ruuue"), "ㄐㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ruuur"), "ㄐㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ruuud"), "ㄐㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("rub"), "ㄐㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("rube"), "ㄐㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("rubr"), "ㄐㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("rubd"), "ㄐㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ruby"), "ㄐㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("rul"), "ㄐㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("rule"), "ㄐㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("rulr"), "ㄐㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ruld"), "ㄐㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("rum"), "ㄐㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("rumr"), "ㄐㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("rumd"), "ㄐㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("ruoo"), "ㄐㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("ruoor"), "ㄐㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ruood"), "ㄐㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rup"), "ㄐㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("rupr"), "ㄐㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rupd"), "ㄐㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rull"), "ㄐㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("rulle"), "ㄐㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("rullr"), "ㄐㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("rulld"), "ㄐㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("run"), "ㄐㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("runr"), "ㄐㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rund"), "ㄐㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("rm"), "ㄐㄩ");
  XCTAssertEqual(composer.cnvSequence("rme"), "ㄐㄩˊ");
  XCTAssertEqual(composer.cnvSequence("rmr"), "ㄐㄩˇ");
  XCTAssertEqual(composer.cnvSequence("rmd"), "ㄐㄩˋ");
  XCTAssertEqual(composer.cnvSequence("rmb"), "ㄐㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("rmbe"), "ㄐㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("rmbr"), "ㄐㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("rmbd"), "ㄐㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("rmoo"), "ㄐㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("rmoor"), "ㄐㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rmood"), "ㄐㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rmp"), "ㄐㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("rmpe"), "ㄐㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("rmpr"), "ㄐㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rmpd"), "ㄐㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rmn"), "ㄐㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("rmnr"), "ㄐㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rmnd"), "ㄐㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fy"), "ㄑ˙");
  XCTAssertEqual(composer.cnvSequence("fu"), "ㄑㄧ");
  XCTAssertEqual(composer.cnvSequence("fue"), "ㄑㄧˊ");
  XCTAssertEqual(composer.cnvSequence("fur"), "ㄑㄧˇ");
  XCTAssertEqual(composer.cnvSequence("fud"), "ㄑㄧˋ");
  XCTAssertEqual(composer.cnvSequence("fuuu"), "ㄑㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("fuuue"), "ㄑㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("fuuur"), "ㄑㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("fuuud"), "ㄑㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("fub"), "ㄑㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("fube"), "ㄑㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("fubr"), "ㄑㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("fubd"), "ㄑㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ful"), "ㄑㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("fule"), "ㄑㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("fulr"), "ㄑㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("fuld"), "ㄑㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("fum"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("fume"), "ㄑㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("fumr"), "ㄑㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("fumd"), "ㄑㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("fuoo"), "ㄑㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("fuooe"), "ㄑㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fuoor"), "ㄑㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fuood"), "ㄑㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fup"), "ㄑㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("fupe"), "ㄑㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fupr"), "ㄑㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fupd"), "ㄑㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("full"), "ㄑㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("fulle"), "ㄑㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("fullr"), "ㄑㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("fulld"), "ㄑㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("fun"), "ㄑㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("fune"), "ㄑㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("funr"), "ㄑㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("fund"), "ㄑㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fm"), "ㄑㄩ");
  XCTAssertEqual(composer.cnvSequence("fme"), "ㄑㄩˊ");
  XCTAssertEqual(composer.cnvSequence("fmr"), "ㄑㄩˇ");
  XCTAssertEqual(composer.cnvSequence("fmd"), "ㄑㄩˋ");
  XCTAssertEqual(composer.cnvSequence("fmb"), "ㄑㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("fmbe"), "ㄑㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("fmbd"), "ㄑㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("fmoo"), "ㄑㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("fmooe"), "ㄑㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fmoor"), "ㄑㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fmood"), "ㄑㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fmp"), "ㄑㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("fmpe"), "ㄑㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fmpr"), "ㄑㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fmpd"), "ㄑㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("fmn"), "ㄑㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("fmne"), "ㄑㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("fmnr"), "ㄑㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("fmnd"), "ㄑㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vu"), "ㄒㄧ");
  XCTAssertEqual(composer.cnvSequence("vue"), "ㄒㄧˊ");
  XCTAssertEqual(composer.cnvSequence("vur"), "ㄒㄧˇ");
  XCTAssertEqual(composer.cnvSequence("vud"), "ㄒㄧˋ");
  XCTAssertEqual(composer.cnvSequence("vuuu"), "ㄒㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("vuuue"), "ㄒㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vuuur"), "ㄒㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vuuud"), "ㄒㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vub"), "ㄒㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("vube"), "ㄒㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vubr"), "ㄒㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("vubd"), "ㄒㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vul"), "ㄒㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("vule"), "ㄒㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vulr"), "ㄒㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vuld"), "ㄒㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vum"), "ㄒㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("vume"), "ㄒㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("vumr"), "ㄒㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("vumd"), "ㄒㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vuoo"), "ㄒㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("vuooe"), "ㄒㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vuoor"), "ㄒㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vuood"), "ㄒㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vup"), "ㄒㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("vupe"), "ㄒㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vupr"), "ㄒㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vupd"), "ㄒㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vull"), "ㄒㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("vulle"), "ㄒㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vullr"), "ㄒㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vulld"), "ㄒㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vun"), "ㄒㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("vune"), "ㄒㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vunr"), "ㄒㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vund"), "ㄒㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vm"), "ㄒㄩ");
  XCTAssertEqual(composer.cnvSequence("vme"), "ㄒㄩˊ");
  XCTAssertEqual(composer.cnvSequence("vmr"), "ㄒㄩˇ");
  XCTAssertEqual(composer.cnvSequence("vmd"), "ㄒㄩˋ");
  XCTAssertEqual(composer.cnvSequence("vmb"), "ㄒㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("vmbe"), "ㄒㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vmbr"), "ㄒㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("vmbd"), "ㄒㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vmoo"), "ㄒㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("vmooe"), "ㄒㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vmoor"), "ㄒㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vmood"), "ㄒㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vmp"), "ㄒㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("vmpe"), "ㄒㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vmpd"), "ㄒㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vmn"), "ㄒㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("vmne"), "ㄒㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vmnr"), "ㄒㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vmnd"), "ㄒㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tt"), "ㄓ");
  XCTAssertEqual(composer.cnvSequence("tte"), "ㄓˊ");
  XCTAssertEqual(composer.cnvSequence("ttr"), "ㄓˇ");
  XCTAssertEqual(composer.cnvSequence("ttd"), "ㄓˋ");
  XCTAssertEqual(composer.cnvSequence("ttuu"), "ㄓㄚ");
  XCTAssertEqual(composer.cnvSequence("ttuue"), "ㄓㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ttuur"), "ㄓㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ttuud"), "ㄓㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ttk"), "ㄓㄜ");
  XCTAssertEqual(composer.cnvSequence("ttke"), "ㄓㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ttkr"), "ㄓㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ttkd"), "ㄓㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ttky"), "ㄓㄜ˙");
  XCTAssertEqual(composer.cnvSequence("ttii"), "ㄓㄞ");
  XCTAssertEqual(composer.cnvSequence("ttiie"), "ㄓㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ttiir"), "ㄓㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ttiid"), "ㄓㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ttod"), "ㄓㄟˋ");
  XCTAssertEqual(composer.cnvSequence("ttl"), "ㄓㄠ");
  XCTAssertEqual(composer.cnvSequence("ttle"), "ㄓㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ttlr"), "ㄓㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ttld"), "ㄓㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ttm"), "ㄓㄡ");
  XCTAssertEqual(composer.cnvSequence("ttme"), "ㄓㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ttmr"), "ㄓㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ttmd"), "ㄓㄡˋ");
  XCTAssertEqual(composer.cnvSequence("ttoo"), "ㄓㄢ");
  XCTAssertEqual(composer.cnvSequence("ttoor"), "ㄓㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ttood"), "ㄓㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ttp"), "ㄓㄣ");
  XCTAssertEqual(composer.cnvSequence("ttpe"), "ㄓㄣˊ");
  XCTAssertEqual(composer.cnvSequence("ttpr"), "ㄓㄣˇ");
  XCTAssertEqual(composer.cnvSequence("ttpd"), "ㄓㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ttll"), "ㄓㄤ");
  XCTAssertEqual(composer.cnvSequence("ttllr"), "ㄓㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ttlld"), "ㄓㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ttn"), "ㄓㄥ");
  XCTAssertEqual(composer.cnvSequence("ttnr"), "ㄓㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ttnd"), "ㄓㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ttj"), "ㄓㄨ");
  XCTAssertEqual(composer.cnvSequence("ttje"), "ㄓㄨˊ");
  XCTAssertEqual(composer.cnvSequence("ttjr"), "ㄓㄨˇ");
  XCTAssertEqual(composer.cnvSequence("ttjd"), "ㄓㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ttju"), "ㄓㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("ttjur"), "ㄓㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ttji"), "ㄓㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("ttjie"), "ㄓㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("ttjid"), "ㄓㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("ttjii"), "ㄓㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("ttjiir"), "ㄓㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ttjiid"), "ㄓㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ttjo"), "ㄓㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("ttjor"), "ㄓㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("ttjod"), "ㄓㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("ttjoo"), "ㄓㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("ttjoor"), "ㄓㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ttjood"), "ㄓㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ttjp"), "ㄓㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("ttjpr"), "ㄓㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("ttjpd"), "ㄓㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ttjll"), "ㄓㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("ttjllr"), "ㄓㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ttjlld"), "ㄓㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ttjn"), "ㄓㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("ttjnr"), "ㄓㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ttjnd"), "ㄓㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("t "), "ㄔ ");
  XCTAssertEqual(composer.cnvSequence("te"), "ㄔˊ");
  XCTAssertEqual(composer.cnvSequence("tr"), "ㄔˇ");
  XCTAssertEqual(composer.cnvSequence("td"), "ㄔˋ");
  XCTAssertEqual(composer.cnvSequence("tuu"), "ㄔㄚ");
  XCTAssertEqual(composer.cnvSequence("tuue"), "ㄔㄚˊ");
  XCTAssertEqual(composer.cnvSequence("tuur"), "ㄔㄚˇ");
  XCTAssertEqual(composer.cnvSequence("tuud"), "ㄔㄚˋ");
  XCTAssertEqual(composer.cnvSequence("tk "), "ㄔㄜ ");
  XCTAssertEqual(composer.cnvSequence("tkr"), "ㄔㄜˇ");
  XCTAssertEqual(composer.cnvSequence("tkd"), "ㄔㄜˋ");
  XCTAssertEqual(composer.cnvSequence("tii"), "ㄔㄞ");
  XCTAssertEqual(composer.cnvSequence("tiie"), "ㄔㄞˊ");
  XCTAssertEqual(composer.cnvSequence("tiir"), "ㄔㄞˇ");
  XCTAssertEqual(composer.cnvSequence("tiid"), "ㄔㄞˋ");
  XCTAssertEqual(composer.cnvSequence("tl"), "ㄔㄠ");
  XCTAssertEqual(composer.cnvSequence("tle"), "ㄔㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tlr"), "ㄔㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tld"), "ㄔㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tm"), "ㄔㄡ");
  XCTAssertEqual(composer.cnvSequence("tme"), "ㄔㄡˊ");
  XCTAssertEqual(composer.cnvSequence("tmr"), "ㄔㄡˇ");
  XCTAssertEqual(composer.cnvSequence("tmd"), "ㄔㄡˋ");
  XCTAssertEqual(composer.cnvSequence("too "), "ㄔㄢ ");
  XCTAssertEqual(composer.cnvSequence("tooe"), "ㄔㄢˊ");
  XCTAssertEqual(composer.cnvSequence("toor"), "ㄔㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tood"), "ㄔㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tp "), "ㄔㄣ ");
  XCTAssertEqual(composer.cnvSequence("tpe"), "ㄔㄣˊ");
  XCTAssertEqual(composer.cnvSequence("tpr"), "ㄔㄣˇ");
  XCTAssertEqual(composer.cnvSequence("tpd"), "ㄔㄣˋ");
  XCTAssertEqual(composer.cnvSequence("tpy"), "ㄔㄣ˙");
  XCTAssertEqual(composer.cnvSequence("tll "), "ㄔㄤ ");
  XCTAssertEqual(composer.cnvSequence("tlle"), "ㄔㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tllr"), "ㄔㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tlld"), "ㄔㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tn "), "ㄔㄥ ");
  XCTAssertEqual(composer.cnvSequence("tne"), "ㄔㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tnr"), "ㄔㄥˇ");
  XCTAssertEqual(composer.cnvSequence("tnd"), "ㄔㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tj"), "ㄔㄨ");
  XCTAssertEqual(composer.cnvSequence("tje"), "ㄔㄨˊ");
  XCTAssertEqual(composer.cnvSequence("tjr"), "ㄔㄨˇ");
  XCTAssertEqual(composer.cnvSequence("tjd"), "ㄔㄨˋ");
  XCTAssertEqual(composer.cnvSequence("tju"), "ㄔㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("tjur"), "ㄔㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("tjud"), "ㄔㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("tji"), "ㄔㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("tjid"), "ㄔㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("tjii"), "ㄔㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("tjiie"), "ㄔㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("tjiir"), "ㄔㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("tjiid"), "ㄔㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("tjo"), "ㄔㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("tjoe"), "ㄔㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("tjor"), "ㄔㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("tjod"), "ㄔㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("tjoo"), "ㄔㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("tjooe"), "ㄔㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tjoor"), "ㄔㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tjood"), "ㄔㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tjp"), "ㄔㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("tjpe"), "ㄔㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("tjpr"), "ㄔㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("tjll"), "ㄔㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("tjlle"), "ㄔㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tjllr"), "ㄔㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tjlld"), "ㄔㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tjn"), "ㄔㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("tjne"), "ㄔㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tjnr"), "ㄔㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("tjnd"), "ㄔㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("g"), "ㄕ");
  XCTAssertEqual(composer.cnvSequence("ge"), "ㄕˊ");
  XCTAssertEqual(composer.cnvSequence("gr"), "ㄕˇ");
  XCTAssertEqual(composer.cnvSequence("gd"), "ㄕˋ");
  XCTAssertEqual(composer.cnvSequence("gy"), "ㄕ˙");
  XCTAssertEqual(composer.cnvSequence("guu"), "ㄕㄚ");
  XCTAssertEqual(composer.cnvSequence("guue"), "ㄕㄚˊ");
  XCTAssertEqual(composer.cnvSequence("guur"), "ㄕㄚˇ");
  XCTAssertEqual(composer.cnvSequence("guud"), "ㄕㄚˋ");
  XCTAssertEqual(composer.cnvSequence("guuy"), "ㄕㄚ˙");
  XCTAssertEqual(composer.cnvSequence("gk"), "ㄕㄜ");
  XCTAssertEqual(composer.cnvSequence("gke"), "ㄕㄜˊ");
  XCTAssertEqual(composer.cnvSequence("gkr"), "ㄕㄜˇ");
  XCTAssertEqual(composer.cnvSequence("gkd"), "ㄕㄜˋ");
  XCTAssertEqual(composer.cnvSequence("gii"), "ㄕㄞ");
  XCTAssertEqual(composer.cnvSequence("giir"), "ㄕㄞˇ");
  XCTAssertEqual(composer.cnvSequence("giid"), "ㄕㄞˋ");
  XCTAssertEqual(composer.cnvSequence("goe"), "ㄕㄟˊ");
  XCTAssertEqual(composer.cnvSequence("gl"), "ㄕㄠ");
  XCTAssertEqual(composer.cnvSequence("gle"), "ㄕㄠˊ");
  XCTAssertEqual(composer.cnvSequence("glr"), "ㄕㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gld"), "ㄕㄠˋ");
  XCTAssertEqual(composer.cnvSequence("gm"), "ㄕㄡ");
  XCTAssertEqual(composer.cnvSequence("gme"), "ㄕㄡˊ");
  XCTAssertEqual(composer.cnvSequence("gmr"), "ㄕㄡˇ");
  XCTAssertEqual(composer.cnvSequence("gmd"), "ㄕㄡˋ");
  XCTAssertEqual(composer.cnvSequence("goo"), "ㄕㄢ");
  XCTAssertEqual(composer.cnvSequence("gooe"), "ㄕㄢˊ");
  XCTAssertEqual(composer.cnvSequence("goor"), "ㄕㄢˇ");
  XCTAssertEqual(composer.cnvSequence("good"), "ㄕㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gp"), "ㄕㄣ");
  XCTAssertEqual(composer.cnvSequence("gpe"), "ㄕㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gpr"), "ㄕㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gpd"), "ㄕㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gll"), "ㄕㄤ");
  XCTAssertEqual(composer.cnvSequence("gllr"), "ㄕㄤˇ");
  XCTAssertEqual(composer.cnvSequence("glld"), "ㄕㄤˋ");
  XCTAssertEqual(composer.cnvSequence("glly"), "ㄕㄤ˙");
  XCTAssertEqual(composer.cnvSequence("gn"), "ㄕㄥ");
  XCTAssertEqual(composer.cnvSequence("gne"), "ㄕㄥˊ");
  XCTAssertEqual(composer.cnvSequence("gnr"), "ㄕㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gnd"), "ㄕㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gj"), "ㄕㄨ");
  XCTAssertEqual(composer.cnvSequence("gje"), "ㄕㄨˊ");
  XCTAssertEqual(composer.cnvSequence("gjr"), "ㄕㄨˇ");
  XCTAssertEqual(composer.cnvSequence("gjd"), "ㄕㄨˋ");
  XCTAssertEqual(composer.cnvSequence("gju"), "ㄕㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("gjur"), "ㄕㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gjud"), "ㄕㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gji"), "ㄕㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("gjid"), "ㄕㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("gjii"), "ㄕㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("gjiir"), "ㄕㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gjiid"), "ㄕㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gjo"), "ㄕㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("gjoe"), "ㄕㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("gjor"), "ㄕㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gjod"), "ㄕㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gjoo"), "ㄕㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("gjood"), "ㄕㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gjpr"), "ㄕㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gjpd"), "ㄕㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gjll"), "ㄕㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("gjlle"), "ㄕㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("gjllr"), "ㄕㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gjlld"), "ㄕㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bd"), "ㄖˋ");
  XCTAssertEqual(composer.cnvSequence("bkr"), "ㄖㄜˇ");
  XCTAssertEqual(composer.cnvSequence("bkd"), "ㄖㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ble"), "ㄖㄠˊ");
  XCTAssertEqual(composer.cnvSequence("blr"), "ㄖㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bld"), "ㄖㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bme"), "ㄖㄡˊ");
  XCTAssertEqual(composer.cnvSequence("bmr"), "ㄖㄡˇ");
  XCTAssertEqual(composer.cnvSequence("bmd"), "ㄖㄡˋ");
  XCTAssertEqual(composer.cnvSequence("booe"), "ㄖㄢˊ");
  XCTAssertEqual(composer.cnvSequence("boor"), "ㄖㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bood"), "ㄖㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bpe"), "ㄖㄣˊ");
  XCTAssertEqual(composer.cnvSequence("bpr"), "ㄖㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bpd"), "ㄖㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bll"), "ㄖㄤ");
  XCTAssertEqual(composer.cnvSequence("blle"), "ㄖㄤˊ");
  XCTAssertEqual(composer.cnvSequence("bllr"), "ㄖㄤˇ");
  XCTAssertEqual(composer.cnvSequence("blld"), "ㄖㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bn"), "ㄖㄥ");
  XCTAssertEqual(composer.cnvSequence("bne"), "ㄖㄥˊ");
  XCTAssertEqual(composer.cnvSequence("bnr"), "ㄖㄥˇ");
  XCTAssertEqual(composer.cnvSequence("bnd"), "ㄖㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bje"), "ㄖㄨˊ");
  XCTAssertEqual(composer.cnvSequence("bjr"), "ㄖㄨˇ");
  XCTAssertEqual(composer.cnvSequence("bjd"), "ㄖㄨˋ");
  XCTAssertEqual(composer.cnvSequence("bjie"), "ㄖㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("bjid"), "ㄖㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("bjoe"), "ㄖㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("bjor"), "ㄖㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("bjod"), "ㄖㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("bjooe"), "ㄖㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("bjoor"), "ㄖㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bjood"), "ㄖㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bjpe"), "ㄖㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("bjpr"), "ㄖㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bjpd"), "ㄖㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bjne"), "ㄖㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("bjnr"), "ㄖㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("bjnd"), "ㄖㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("y"), "ㄗ");
  XCTAssertEqual(composer.cnvSequence("ye"), "ㄗˊ");
  XCTAssertEqual(composer.cnvSequence("yr"), "ㄗˇ");
  XCTAssertEqual(composer.cnvSequence("yd"), "ㄗˋ");
  XCTAssertEqual(composer.cnvSequence("yy"), "ㄗ˙");
  XCTAssertEqual(composer.cnvSequence("yuu"), "ㄗㄚ");
  XCTAssertEqual(composer.cnvSequence("yuue"), "ㄗㄚˊ");
  XCTAssertEqual(composer.cnvSequence("yuur"), "ㄗㄚˇ");
  XCTAssertEqual(composer.cnvSequence("yke"), "ㄗㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ykr"), "ㄗㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ykd"), "ㄗㄜˋ");
  XCTAssertEqual(composer.cnvSequence("yii"), "ㄗㄞ");
  XCTAssertEqual(composer.cnvSequence("yiir"), "ㄗㄞˇ");
  XCTAssertEqual(composer.cnvSequence("yiid"), "ㄗㄞˋ");
  XCTAssertEqual(composer.cnvSequence("yoe"), "ㄗㄟˊ");
  XCTAssertEqual(composer.cnvSequence("yl"), "ㄗㄠ");
  XCTAssertEqual(composer.cnvSequence("yle"), "ㄗㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ylr"), "ㄗㄠˇ");
  XCTAssertEqual(composer.cnvSequence("yld"), "ㄗㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ym"), "ㄗㄡ");
  XCTAssertEqual(composer.cnvSequence("ymr"), "ㄗㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ymd"), "ㄗㄡˋ");
  XCTAssertEqual(composer.cnvSequence("yoo"), "ㄗㄢ");
  XCTAssertEqual(composer.cnvSequence("yooe"), "ㄗㄢˊ");
  XCTAssertEqual(composer.cnvSequence("yoor"), "ㄗㄢˇ");
  XCTAssertEqual(composer.cnvSequence("yood"), "ㄗㄢˋ");
  XCTAssertEqual(composer.cnvSequence("yp"), "ㄗㄣ");
  XCTAssertEqual(composer.cnvSequence("ypr"), "ㄗㄣˇ");
  XCTAssertEqual(composer.cnvSequence("ypd"), "ㄗㄣˋ");
  XCTAssertEqual(composer.cnvSequence("yll"), "ㄗㄤ");
  XCTAssertEqual(composer.cnvSequence("yllr"), "ㄗㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ylld"), "ㄗㄤˋ");
  XCTAssertEqual(composer.cnvSequence("yn"), "ㄗㄥ");
  XCTAssertEqual(composer.cnvSequence("ynr"), "ㄗㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ynd"), "ㄗㄥˋ");
  XCTAssertEqual(composer.cnvSequence("yj"), "ㄗㄨ");
  XCTAssertEqual(composer.cnvSequence("yje"), "ㄗㄨˊ");
  XCTAssertEqual(composer.cnvSequence("yjr"), "ㄗㄨˇ");
  XCTAssertEqual(composer.cnvSequence("yjd"), "ㄗㄨˋ");
  XCTAssertEqual(composer.cnvSequence("yji"), "ㄗㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("yjie"), "ㄗㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("yjir"), "ㄗㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("yjid"), "ㄗㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("yjiy"), "ㄗㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("yjo"), "ㄗㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("yjor"), "ㄗㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("yjod"), "ㄗㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("yjoo"), "ㄗㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("yjoor"), "ㄗㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("yjood"), "ㄗㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("yjp"), "ㄗㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("yjpr"), "ㄗㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("yjpd"), "ㄗㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("yjn"), "ㄗㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("yjnr"), "ㄗㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("yjnd"), "ㄗㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("h"), "ㄘ");
  XCTAssertEqual(composer.cnvSequence("he"), "ㄘˊ");
  XCTAssertEqual(composer.cnvSequence("hr"), "ㄘˇ");
  XCTAssertEqual(composer.cnvSequence("hd"), "ㄘˋ");
  XCTAssertEqual(composer.cnvSequence("huu"), "ㄘㄚ");
  XCTAssertEqual(composer.cnvSequence("huur"), "ㄘㄚˇ");
  XCTAssertEqual(composer.cnvSequence("huud"), "ㄘㄚˋ");
  XCTAssertEqual(composer.cnvSequence("hkd"), "ㄘㄜˋ");
  XCTAssertEqual(composer.cnvSequence("hii"), "ㄘㄞ");
  XCTAssertEqual(composer.cnvSequence("hiie"), "ㄘㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hiir"), "ㄘㄞˇ");
  XCTAssertEqual(composer.cnvSequence("hiid"), "ㄘㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hl"), "ㄘㄠ");
  XCTAssertEqual(composer.cnvSequence("hle"), "ㄘㄠˊ");
  XCTAssertEqual(composer.cnvSequence("hlr"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("hld"), "ㄘㄠˋ");
  XCTAssertEqual(composer.cnvSequence("hm"), "ㄘㄡ");
  XCTAssertEqual(composer.cnvSequence("hme"), "ㄘㄡˊ");
  XCTAssertEqual(composer.cnvSequence("hmr"), "ㄘㄡˇ");
  XCTAssertEqual(composer.cnvSequence("hmd"), "ㄘㄡˋ");
  XCTAssertEqual(composer.cnvSequence("hoo"), "ㄘㄢ");
  XCTAssertEqual(composer.cnvSequence("hooe"), "ㄘㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hoor"), "ㄘㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hood"), "ㄘㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hp"), "ㄘㄣ");
  XCTAssertEqual(composer.cnvSequence("hpe"), "ㄘㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hll"), "ㄘㄤ");
  XCTAssertEqual(composer.cnvSequence("hlle"), "ㄘㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hllr"), "ㄘㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hlld"), "ㄘㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hn"), "ㄘㄥ");
  XCTAssertEqual(composer.cnvSequence("hne"), "ㄘㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hnr"), "ㄘㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hnd"), "ㄘㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hj"), "ㄘㄨ");
  XCTAssertEqual(composer.cnvSequence("hje"), "ㄘㄨˊ");
  XCTAssertEqual(composer.cnvSequence("hjr"), "ㄘㄨˇ");
  XCTAssertEqual(composer.cnvSequence("hjd"), "ㄘㄨˋ");
  XCTAssertEqual(composer.cnvSequence("hji"), "ㄘㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("hjie"), "ㄘㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hjir"), "ㄘㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hjid"), "ㄘㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("hjo"), "ㄘㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("hjor"), "ㄘㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hjod"), "ㄘㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("hjoo"), "ㄘㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("hjooe"), "ㄘㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hjoor"), "ㄘㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hjood"), "ㄘㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hjp"), "ㄘㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("hjpe"), "ㄘㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hjpr"), "ㄘㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hjpd"), "ㄘㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hjn"), "ㄘㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("hjne"), "ㄘㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hjnr"), "ㄘㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hjnd"), "ㄘㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("n"), "ㄙ");
  XCTAssertEqual(composer.cnvSequence("nr"), "ㄙˇ");
  XCTAssertEqual(composer.cnvSequence("nd"), "ㄙˋ");
  XCTAssertEqual(composer.cnvSequence("nuu"), "ㄙㄚ");
  XCTAssertEqual(composer.cnvSequence("nuur"), "ㄙㄚˇ");
  XCTAssertEqual(composer.cnvSequence("nuud"), "ㄙㄚˋ");
  XCTAssertEqual(composer.cnvSequence("nuuy"), "ㄙㄚ˙");
  XCTAssertEqual(composer.cnvSequence("nk"), "ㄙㄜ");
  XCTAssertEqual(composer.cnvSequence("nkd"), "ㄙㄜˋ");
  XCTAssertEqual(composer.cnvSequence("nii"), "ㄙㄞ");
  XCTAssertEqual(composer.cnvSequence("niie"), "ㄙㄞˊ");
  XCTAssertEqual(composer.cnvSequence("niir"), "ㄙㄞˇ");
  XCTAssertEqual(composer.cnvSequence("niid"), "ㄙㄞˋ");
  XCTAssertEqual(composer.cnvSequence("no"), "ㄙㄟ");
  XCTAssertEqual(composer.cnvSequence("nl"), "ㄙㄠ");
  XCTAssertEqual(composer.cnvSequence("nlr"), "ㄙㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nld"), "ㄙㄠˋ");
  XCTAssertEqual(composer.cnvSequence("nm"), "ㄙㄡ");
  XCTAssertEqual(composer.cnvSequence("nmr"), "ㄙㄡˇ");
  XCTAssertEqual(composer.cnvSequence("nmd"), "ㄙㄡˋ");
  XCTAssertEqual(composer.cnvSequence("noo"), "ㄙㄢ");
  XCTAssertEqual(composer.cnvSequence("noor"), "ㄙㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nood"), "ㄙㄢˋ");
  XCTAssertEqual(composer.cnvSequence("np"), "ㄙㄣ");
  XCTAssertEqual(composer.cnvSequence("npr"), "ㄙㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nll"), "ㄙㄤ");
  XCTAssertEqual(composer.cnvSequence("nllr"), "ㄙㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nlld"), "ㄙㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nnn"), "ㄙㄥ");
  XCTAssertEqual(composer.cnvSequence("nnnd"), "ㄙㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nj"), "ㄙㄨ");
  XCTAssertEqual(composer.cnvSequence("nje"), "ㄙㄨˊ");
  XCTAssertEqual(composer.cnvSequence("njr"), "ㄙㄨˇ");
  XCTAssertEqual(composer.cnvSequence("njd"), "ㄙㄨˋ");
  XCTAssertEqual(composer.cnvSequence("nji"), "ㄙㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("njie"), "ㄙㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("njir"), "ㄙㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("njid"), "ㄙㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("njo"), "ㄙㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("njoe"), "ㄙㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("njor"), "ㄙㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("njod"), "ㄙㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("njoo"), "ㄙㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("njoor"), "ㄙㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("njood"), "ㄙㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("njp"), "ㄙㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("njpr"), "ㄙㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("njpd"), "ㄙㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("njn"), "ㄙㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("njne"), "ㄙㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("njnr"), "ㄙㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("njnd"), "ㄙㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("uu"), "ㄚ");
  XCTAssertEqual(composer.cnvSequence("uue"), "ㄚˊ");
  XCTAssertEqual(composer.cnvSequence("uud"), "ㄚˋ");
  XCTAssertEqual(composer.cnvSequence("uuy"), "ㄚ˙");
  XCTAssertEqual(composer.cnvSequence("i "), "ㄛ ");
  XCTAssertEqual(composer.cnvSequence("ie"), "ㄛˊ");
  XCTAssertEqual(composer.cnvSequence("ir"), "ㄛˇ");
  XCTAssertEqual(composer.cnvSequence("id"), "ㄛˋ");
  XCTAssertEqual(composer.cnvSequence("k "), "ㄜ ");
  XCTAssertEqual(composer.cnvSequence("ke"), "ㄜˊ");
  XCTAssertEqual(composer.cnvSequence("kr"), "ㄜˇ");
  XCTAssertEqual(composer.cnvSequence("kd"), "ㄜˋ");
  // XCTAssertEqual(composer.cnvSequence("be"), "ㄝˊ");
  // XCTAssertEqual(composer.cnvSequence("br"), "ㄝˇ");
  // XCTAssertEqual(composer.cnvSequence("bd"), "ㄝˋ");
  // XCTAssertEqual(composer.cnvSequence("by"), "ㄝ˙");
  XCTAssertEqual(composer.cnvSequence("ii"), "ㄞ");
  XCTAssertEqual(composer.cnvSequence("iie"), "ㄞˊ");
  XCTAssertEqual(composer.cnvSequence("iir"), "ㄞˇ");
  XCTAssertEqual(composer.cnvSequence("iid"), "ㄞˋ");
  XCTAssertEqual(composer.cnvSequence("od"), "ㄟˋ");
  XCTAssertEqual(composer.cnvSequence("l"), "ㄠ");
  XCTAssertEqual(composer.cnvSequence("le"), "ㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lr"), "ㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ld"), "ㄠˋ");
  XCTAssertEqual(composer.cnvSequence("m"), "ㄡ");
  XCTAssertEqual(composer.cnvSequence("me"), "ㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mr"), "ㄡˇ");
  XCTAssertEqual(composer.cnvSequence("md"), "ㄡˋ");
  XCTAssertEqual(composer.cnvSequence("my"), "ㄡ˙");
  XCTAssertEqual(composer.cnvSequence("oo "), "ㄢ ");
  XCTAssertEqual(composer.cnvSequence("ooe"), "ㄢˊ");
  XCTAssertEqual(composer.cnvSequence("oor"), "ㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ood"), "ㄢˋ");
  XCTAssertEqual(composer.cnvSequence("p "), "ㄣ ");
  XCTAssertEqual(composer.cnvSequence("pe"), "ㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pr"), "ㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pd"), "ㄣˋ");
  XCTAssertEqual(composer.cnvSequence("py"), "ㄣ˙");
  XCTAssertEqual(composer.cnvSequence("ll "), "ㄤ ");
  XCTAssertEqual(composer.cnvSequence("lle"), "ㄤˊ");
  XCTAssertEqual(composer.cnvSequence("llr"), "ㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lld"), "ㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nn "), "ㄥ ");
  XCTAssertEqual(composer.cnvSequence("nnd"), "ㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pp "), "ㄦ ");
  XCTAssertEqual(composer.cnvSequence("ppe"), "ㄦˊ");
  XCTAssertEqual(composer.cnvSequence("ppr"), "ㄦˇ");
  XCTAssertEqual(composer.cnvSequence("ppd"), "ㄦˋ");
  XCTAssertEqual(composer.cnvSequence("ppy"), "ㄦ˙");
  XCTAssertEqual(composer.cnvSequence("u"), "ㄧ");
  XCTAssertEqual(composer.cnvSequence("ue"), "ㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ur"), "ㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ud"), "ㄧˋ");
  XCTAssertEqual(composer.cnvSequence("uuu"), "ㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("uuue"), "ㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("uuur"), "ㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("uuud"), "ㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("uuuy"), "ㄧㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ui"), "ㄧㄛ");
  XCTAssertEqual(composer.cnvSequence("uiy"), "ㄧㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ub"), "ㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("ube"), "ㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("ubr"), "ㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ubd"), "ㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("uby"), "ㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("uiie"), "ㄧㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ul"), "ㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("ule"), "ㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ulr"), "ㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("uld"), "ㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("um"), "ㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("ume"), "ㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("umr"), "ㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("umd"), "ㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("uoo"), "ㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("uooe"), "ㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("uoor"), "ㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("uood"), "ㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("up"), "ㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("upe"), "ㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("upr"), "ㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("upd"), "ㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ull"), "ㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("ulle"), "ㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ullr"), "ㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ulld"), "ㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("un"), "ㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("une"), "ㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("unr"), "ㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("und"), "ㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("j"), "ㄨ");
  XCTAssertEqual(composer.cnvSequence("je"), "ㄨˊ");
  XCTAssertEqual(composer.cnvSequence("jr"), "ㄨˇ");
  XCTAssertEqual(composer.cnvSequence("jd"), "ㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ju"), "ㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("jue"), "ㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("jur"), "ㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jud"), "ㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("juy"), "ㄨㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ji"), "ㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("jir"), "ㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("jid"), "ㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("jii"), "ㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("jiir"), "ㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("jiid"), "ㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jo"), "ㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("joe"), "ㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("jor"), "ㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("jod"), "ㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("joo"), "ㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("jooe"), "ㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("joor"), "ㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jood"), "ㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jp"), "ㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("jpe"), "ㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jpr"), "ㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jpd"), "ㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jll"), "ㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("jlle"), "ㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("jllr"), "ㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jlld"), "ㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jn"), "ㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("jnr"), "ㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jnd"), "ㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mm"), "ㄩ");
  XCTAssertEqual(composer.cnvSequence("mme"), "ㄩˊ");
  XCTAssertEqual(composer.cnvSequence("mmr"), "ㄩˇ");
  XCTAssertEqual(composer.cnvSequence("mmd"), "ㄩˋ");
  XCTAssertEqual(composer.cnvSequence("mmb"), "ㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("mmbr"), "ㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("mmbd"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("mmoo"), "ㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("mmooe"), "ㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mmoor"), "ㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mmood"), "ㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("mmp"), "ㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("mmpe"), "ㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("mmpr"), "ㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mmpd"), "ㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("mmn"), "ㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("mmne"), "ㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mmnr"), "ㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mmnd"), "ㄩㄥˋ");
}

- (void)test_Zhuyin_ETen26Keys {
  // Testing handleETen26()
  Composer composer = Composer("", ofETen26);
  XCTAssertEqual(composer.cnvSequence("ket"), "ㄎㄧㄤ");
  // XCTAssertEqual(composer.cnvSequence("vezf"), expected:
  // "ㄍㄧㄠˊ"); XCTAssertEqual(composer.cnvSequence("ven"),
  // "ㄍㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("betf"), "ㄅㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("betk"), "ㄅㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dxt"), "ㄉㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("ba"), "ㄅㄚ");
  XCTAssertEqual(composer.cnvSequence("baf"), "ㄅㄚˊ");
  XCTAssertEqual(composer.cnvSequence("baj"), "ㄅㄚˇ");
  XCTAssertEqual(composer.cnvSequence("bak"), "ㄅㄚˋ");
  XCTAssertEqual(composer.cnvSequence("bad"), "ㄅㄚ˙");
  XCTAssertEqual(composer.cnvSequence("bo"), "ㄅㄛ");
  XCTAssertEqual(composer.cnvSequence("bof"), "ㄅㄛˊ");
  XCTAssertEqual(composer.cnvSequence("boj"), "ㄅㄛˇ");
  XCTAssertEqual(composer.cnvSequence("bok"), "ㄅㄛˋ");
  XCTAssertEqual(composer.cnvSequence("bod"), "ㄅㄛ˙");
  XCTAssertEqual(composer.cnvSequence("bi"), "ㄅㄞ");
  XCTAssertEqual(composer.cnvSequence("bif"), "ㄅㄞˊ");
  XCTAssertEqual(composer.cnvSequence("bij"), "ㄅㄞˇ");
  XCTAssertEqual(composer.cnvSequence("bik"), "ㄅㄞˋ");
  XCTAssertEqual(composer.cnvSequence("bid"), "ㄅㄞ˙");
  XCTAssertEqual(composer.cnvSequence("bq"), "ㄅㄟ");
  XCTAssertEqual(composer.cnvSequence("bqj"), "ㄅㄟˇ");
  XCTAssertEqual(composer.cnvSequence("bqk"), "ㄅㄟˋ");
  XCTAssertEqual(composer.cnvSequence("bqd"), "ㄅㄟ˙");
  XCTAssertEqual(composer.cnvSequence("bz"), "ㄅㄠ");
  XCTAssertEqual(composer.cnvSequence("bzf"), "ㄅㄠˊ");
  XCTAssertEqual(composer.cnvSequence("bzj"), "ㄅㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bzk"), "ㄅㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bm"), "ㄅㄢ");
  XCTAssertEqual(composer.cnvSequence("bmj"), "ㄅㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bmk"), "ㄅㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bn"), "ㄅㄣ");
  XCTAssertEqual(composer.cnvSequence("bnj"), "ㄅㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bnk"), "ㄅㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bt"), "ㄅㄤ");
  XCTAssertEqual(composer.cnvSequence("btj"), "ㄅㄤˇ");
  XCTAssertEqual(composer.cnvSequence("btk"), "ㄅㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bl"), "ㄅㄥ");
  XCTAssertEqual(composer.cnvSequence("blf"), "ㄅㄥˊ");
  XCTAssertEqual(composer.cnvSequence("blj"), "ㄅㄥˇ");
  XCTAssertEqual(composer.cnvSequence("blk"), "ㄅㄥˋ");
  XCTAssertEqual(composer.cnvSequence("be"), "ㄅㄧ");
  XCTAssertEqual(composer.cnvSequence("bef"), "ㄅㄧˊ");
  XCTAssertEqual(composer.cnvSequence("bej"), "ㄅㄧˇ");
  XCTAssertEqual(composer.cnvSequence("bek"), "ㄅㄧˋ");
  XCTAssertEqual(composer.cnvSequence("bew"), "ㄅㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("bewf"), "ㄅㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("bewj"), "ㄅㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("bewk"), "ㄅㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("bez"), "ㄅㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("bezj"), "ㄅㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bezk"), "ㄅㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bem"), "ㄅㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("bemf"), "ㄅㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("bemj"), "ㄅㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bemk"), "ㄅㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ben"), "ㄅㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("benj"), "ㄅㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("benk"), "ㄅㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bel"), "ㄅㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("belj"), "ㄅㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("belk"), "ㄅㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bx"), "ㄅㄨ");
  XCTAssertEqual(composer.cnvSequence("bxf"), "ㄅㄨˊ");
  XCTAssertEqual(composer.cnvSequence("bxj"), "ㄅㄨˇ");
  XCTAssertEqual(composer.cnvSequence("bxk"), "ㄅㄨˋ");
  XCTAssertEqual(composer.cnvSequence("pa"), "ㄆㄚ");
  XCTAssertEqual(composer.cnvSequence("paf"), "ㄆㄚˊ");
  XCTAssertEqual(composer.cnvSequence("paj"), "ㄆㄚˇ");
  XCTAssertEqual(composer.cnvSequence("pak"), "ㄆㄚˋ");
  XCTAssertEqual(composer.cnvSequence("pad"), "ㄆㄚ˙");
  XCTAssertEqual(composer.cnvSequence("po"), "ㄆㄛ");
  XCTAssertEqual(composer.cnvSequence("pof"), "ㄆㄛˊ");
  XCTAssertEqual(composer.cnvSequence("poj"), "ㄆㄛˇ");
  XCTAssertEqual(composer.cnvSequence("pok"), "ㄆㄛˋ");
  XCTAssertEqual(composer.cnvSequence("pi"), "ㄆㄞ");
  XCTAssertEqual(composer.cnvSequence("pif"), "ㄆㄞˊ");
  XCTAssertEqual(composer.cnvSequence("pij"), "ㄆㄞˇ");
  XCTAssertEqual(composer.cnvSequence("pik"), "ㄆㄞˋ");
  XCTAssertEqual(composer.cnvSequence("pq"), "ㄆㄟ");
  XCTAssertEqual(composer.cnvSequence("pqf"), "ㄆㄟˊ");
  XCTAssertEqual(composer.cnvSequence("pqj"), "ㄆㄟˇ");
  XCTAssertEqual(composer.cnvSequence("pqk"), "ㄆㄟˋ");
  XCTAssertEqual(composer.cnvSequence("pz"), "ㄆㄠ");
  XCTAssertEqual(composer.cnvSequence("pzf"), "ㄆㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pzj"), "ㄆㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pzk"), "ㄆㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pp"), "ㄆㄡ");
  XCTAssertEqual(composer.cnvSequence("ppf"), "ㄆㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ppj"), "ㄆㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ppk"), "ㄆㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pm"), "ㄆㄢ");
  XCTAssertEqual(composer.cnvSequence("pmf"), "ㄆㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pmj"), "ㄆㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pmk"), "ㄆㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pn"), "ㄆㄣ");
  XCTAssertEqual(composer.cnvSequence("pnf"), "ㄆㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pnj"), "ㄆㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pnk"), "ㄆㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pt"), "ㄆㄤ");
  XCTAssertEqual(composer.cnvSequence("ptf"), "ㄆㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ptj"), "ㄆㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ptk"), "ㄆㄤˋ");
  XCTAssertEqual(composer.cnvSequence("pl"), "ㄆㄥ");
  XCTAssertEqual(composer.cnvSequence("plf"), "ㄆㄥˊ");
  XCTAssertEqual(composer.cnvSequence("plj"), "ㄆㄥˇ");
  XCTAssertEqual(composer.cnvSequence("plk"), "ㄆㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pe"), "ㄆㄧ");
  XCTAssertEqual(composer.cnvSequence("pef"), "ㄆㄧˊ");
  XCTAssertEqual(composer.cnvSequence("pej"), "ㄆㄧˇ");
  XCTAssertEqual(composer.cnvSequence("pek"), "ㄆㄧˋ");
  XCTAssertEqual(composer.cnvSequence("pea"), "ㄆㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("pew"), "ㄆㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("pewj"), "ㄆㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("pewk"), "ㄆㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("pez"), "ㄆㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("pezf"), "ㄆㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pezj"), "ㄆㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pezk"), "ㄆㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pem"), "ㄆㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("pemf"), "ㄆㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pemj"), "ㄆㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pemk"), "ㄆㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pen"), "ㄆㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("penf"), "ㄆㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("penj"), "ㄆㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("penk"), "ㄆㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pel"), "ㄆㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("pelf"), "ㄆㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("pelj"), "ㄆㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("pelk"), "ㄆㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("px"), "ㄆㄨ");
  XCTAssertEqual(composer.cnvSequence("pxf"), "ㄆㄨˊ");
  XCTAssertEqual(composer.cnvSequence("pxj"), "ㄆㄨˇ");
  XCTAssertEqual(composer.cnvSequence("pxk"), "ㄆㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ma"), "ㄇㄚ");
  XCTAssertEqual(composer.cnvSequence("maf"), "ㄇㄚˊ");
  XCTAssertEqual(composer.cnvSequence("maj"), "ㄇㄚˇ");
  XCTAssertEqual(composer.cnvSequence("mak"), "ㄇㄚˋ");
  XCTAssertEqual(composer.cnvSequence("mad"), "ㄇㄚ˙");
  XCTAssertEqual(composer.cnvSequence("mo"), "ㄇㄛ");
  XCTAssertEqual(composer.cnvSequence("mof"), "ㄇㄛˊ");
  XCTAssertEqual(composer.cnvSequence("moj"), "ㄇㄛˇ");
  XCTAssertEqual(composer.cnvSequence("mok"), "ㄇㄛˋ");
  XCTAssertEqual(composer.cnvSequence("mod"), "ㄇㄛ˙");
  XCTAssertEqual(composer.cnvSequence("mr"), "ㄇㄜ");
  XCTAssertEqual(composer.cnvSequence("mrk"), "ㄇㄜˋ");
  XCTAssertEqual(composer.cnvSequence("mrd"), "ㄇㄜ˙");
  XCTAssertEqual(composer.cnvSequence("mi"), "ㄇㄞ");
  XCTAssertEqual(composer.cnvSequence("mif"), "ㄇㄞˊ");
  XCTAssertEqual(composer.cnvSequence("mij"), "ㄇㄞˇ");
  XCTAssertEqual(composer.cnvSequence("mik"), "ㄇㄞˋ");
  XCTAssertEqual(composer.cnvSequence("mqf"), "ㄇㄟˊ");
  XCTAssertEqual(composer.cnvSequence("mqj"), "ㄇㄟˇ");
  XCTAssertEqual(composer.cnvSequence("mqk"), "ㄇㄟˋ");
  XCTAssertEqual(composer.cnvSequence("mz"), "ㄇㄠ");
  XCTAssertEqual(composer.cnvSequence("mzf"), "ㄇㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mzj"), "ㄇㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mzk"), "ㄇㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mpf"), "ㄇㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mpj"), "ㄇㄡˇ");
  XCTAssertEqual(composer.cnvSequence("mpk"), "ㄇㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mm"), "ㄇㄢ");
  XCTAssertEqual(composer.cnvSequence("mmf"), "ㄇㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mmj"), "ㄇㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mmk"), "ㄇㄢˋ");
  XCTAssertEqual(composer.cnvSequence("mn"), "ㄇㄣ");
  XCTAssertEqual(composer.cnvSequence("mnf"), "ㄇㄣˊ");
  XCTAssertEqual(composer.cnvSequence("mnj"), "ㄇㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mnk"), "ㄇㄣˋ");
  XCTAssertEqual(composer.cnvSequence("mnd"), "ㄇㄣ˙");
  XCTAssertEqual(composer.cnvSequence("mt"), "ㄇㄤ");
  XCTAssertEqual(composer.cnvSequence("mtf"), "ㄇㄤˊ");
  XCTAssertEqual(composer.cnvSequence("mtj"), "ㄇㄤˇ");
  XCTAssertEqual(composer.cnvSequence("mtk"), "ㄇㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ml"), "ㄇㄥ");
  XCTAssertEqual(composer.cnvSequence("mlf"), "ㄇㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mlj"), "ㄇㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mlk"), "ㄇㄥˋ");
  XCTAssertEqual(composer.cnvSequence("me"), "ㄇㄧ");
  XCTAssertEqual(composer.cnvSequence("mef"), "ㄇㄧˊ");
  XCTAssertEqual(composer.cnvSequence("mej"), "ㄇㄧˇ");
  XCTAssertEqual(composer.cnvSequence("mek"), "ㄇㄧˋ");
  XCTAssertEqual(composer.cnvSequence("mew"), "ㄇㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("mewf"), "ㄇㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("mewk"), "ㄇㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("mez"), "ㄇㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("mezf"), "ㄇㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mezj"), "ㄇㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mezk"), "ㄇㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mepf"), "ㄇㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mepj"), "ㄇㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("mepk"), "ㄇㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mem"), "ㄇㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("memf"), "ㄇㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("memj"), "ㄇㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("memk"), "ㄇㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("men"), "ㄇㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("menf"), "ㄇㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("menj"), "ㄇㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("melf"), "ㄇㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("melj"), "ㄇㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("melk"), "ㄇㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mxf"), "ㄇㄨˊ");
  XCTAssertEqual(composer.cnvSequence("mxj"), "ㄇㄨˇ");
  XCTAssertEqual(composer.cnvSequence("mxk"), "ㄇㄨˋ");
  XCTAssertEqual(composer.cnvSequence("fa"), "ㄈㄚ");
  XCTAssertEqual(composer.cnvSequence("faf"), "ㄈㄚˊ");
  XCTAssertEqual(composer.cnvSequence("faj"), "ㄈㄚˇ");
  XCTAssertEqual(composer.cnvSequence("fak"), "ㄈㄚˋ");
  XCTAssertEqual(composer.cnvSequence("fof"), "ㄈㄛˊ");
  XCTAssertEqual(composer.cnvSequence("fq"), "ㄈㄟ");
  XCTAssertEqual(composer.cnvSequence("fqf"), "ㄈㄟˊ");
  XCTAssertEqual(composer.cnvSequence("fqj"), "ㄈㄟˇ");
  XCTAssertEqual(composer.cnvSequence("fqk"), "ㄈㄟˋ");
  XCTAssertEqual(composer.cnvSequence("fp"), "ㄈㄡ");
  XCTAssertEqual(composer.cnvSequence("fpf"), "ㄈㄡˊ");
  XCTAssertEqual(composer.cnvSequence("fpj"), "ㄈㄡˇ");
  XCTAssertEqual(composer.cnvSequence("fpk"), "ㄈㄡˋ");
  XCTAssertEqual(composer.cnvSequence("fm"), "ㄈㄢ");
  XCTAssertEqual(composer.cnvSequence("fmf"), "ㄈㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fmj"), "ㄈㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fmk"), "ㄈㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fn"), "ㄈㄣ");
  XCTAssertEqual(composer.cnvSequence("fnf"), "ㄈㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fnj"), "ㄈㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fnk"), "ㄈㄣˋ");
  XCTAssertEqual(composer.cnvSequence("fnd"), "ㄈㄣ˙");
  XCTAssertEqual(composer.cnvSequence("ft"), "ㄈㄤ");
  XCTAssertEqual(composer.cnvSequence("ftf"), "ㄈㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ftj"), "ㄈㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ftk"), "ㄈㄤˋ");
  XCTAssertEqual(composer.cnvSequence("fl"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("flf"), "ㄈㄥˊ");
  XCTAssertEqual(composer.cnvSequence("flj"), "ㄈㄥˇ");
  XCTAssertEqual(composer.cnvSequence("flk"), "ㄈㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fezk"), "ㄈㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("fx"), "ㄈㄨ");
  XCTAssertEqual(composer.cnvSequence("fxf"), "ㄈㄨˊ");
  XCTAssertEqual(composer.cnvSequence("fxj"), "ㄈㄨˇ");
  XCTAssertEqual(composer.cnvSequence("fxk"), "ㄈㄨˋ");
  XCTAssertEqual(composer.cnvSequence("da"), "ㄉㄚ");
  XCTAssertEqual(composer.cnvSequence("daf"), "ㄉㄚˊ");
  XCTAssertEqual(composer.cnvSequence("daj"), "ㄉㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dak"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("dad"), "ㄉㄚ˙");
  XCTAssertEqual(composer.cnvSequence("dr"), "ㄉㄜ");
  XCTAssertEqual(composer.cnvSequence("drf"), "ㄉㄜˊ");
  XCTAssertEqual(composer.cnvSequence("drd"), "ㄉㄜ˙");
  XCTAssertEqual(composer.cnvSequence("di"), "ㄉㄞ");
  XCTAssertEqual(composer.cnvSequence("dij"), "ㄉㄞˇ");
  XCTAssertEqual(composer.cnvSequence("dik"), "ㄉㄞˋ");
  XCTAssertEqual(composer.cnvSequence("dqj"), "ㄉㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dz"), "ㄉㄠ");
  XCTAssertEqual(composer.cnvSequence("dzf"), "ㄉㄠˊ");
  XCTAssertEqual(composer.cnvSequence("dzj"), "ㄉㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dzk"), "ㄉㄠˋ");
  XCTAssertEqual(composer.cnvSequence("dp"), "ㄉㄡ");
  XCTAssertEqual(composer.cnvSequence("dpf"), "ㄉㄡˊ");
  XCTAssertEqual(composer.cnvSequence("dpj"), "ㄉㄡˇ");
  XCTAssertEqual(composer.cnvSequence("dpk"), "ㄉㄡˋ");
  XCTAssertEqual(composer.cnvSequence("dm"), "ㄉㄢ");
  XCTAssertEqual(composer.cnvSequence("dmj"), "ㄉㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dmk"), "ㄉㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dnk"), "ㄉㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dt"), "ㄉㄤ");
  XCTAssertEqual(composer.cnvSequence("dtj"), "ㄉㄤˇ");
  XCTAssertEqual(composer.cnvSequence("dtk"), "ㄉㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dl"), "ㄉㄥ");
  XCTAssertEqual(composer.cnvSequence("dlj"), "ㄉㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dlk"), "ㄉㄥˋ");
  XCTAssertEqual(composer.cnvSequence("de"), "ㄉㄧ");
  XCTAssertEqual(composer.cnvSequence("def"), "ㄉㄧˊ");
  XCTAssertEqual(composer.cnvSequence("dej"), "ㄉㄧˇ");
  XCTAssertEqual(composer.cnvSequence("dek"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("deaj"), "ㄉㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dew"), "ㄉㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("dewf"), "ㄉㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("dewj"), "ㄉㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("dewk"), "ㄉㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("dez"), "ㄉㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("dezj"), "ㄉㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dezk"), "ㄉㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("dep"), "ㄉㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("dem"), "ㄉㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("demf"), "ㄉㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("demj"), "ㄉㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("demk"), "ㄉㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("del"), "ㄉㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("delf"), "ㄉㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("delj"), "ㄉㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("delk"), "ㄉㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("dx"), "ㄉㄨ");
  XCTAssertEqual(composer.cnvSequence("dxf"), "ㄉㄨˊ");
  XCTAssertEqual(composer.cnvSequence("dxj"), "ㄉㄨˇ");
  XCTAssertEqual(composer.cnvSequence("dxk"), "ㄉㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dxo"), "ㄉㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("dxof"), "ㄉㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("dxoj"), "ㄉㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("dxok"), "ㄉㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("dxod"), "ㄉㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("dxq"), "ㄉㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("dxqj"), "ㄉㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dxqk"), "ㄉㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("dxm"), "ㄉㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("dxmj"), "ㄉㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dxmk"), "ㄉㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dxn"), "ㄉㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("dxnj"), "ㄉㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("dxnk"), "ㄉㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dxl"), "ㄉㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("dxlj"), "ㄉㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dxlk"), "ㄉㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ta"), "ㄊㄚ");
  XCTAssertEqual(composer.cnvSequence("taj"), "ㄊㄚˇ");
  XCTAssertEqual(composer.cnvSequence("tak"), "ㄊㄚˋ");
  XCTAssertEqual(composer.cnvSequence("trk"), "ㄊㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ti"), "ㄊㄞ");
  XCTAssertEqual(composer.cnvSequence("tif"), "ㄊㄞˊ");
  XCTAssertEqual(composer.cnvSequence("tij"), "ㄊㄞˇ");
  XCTAssertEqual(composer.cnvSequence("tik"), "ㄊㄞˋ");
  XCTAssertEqual(composer.cnvSequence("tid"), "ㄊㄞ˙");
  XCTAssertEqual(composer.cnvSequence("tz"), "ㄊㄠ");
  XCTAssertEqual(composer.cnvSequence("tzf"), "ㄊㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tzj"), "ㄊㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tzk"), "ㄊㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tzd"), "ㄊㄠ˙");
  XCTAssertEqual(composer.cnvSequence("tp"), "ㄊㄡ");
  XCTAssertEqual(composer.cnvSequence("tpf"), "ㄊㄡˊ");
  XCTAssertEqual(composer.cnvSequence("tpj"), "ㄊㄡˇ");
  XCTAssertEqual(composer.cnvSequence("tpk"), "ㄊㄡˋ");
  XCTAssertEqual(composer.cnvSequence("tpd"), "ㄊㄡ˙");
  XCTAssertEqual(composer.cnvSequence("tm"), "ㄊㄢ");
  XCTAssertEqual(composer.cnvSequence("tmf"), "ㄊㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tmj"), "ㄊㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tmk"), "ㄊㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tt"), "ㄊㄤ");
  XCTAssertEqual(composer.cnvSequence("ttf"), "ㄊㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ttj"), "ㄊㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ttk"), "ㄊㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tl"), "ㄊㄥ");
  XCTAssertEqual(composer.cnvSequence("tlf"), "ㄊㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tlk"), "ㄊㄥˋ");
  XCTAssertEqual(composer.cnvSequence("te"), "ㄊㄧ");
  XCTAssertEqual(composer.cnvSequence("tef"), "ㄊㄧˊ");
  XCTAssertEqual(composer.cnvSequence("tej"), "ㄊㄧˇ");
  XCTAssertEqual(composer.cnvSequence("tek"), "ㄊㄧˋ");
  XCTAssertEqual(composer.cnvSequence("tew"), "ㄊㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("tewf"), "ㄊㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("tewj"), "ㄊㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("tewk"), "ㄊㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("tez"), "ㄊㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("tezf"), "ㄊㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tezj"), "ㄊㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tezk"), "ㄊㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tem"), "ㄊㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("temf"), "ㄊㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("temj"), "ㄊㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("temk"), "ㄊㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tel"), "ㄊㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("telf"), "ㄊㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("telj"), "ㄊㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("telk"), "ㄊㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tx"), "ㄊㄨ");
  XCTAssertEqual(composer.cnvSequence("txf"), "ㄊㄨˊ");
  XCTAssertEqual(composer.cnvSequence("txj"), "ㄊㄨˇ");
  XCTAssertEqual(composer.cnvSequence("txk"), "ㄊㄨˋ");
  XCTAssertEqual(composer.cnvSequence("txo"), "ㄊㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("txof"), "ㄊㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("txoj"), "ㄊㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("txok"), "ㄊㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("txq"), "ㄊㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("txqf"), "ㄊㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("txqj"), "ㄊㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("txqk"), "ㄊㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("txm"), "ㄊㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("txmf"), "ㄊㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("txmj"), "ㄊㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("txmk"), "ㄊㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("txn"), "ㄊㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("txnf"), "ㄊㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("txnj"), "ㄊㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("txnk"), "ㄊㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("txl"), "ㄊㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("txlf"), "ㄊㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("txlj"), "ㄊㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("txlk"), "ㄊㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("na"), "ㄋㄚ");
  XCTAssertEqual(composer.cnvSequence("naf"), "ㄋㄚˊ");
  XCTAssertEqual(composer.cnvSequence("naj"), "ㄋㄚˇ");
  XCTAssertEqual(composer.cnvSequence("nak"), "ㄋㄚˋ");
  XCTAssertEqual(composer.cnvSequence("nad"), "ㄋㄚ˙");
  XCTAssertEqual(composer.cnvSequence("nrk"), "ㄋㄜˋ");
  XCTAssertEqual(composer.cnvSequence("nrd"), "ㄋㄜ˙");
  XCTAssertEqual(composer.cnvSequence("nif"), "ㄋㄞˊ");
  XCTAssertEqual(composer.cnvSequence("nij"), "ㄋㄞˇ");
  XCTAssertEqual(composer.cnvSequence("nik"), "ㄋㄞˋ");
  XCTAssertEqual(composer.cnvSequence("nqf"), "ㄋㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nqj"), "ㄋㄟˇ");
  XCTAssertEqual(composer.cnvSequence("nqk"), "ㄋㄟˋ");
  XCTAssertEqual(composer.cnvSequence("nz"), "ㄋㄠ");
  XCTAssertEqual(composer.cnvSequence("nzf"), "ㄋㄠˊ");
  XCTAssertEqual(composer.cnvSequence("nzj"), "ㄋㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nzk"), "ㄋㄠˋ");
  XCTAssertEqual(composer.cnvSequence("npf"), "ㄋㄡˊ");
  XCTAssertEqual(composer.cnvSequence("npj"), "ㄋㄡˇ");
  XCTAssertEqual(composer.cnvSequence("npk"), "ㄋㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nm"), "ㄋㄢ");
  XCTAssertEqual(composer.cnvSequence("nmf"), "ㄋㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nmj"), "ㄋㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nmk"), "ㄋㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nnj"), "ㄋㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nnk"), "ㄋㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nt"), "ㄋㄤ");
  XCTAssertEqual(composer.cnvSequence("ntf"), "ㄋㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ntj"), "ㄋㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ntk"), "ㄋㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ntd"), "ㄋㄤ˙");
  XCTAssertEqual(composer.cnvSequence("nlf"), "ㄋㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nlj"), "ㄋㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ne"), "ㄋㄧ");
  XCTAssertEqual(composer.cnvSequence("nef"), "ㄋㄧˊ");
  XCTAssertEqual(composer.cnvSequence("nej"), "ㄋㄧˇ");
  XCTAssertEqual(composer.cnvSequence("nek"), "ㄋㄧˋ");
  XCTAssertEqual(composer.cnvSequence("new"), "ㄋㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("newf"), "ㄋㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("newk"), "ㄋㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("nezj"), "ㄋㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nezk"), "ㄋㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("nep"), "ㄋㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("nepf"), "ㄋㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("nepj"), "ㄋㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("nepk"), "ㄋㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nem"), "ㄋㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("nemf"), "ㄋㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nemj"), "ㄋㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nemk"), "ㄋㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nen"), "ㄋㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("nenf"), "ㄋㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nenj"), "ㄋㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nenk"), "ㄋㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("netf"), "ㄋㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("netj"), "ㄋㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("netk"), "ㄋㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nelf"), "ㄋㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nelj"), "ㄋㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nelk"), "ㄋㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nxf"), "ㄋㄨˊ");
  XCTAssertEqual(composer.cnvSequence("nxj"), "ㄋㄨˇ");
  XCTAssertEqual(composer.cnvSequence("nxk"), "ㄋㄨˋ");
  XCTAssertEqual(composer.cnvSequence("nxof"), "ㄋㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("nxoj"), "ㄋㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("nxok"), "ㄋㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("nxqf"), "ㄋㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nxmf"), "ㄋㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nxmj"), "ㄋㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nxmk"), "ㄋㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nxnf"), "ㄋㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nxlf"), "ㄋㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nxlj"), "ㄋㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nxlk"), "ㄋㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nuf"), "ㄋㄩˊ");
  XCTAssertEqual(composer.cnvSequence("nuj"), "ㄋㄩˇ");
  XCTAssertEqual(composer.cnvSequence("nuk"), "ㄋㄩˋ");
  XCTAssertEqual(composer.cnvSequence("nuwk"), "ㄋㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("la"), "ㄌㄚ");
  XCTAssertEqual(composer.cnvSequence("laf"), "ㄌㄚˊ");
  XCTAssertEqual(composer.cnvSequence("laj"), "ㄌㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lak"), "ㄌㄚˋ");
  XCTAssertEqual(composer.cnvSequence("lad"), "ㄌㄚ˙");
  XCTAssertEqual(composer.cnvSequence("lo"), "ㄌㄛ");
  XCTAssertEqual(composer.cnvSequence("lod"), "ㄌㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lr"), "ㄌㄜ");
  XCTAssertEqual(composer.cnvSequence("lrf"), "ㄌㄜˊ");
  XCTAssertEqual(composer.cnvSequence("lrk"), "ㄌㄜˋ");
  XCTAssertEqual(composer.cnvSequence("lrd"), "ㄌㄜ˙");
  XCTAssertEqual(composer.cnvSequence("lif"), "ㄌㄞˊ");
  XCTAssertEqual(composer.cnvSequence("lij"), "ㄌㄞˇ");
  XCTAssertEqual(composer.cnvSequence("lik"), "ㄌㄞˋ");
  XCTAssertEqual(composer.cnvSequence("lq"), "ㄌㄟ");
  XCTAssertEqual(composer.cnvSequence("lqf"), "ㄌㄟˊ");
  XCTAssertEqual(composer.cnvSequence("lqj"), "ㄌㄟˇ");
  XCTAssertEqual(composer.cnvSequence("lqk"), "ㄌㄟˋ");
  XCTAssertEqual(composer.cnvSequence("lqd"), "ㄌㄟ˙");
  XCTAssertEqual(composer.cnvSequence("lz"), "ㄌㄠ");
  XCTAssertEqual(composer.cnvSequence("lzf"), "ㄌㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lzj"), "ㄌㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lzk"), "ㄌㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lp"), "ㄌㄡ");
  XCTAssertEqual(composer.cnvSequence("lpf"), "ㄌㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lpj"), "ㄌㄡˇ");
  XCTAssertEqual(composer.cnvSequence("lpk"), "ㄌㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lpd"), "ㄌㄡ˙");
  XCTAssertEqual(composer.cnvSequence("lmf"), "ㄌㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lmj"), "ㄌㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lmk"), "ㄌㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lt"), "ㄌㄤ");
  XCTAssertEqual(composer.cnvSequence("ltf"), "ㄌㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ltj"), "ㄌㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ltk"), "ㄌㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ll"), "ㄌㄥ");
  XCTAssertEqual(composer.cnvSequence("llf"), "ㄌㄥˊ");
  XCTAssertEqual(composer.cnvSequence("llj"), "ㄌㄥˇ");
  XCTAssertEqual(composer.cnvSequence("llk"), "ㄌㄥˋ");
  XCTAssertEqual(composer.cnvSequence("le"), "ㄌㄧ");
  XCTAssertEqual(composer.cnvSequence("lef"), "ㄌㄧˊ");
  XCTAssertEqual(composer.cnvSequence("lej"), "ㄌㄧˇ");
  XCTAssertEqual(composer.cnvSequence("lek"), "ㄌㄧˋ");
  XCTAssertEqual(composer.cnvSequence("led"), "ㄌㄧ˙");
  XCTAssertEqual(composer.cnvSequence("leaj"), "ㄌㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lew"), "ㄌㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("lewf"), "ㄌㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("lewj"), "ㄌㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("lewk"), "ㄌㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lez"), "ㄌㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("lezf"), "ㄌㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lezj"), "ㄌㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lezk"), "ㄌㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lep"), "ㄌㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("lepf"), "ㄌㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lepj"), "ㄌㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("lepk"), "ㄌㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lem"), "ㄌㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("lemf"), "ㄌㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lemj"), "ㄌㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lemk"), "ㄌㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lenf"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lenj"), "ㄌㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lenk"), "ㄌㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("letf"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("letj"), "ㄌㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("letk"), "ㄌㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("lel"), "ㄌㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("lelf"), "ㄌㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lelj"), "ㄌㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lelk"), "ㄌㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lx"), "ㄌㄨ");
  XCTAssertEqual(composer.cnvSequence("lxf"), "ㄌㄨˊ");
  XCTAssertEqual(composer.cnvSequence("lxj"), "ㄌㄨˇ");
  XCTAssertEqual(composer.cnvSequence("lxk"), "ㄌㄨˋ");
  XCTAssertEqual(composer.cnvSequence("lxo"), "ㄌㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("lxof"), "ㄌㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("lxoj"), "ㄌㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("lxok"), "ㄌㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("lxod"), "ㄌㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lxmf"), "ㄌㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lxmj"), "ㄌㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lxmk"), "ㄌㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lxn"), "ㄌㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("lxnf"), "ㄌㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lxnj"), "ㄌㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lxnk"), "ㄌㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lxl"), "ㄌㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("lxlf"), "ㄌㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lxlj"), "ㄌㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lxlk"), "ㄌㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lu"), "ㄌㄩ");
  XCTAssertEqual(composer.cnvSequence("luf"), "ㄌㄩˊ");
  XCTAssertEqual(composer.cnvSequence("luj"), "ㄌㄩˇ");
  XCTAssertEqual(composer.cnvSequence("luk"), "ㄌㄩˋ");
  XCTAssertEqual(composer.cnvSequence("luw"), "ㄌㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("luwj"), "ㄌㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("luwk"), "ㄌㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lumf"), "ㄌㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lumj"), "ㄌㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("va"), "ㄍㄚ");
  XCTAssertEqual(composer.cnvSequence("vaf"), "ㄍㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vaj"), "ㄍㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vak"), "ㄍㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vad"), "ㄍㄚ˙");
  XCTAssertEqual(composer.cnvSequence("vr"), "ㄍㄜ");
  XCTAssertEqual(composer.cnvSequence("vrf"), "ㄍㄜˊ");
  XCTAssertEqual(composer.cnvSequence("vrj"), "ㄍㄜˇ");
  XCTAssertEqual(composer.cnvSequence("vrk"), "ㄍㄜˋ");
  XCTAssertEqual(composer.cnvSequence("vrd"), "ㄍㄜ˙");
  XCTAssertEqual(composer.cnvSequence("vi"), "ㄍㄞ");
  XCTAssertEqual(composer.cnvSequence("vij"), "ㄍㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vik"), "ㄍㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vqj"), "ㄍㄟˇ");
  XCTAssertEqual(composer.cnvSequence("vz"), "ㄍㄠ");
  XCTAssertEqual(composer.cnvSequence("vzj"), "ㄍㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vzk"), "ㄍㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vp"), "ㄍㄡ");
  XCTAssertEqual(composer.cnvSequence("vpj"), "ㄍㄡˇ");
  XCTAssertEqual(composer.cnvSequence("vpk"), "ㄍㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vm"), "ㄍㄢ");
  XCTAssertEqual(composer.cnvSequence("vmj"), "ㄍㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vmk"), "ㄍㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vn"), "ㄍㄣ");
  XCTAssertEqual(composer.cnvSequence("vnf"), "ㄍㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vnj"), "ㄍㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vnk"), "ㄍㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vt"), "ㄍㄤ");
  XCTAssertEqual(composer.cnvSequence("vtj"), "ㄍㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vtk"), "ㄍㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vl"), "ㄍㄥ");
  XCTAssertEqual(composer.cnvSequence("vlj"), "ㄍㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vlk"), "ㄍㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vx"), "ㄍㄨ");
  XCTAssertEqual(composer.cnvSequence("vxf"), "ㄍㄨˊ");
  XCTAssertEqual(composer.cnvSequence("vxj"), "ㄍㄨˇ");
  XCTAssertEqual(composer.cnvSequence("vxk"), "ㄍㄨˋ");
  XCTAssertEqual(composer.cnvSequence("vxa"), "ㄍㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("vxaf"), "ㄍㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vxaj"), "ㄍㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vxak"), "ㄍㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vxo"), "ㄍㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("vxof"), "ㄍㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("vxoj"), "ㄍㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("vxok"), "ㄍㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("vxi"), "ㄍㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("vxij"), "ㄍㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vxik"), "ㄍㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vxq"), "ㄍㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("vxqj"), "ㄍㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("vxqk"), "ㄍㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("vxm"), "ㄍㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("vxmj"), "ㄍㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vxmk"), "ㄍㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vxn"), "ㄍㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("vxnj"), "ㄍㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vxnk"), "ㄍㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vxt"), "ㄍㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("vxtj"), "ㄍㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vxtk"), "ㄍㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vxl"), "ㄍㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("vxlf"), "ㄍㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vxlj"), "ㄍㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vxlk"), "ㄍㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ka"), "ㄎㄚ");
  XCTAssertEqual(composer.cnvSequence("kaj"), "ㄎㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kak"), "ㄎㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kr"), "ㄎㄜ");
  XCTAssertEqual(composer.cnvSequence("krf"), "ㄎㄜˊ");
  XCTAssertEqual(composer.cnvSequence("krj"), "ㄎㄜˇ");
  XCTAssertEqual(composer.cnvSequence("krk"), "ㄎㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ki"), "ㄎㄞ");
  XCTAssertEqual(composer.cnvSequence("kij"), "ㄎㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kik"), "ㄎㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kz"), "ㄎㄠ");
  XCTAssertEqual(composer.cnvSequence("kzj"), "ㄎㄠˇ");
  XCTAssertEqual(composer.cnvSequence("kzk"), "ㄎㄠˋ");
  XCTAssertEqual(composer.cnvSequence("kp"), "ㄎㄡ");
  XCTAssertEqual(composer.cnvSequence("kpj"), "ㄎㄡˇ");
  XCTAssertEqual(composer.cnvSequence("kpk"), "ㄎㄡˋ");
  XCTAssertEqual(composer.cnvSequence("km"), "ㄎㄢ");
  XCTAssertEqual(composer.cnvSequence("kmj"), "ㄎㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kmk"), "ㄎㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kn"), "ㄎㄣ");
  XCTAssertEqual(composer.cnvSequence("knj"), "ㄎㄣˇ");
  XCTAssertEqual(composer.cnvSequence("knk"), "ㄎㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kt"), "ㄎㄤ");
  XCTAssertEqual(composer.cnvSequence("ktf"), "ㄎㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ktj"), "ㄎㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ktk"), "ㄎㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kl"), "ㄎㄥ");
  XCTAssertEqual(composer.cnvSequence("klj"), "ㄎㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kx"), "ㄎㄨ");
  XCTAssertEqual(composer.cnvSequence("kxf"), "ㄎㄨˊ");
  XCTAssertEqual(composer.cnvSequence("kxj"), "ㄎㄨˇ");
  XCTAssertEqual(composer.cnvSequence("kxk"), "ㄎㄨˋ");
  XCTAssertEqual(composer.cnvSequence("kxa"), "ㄎㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("kxaj"), "ㄎㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kxak"), "ㄎㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kxok"), "ㄎㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("kxi"), "ㄎㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("kxij"), "ㄎㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kxik"), "ㄎㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kxq"), "ㄎㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("kxqf"), "ㄎㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("kxqj"), "ㄎㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("kxqk"), "ㄎㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("kxm"), "ㄎㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("kxmj"), "ㄎㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kxmk"), "ㄎㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kxn"), "ㄎㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("kxnj"), "ㄎㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("kxnk"), "ㄎㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kxt"), "ㄎㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("kxtf"), "ㄎㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kxtj"), "ㄎㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kxtk"), "ㄎㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kxl"), "ㄎㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("kxlj"), "ㄎㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kxlk"), "ㄎㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ha"), "ㄏㄚ");
  XCTAssertEqual(composer.cnvSequence("haf"), "ㄏㄚˊ");
  XCTAssertEqual(composer.cnvSequence("haj"), "ㄏㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hr"), "ㄏㄜ");
  XCTAssertEqual(composer.cnvSequence("hrf"), "ㄏㄜˊ");
  XCTAssertEqual(composer.cnvSequence("hrj"), "ㄏㄜˇ");
  XCTAssertEqual(composer.cnvSequence("hrk"), "ㄏㄜˋ");
  XCTAssertEqual(composer.cnvSequence("hi"), "ㄏㄞ");
  XCTAssertEqual(composer.cnvSequence("hif"), "ㄏㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hij"), "ㄏㄞˇ");
  XCTAssertEqual(composer.cnvSequence("hik"), "ㄏㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hq"), "ㄏㄟ");
  XCTAssertEqual(composer.cnvSequence("hqj"), "ㄏㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hz"), "ㄏㄠ");
  XCTAssertEqual(composer.cnvSequence("hzf"), "ㄏㄠˊ");
  XCTAssertEqual(composer.cnvSequence("hzj"), "ㄏㄠˇ");
  XCTAssertEqual(composer.cnvSequence("hzk"), "ㄏㄠˋ");
  XCTAssertEqual(composer.cnvSequence("hp"), "ㄏㄡ");
  XCTAssertEqual(composer.cnvSequence("hpf"), "ㄏㄡˊ");
  XCTAssertEqual(composer.cnvSequence("hpj"), "ㄏㄡˇ");
  XCTAssertEqual(composer.cnvSequence("hpk"), "ㄏㄡˋ");
  XCTAssertEqual(composer.cnvSequence("hm"), "ㄏㄢ");
  XCTAssertEqual(composer.cnvSequence("hmf"), "ㄏㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hmj"), "ㄏㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hmk"), "ㄏㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hn"), "ㄏㄣ");
  XCTAssertEqual(composer.cnvSequence("hnf"), "ㄏㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hnj"), "ㄏㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hnk"), "ㄏㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ht"), "ㄏㄤ");
  XCTAssertEqual(composer.cnvSequence("htf"), "ㄏㄤˊ");
  XCTAssertEqual(composer.cnvSequence("htj"), "ㄏㄤˇ");
  XCTAssertEqual(composer.cnvSequence("htk"), "ㄏㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hl"), "ㄏㄥ");
  XCTAssertEqual(composer.cnvSequence("hlf"), "ㄏㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hlk"), "ㄏㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hx"), "ㄏㄨ");
  XCTAssertEqual(composer.cnvSequence("hxf"), "ㄏㄨˊ");
  XCTAssertEqual(composer.cnvSequence("hxj"), "ㄏㄨˇ");
  XCTAssertEqual(composer.cnvSequence("hxk"), "ㄏㄨˋ");
  XCTAssertEqual(composer.cnvSequence("hxa"), "ㄏㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("hxaf"), "ㄏㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hxaj"), "ㄏㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hxak"), "ㄏㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("hxo"), "ㄏㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("hxof"), "ㄏㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hxoj"), "ㄏㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hxok"), "ㄏㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("hxod"), "ㄏㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("hxif"), "ㄏㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hxik"), "ㄏㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hxq"), "ㄏㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("hxqf"), "ㄏㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("hxqj"), "ㄏㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hxqk"), "ㄏㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("hxm"), "ㄏㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("hxmf"), "ㄏㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hxmj"), "ㄏㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hxmk"), "ㄏㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hxn"), "ㄏㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("hxnf"), "ㄏㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hxnj"), "ㄏㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hxnk"), "ㄏㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hxt"), "ㄏㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("hxtf"), "ㄏㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hxtj"), "ㄏㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hxtk"), "ㄏㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hxtd"), "ㄏㄨㄤ˙");
  XCTAssertEqual(composer.cnvSequence("hxl"), "ㄏㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("hxlf"), "ㄏㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hxlj"), "ㄏㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hxlk"), "ㄏㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ge"), "ㄐㄧ");
  XCTAssertEqual(composer.cnvSequence("gef"), "ㄐㄧˊ");
  XCTAssertEqual(composer.cnvSequence("gej"), "ㄐㄧˇ");
  XCTAssertEqual(composer.cnvSequence("gek"), "ㄐㄧˋ");
  XCTAssertEqual(composer.cnvSequence("gea"), "ㄐㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("geaf"), "ㄐㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("geaj"), "ㄐㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("geak"), "ㄐㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gew"), "ㄐㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("gewf"), "ㄐㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("gewj"), "ㄐㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("gewk"), "ㄐㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("gewd"), "ㄐㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("gez"), "ㄐㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("gezf"), "ㄐㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("gezj"), "ㄐㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gezk"), "ㄐㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("gep"), "ㄐㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("gepj"), "ㄐㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("gepk"), "ㄐㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gem"), "ㄐㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("gemj"), "ㄐㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gemk"), "ㄐㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gen"), "ㄐㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("genj"), "ㄐㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("genk"), "ㄐㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("get"), "ㄐㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("getf"), "ㄐㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("getj"), "ㄐㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("getk"), "ㄐㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gel"), "ㄐㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("gelj"), "ㄐㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gelk"), "ㄐㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gu"), "ㄐㄩ");
  XCTAssertEqual(composer.cnvSequence("guf"), "ㄐㄩˊ");
  XCTAssertEqual(composer.cnvSequence("guj"), "ㄐㄩˇ");
  XCTAssertEqual(composer.cnvSequence("guk"), "ㄐㄩˋ");
  XCTAssertEqual(composer.cnvSequence("guw"), "ㄐㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("guwf"), "ㄐㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("guwj"), "ㄐㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("guwk"), "ㄐㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("gum"), "ㄐㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("gumj"), "ㄐㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gumk"), "ㄐㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gun"), "ㄐㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("gunf"), "ㄐㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gunj"), "ㄐㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gunk"), "ㄐㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gul"), "ㄐㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("gulj"), "ㄐㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gulk"), "ㄐㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vd"), "ㄑ˙");
  XCTAssertEqual(composer.cnvSequence("ve"), "ㄑㄧ");
  XCTAssertEqual(composer.cnvSequence("vef"), "ㄑㄧˊ");
  XCTAssertEqual(composer.cnvSequence("vej"), "ㄑㄧˇ");
  XCTAssertEqual(composer.cnvSequence("vek"), "ㄑㄧˋ");
  XCTAssertEqual(composer.cnvSequence("vea"), "ㄑㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("veaf"), "ㄑㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("veaj"), "ㄑㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("veak"), "ㄑㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vew"), "ㄑㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("vewf"), "ㄑㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vewj"), "ㄑㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("vewk"), "ㄑㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vez"), "ㄑㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("vezf"), "ㄑㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vezj"), "ㄑㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vezk"), "ㄑㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vep"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("vepf"), "ㄑㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("vepj"), "ㄑㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("vepk"), "ㄑㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vem"), "ㄑㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("vemf"), "ㄑㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vemj"), "ㄑㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vemk"), "ㄑㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ven"), "ㄑㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("venf"), "ㄑㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("venj"), "ㄑㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("venk"), "ㄑㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vet"), "ㄑㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("vetf"), "ㄑㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vetj"), "ㄑㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vetk"), "ㄑㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vel"), "ㄑㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("velf"), "ㄑㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("velj"), "ㄑㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("velk"), "ㄑㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vu"), "ㄑㄩ");
  XCTAssertEqual(composer.cnvSequence("vuf"), "ㄑㄩˊ");
  XCTAssertEqual(composer.cnvSequence("vuj"), "ㄑㄩˇ");
  XCTAssertEqual(composer.cnvSequence("vuk"), "ㄑㄩˋ");
  XCTAssertEqual(composer.cnvSequence("vuw"), "ㄑㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("vuwf"), "ㄑㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vuwk"), "ㄑㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vum"), "ㄑㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("vumf"), "ㄑㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vumj"), "ㄑㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vumk"), "ㄑㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vun"), "ㄑㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("vunf"), "ㄑㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vunj"), "ㄑㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vunk"), "ㄑㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vul"), "ㄑㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("vulf"), "ㄑㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vulj"), "ㄑㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vulk"), "ㄑㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ce"), "ㄒㄧ");
  XCTAssertEqual(composer.cnvSequence("cef"), "ㄒㄧˊ");
  XCTAssertEqual(composer.cnvSequence("cej"), "ㄒㄧˇ");
  XCTAssertEqual(composer.cnvSequence("cek"), "ㄒㄧˋ");
  XCTAssertEqual(composer.cnvSequence("cea"), "ㄒㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("ceaf"), "ㄒㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ceaj"), "ㄒㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ceak"), "ㄒㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cew"), "ㄒㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("cewf"), "ㄒㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("cewj"), "ㄒㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("cewk"), "ㄒㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cez"), "ㄒㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("cezf"), "ㄒㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cezj"), "ㄒㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cezk"), "ㄒㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("cep"), "ㄒㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("cepf"), "ㄒㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cepj"), "ㄒㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("cepk"), "ㄒㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cem"), "ㄒㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("cemf"), "ㄒㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cemj"), "ㄒㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cemk"), "ㄒㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cen"), "ㄒㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("cenf"), "ㄒㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cenj"), "ㄒㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cenk"), "ㄒㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cet"), "ㄒㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("cetf"), "ㄒㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cetj"), "ㄒㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cetk"), "ㄒㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cel"), "ㄒㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("celf"), "ㄒㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("celj"), "ㄒㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("celk"), "ㄒㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cu"), "ㄒㄩ");
  XCTAssertEqual(composer.cnvSequence("cuf"), "ㄒㄩˊ");
  XCTAssertEqual(composer.cnvSequence("cuj"), "ㄒㄩˇ");
  XCTAssertEqual(composer.cnvSequence("cuk"), "ㄒㄩˋ");
  XCTAssertEqual(composer.cnvSequence("cuw"), "ㄒㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("cuwf"), "ㄒㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("cuwj"), "ㄒㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("cuwk"), "ㄒㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cum"), "ㄒㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("cumf"), "ㄒㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cumj"), "ㄒㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cumk"), "ㄒㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cun"), "ㄒㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("cunf"), "ㄒㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cunk"), "ㄒㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cul"), "ㄒㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("culf"), "ㄒㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("culj"), "ㄒㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("culk"), "ㄒㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("g"), "ㄓ");
  XCTAssertEqual(composer.cnvSequence("gf"), "ㄓˊ");
  XCTAssertEqual(composer.cnvSequence("gj"), "ㄓˇ");
  XCTAssertEqual(composer.cnvSequence("gk"), "ㄓˋ");
  XCTAssertEqual(composer.cnvSequence("ga"), "ㄓㄚ");
  XCTAssertEqual(composer.cnvSequence("gaf"), "ㄓㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gaj"), "ㄓㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gak"), "ㄓㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gr"), "ㄓㄜ");
  XCTAssertEqual(composer.cnvSequence("grf"), "ㄓㄜˊ");
  XCTAssertEqual(composer.cnvSequence("grj"), "ㄓㄜˇ");
  XCTAssertEqual(composer.cnvSequence("grk"), "ㄓㄜˋ");
  XCTAssertEqual(composer.cnvSequence("grd"), "ㄓㄜ˙");
  XCTAssertEqual(composer.cnvSequence("gi"), "ㄓㄞ");
  XCTAssertEqual(composer.cnvSequence("gif"), "ㄓㄞˊ");
  XCTAssertEqual(composer.cnvSequence("gij"), "ㄓㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gik"), "ㄓㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gqk"), "ㄓㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gz"), "ㄓㄠ");
  XCTAssertEqual(composer.cnvSequence("gzf"), "ㄓㄠˊ");
  XCTAssertEqual(composer.cnvSequence("gzj"), "ㄓㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gzk"), "ㄓㄠˋ");
  XCTAssertEqual(composer.cnvSequence("gp"), "ㄓㄡ");
  XCTAssertEqual(composer.cnvSequence("gpf"), "ㄓㄡˊ");
  XCTAssertEqual(composer.cnvSequence("gpj"), "ㄓㄡˇ");
  XCTAssertEqual(composer.cnvSequence("gpk"), "ㄓㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gm"), "ㄓㄢ");
  XCTAssertEqual(composer.cnvSequence("gmj"), "ㄓㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gmk"), "ㄓㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gn"), "ㄓㄣ");
  XCTAssertEqual(composer.cnvSequence("gnf"), "ㄓㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gnj"), "ㄓㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gnk"), "ㄓㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gt"), "ㄓㄤ");
  XCTAssertEqual(composer.cnvSequence("gtj"), "ㄓㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gtk"), "ㄓㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gl"), "ㄓㄥ");
  XCTAssertEqual(composer.cnvSequence("glj"), "ㄓㄥˇ");
  XCTAssertEqual(composer.cnvSequence("glk"), "ㄓㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gx"), "ㄓㄨ");
  XCTAssertEqual(composer.cnvSequence("gxf"), "ㄓㄨˊ");
  XCTAssertEqual(composer.cnvSequence("gxj"), "ㄓㄨˇ");
  XCTAssertEqual(composer.cnvSequence("gxk"), "ㄓㄨˋ");
  XCTAssertEqual(composer.cnvSequence("gxa"), "ㄓㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("gxaj"), "ㄓㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gxo"), "ㄓㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("gxof"), "ㄓㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("gxok"), "ㄓㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("gxi"), "ㄓㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("gxij"), "ㄓㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gxik"), "ㄓㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gxq"), "ㄓㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("gxqj"), "ㄓㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gxqk"), "ㄓㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gxm"), "ㄓㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("gxmj"), "ㄓㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gxmk"), "ㄓㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gxn"), "ㄓㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("gxnj"), "ㄓㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gxnk"), "ㄓㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gxt"), "ㄓㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("gxtj"), "ㄓㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gxtk"), "ㄓㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gxl"), "ㄓㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("gxlj"), "ㄓㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gxlk"), "ㄓㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("y"), "ㄔ");
  XCTAssertEqual(composer.cnvSequence("yf"), "ㄔˊ");
  XCTAssertEqual(composer.cnvSequence("yj"), "ㄔˇ");
  XCTAssertEqual(composer.cnvSequence("yk"), "ㄔˋ");
  XCTAssertEqual(composer.cnvSequence("ya"), "ㄔㄚ");
  XCTAssertEqual(composer.cnvSequence("yaf"), "ㄔㄚˊ");
  XCTAssertEqual(composer.cnvSequence("yaj"), "ㄔㄚˇ");
  XCTAssertEqual(composer.cnvSequence("yak"), "ㄔㄚˋ");
  XCTAssertEqual(composer.cnvSequence("yr"), "ㄔㄜ");
  XCTAssertEqual(composer.cnvSequence("yrj"), "ㄔㄜˇ");
  XCTAssertEqual(composer.cnvSequence("yrk"), "ㄔㄜˋ");
  XCTAssertEqual(composer.cnvSequence("yi"), "ㄔㄞ");
  XCTAssertEqual(composer.cnvSequence("yif"), "ㄔㄞˊ");
  XCTAssertEqual(composer.cnvSequence("yij"), "ㄔㄞˇ");
  XCTAssertEqual(composer.cnvSequence("yik"), "ㄔㄞˋ");
  XCTAssertEqual(composer.cnvSequence("yz"), "ㄔㄠ");
  XCTAssertEqual(composer.cnvSequence("yzf"), "ㄔㄠˊ");
  XCTAssertEqual(composer.cnvSequence("yzj"), "ㄔㄠˇ");
  XCTAssertEqual(composer.cnvSequence("yzk"), "ㄔㄠˋ");
  XCTAssertEqual(composer.cnvSequence("yp"), "ㄔㄡ");
  XCTAssertEqual(composer.cnvSequence("ypf"), "ㄔㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ypj"), "ㄔㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ypk"), "ㄔㄡˋ");
  XCTAssertEqual(composer.cnvSequence("ym"), "ㄔㄢ");
  XCTAssertEqual(composer.cnvSequence("ymf"), "ㄔㄢˊ");
  XCTAssertEqual(composer.cnvSequence("ymj"), "ㄔㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ymk"), "ㄔㄢˋ");
  XCTAssertEqual(composer.cnvSequence("yn"), "ㄔㄣ");
  XCTAssertEqual(composer.cnvSequence("ynf"), "ㄔㄣˊ");
  XCTAssertEqual(composer.cnvSequence("ynj"), "ㄔㄣˇ");
  XCTAssertEqual(composer.cnvSequence("ynk"), "ㄔㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ynd"), "ㄔㄣ˙");
  XCTAssertEqual(composer.cnvSequence("yt"), "ㄔㄤ");
  XCTAssertEqual(composer.cnvSequence("ytf"), "ㄔㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ytj"), "ㄔㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ytk"), "ㄔㄤˋ");
  XCTAssertEqual(composer.cnvSequence("yl"), "ㄔㄥ");
  XCTAssertEqual(composer.cnvSequence("ylf"), "ㄔㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ylj"), "ㄔㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ylk"), "ㄔㄥˋ");
  XCTAssertEqual(composer.cnvSequence("yx"), "ㄔㄨ");
  XCTAssertEqual(composer.cnvSequence("yxf"), "ㄔㄨˊ");
  XCTAssertEqual(composer.cnvSequence("yxj"), "ㄔㄨˇ");
  XCTAssertEqual(composer.cnvSequence("yxk"), "ㄔㄨˋ");
  XCTAssertEqual(composer.cnvSequence("yxa"), "ㄔㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("yxaj"), "ㄔㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("yxak"), "ㄔㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("yxo"), "ㄔㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("yxok"), "ㄔㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("yxi"), "ㄔㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("yxif"), "ㄔㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("yxij"), "ㄔㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("yxik"), "ㄔㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("yxq"), "ㄔㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("yxqf"), "ㄔㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("yxqj"), "ㄔㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("yxqk"), "ㄔㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("yxm"), "ㄔㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("yxmf"), "ㄔㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("yxmj"), "ㄔㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("yxmk"), "ㄔㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("yxn"), "ㄔㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("yxnf"), "ㄔㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("yxnj"), "ㄔㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("yxt"), "ㄔㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("yxtf"), "ㄔㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("yxtj"), "ㄔㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("yxtk"), "ㄔㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("yxl"), "ㄔㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("yxlf"), "ㄔㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("yxlj"), "ㄔㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("yxlk"), "ㄔㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("c"), "ㄕ");
  XCTAssertEqual(composer.cnvSequence("cf"), "ㄕˊ");
  XCTAssertEqual(composer.cnvSequence("cj"), "ㄕˇ");
  XCTAssertEqual(composer.cnvSequence("ck"), "ㄕˋ");
  XCTAssertEqual(composer.cnvSequence("cd"), "ㄕ˙");
  XCTAssertEqual(composer.cnvSequence("ca"), "ㄕㄚ");
  XCTAssertEqual(composer.cnvSequence("caf"), "ㄕㄚˊ");
  XCTAssertEqual(composer.cnvSequence("caj"), "ㄕㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cak"), "ㄕㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cad"), "ㄕㄚ˙");
  XCTAssertEqual(composer.cnvSequence("cr"), "ㄕㄜ");
  XCTAssertEqual(composer.cnvSequence("crf"), "ㄕㄜˊ");
  XCTAssertEqual(composer.cnvSequence("crj"), "ㄕㄜˇ");
  XCTAssertEqual(composer.cnvSequence("crk"), "ㄕㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ci"), "ㄕㄞ");
  XCTAssertEqual(composer.cnvSequence("cij"), "ㄕㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cik"), "ㄕㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cqf"), "ㄕㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cz"), "ㄕㄠ");
  XCTAssertEqual(composer.cnvSequence("czf"), "ㄕㄠˊ");
  XCTAssertEqual(composer.cnvSequence("czj"), "ㄕㄠˇ");
  XCTAssertEqual(composer.cnvSequence("czk"), "ㄕㄠˋ");
  XCTAssertEqual(composer.cnvSequence("cp"), "ㄕㄡ");
  XCTAssertEqual(composer.cnvSequence("cpf"), "ㄕㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cpj"), "ㄕㄡˇ");
  XCTAssertEqual(composer.cnvSequence("cpk"), "ㄕㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cm"), "ㄕㄢ");
  XCTAssertEqual(composer.cnvSequence("cmf"), "ㄕㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cmj"), "ㄕㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cmk"), "ㄕㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cn"), "ㄕㄣ");
  XCTAssertEqual(composer.cnvSequence("cnf"), "ㄕㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cnj"), "ㄕㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cnk"), "ㄕㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ct"), "ㄕㄤ");
  XCTAssertEqual(composer.cnvSequence("ctj"), "ㄕㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ctk"), "ㄕㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ctd"), "ㄕㄤ˙");
  XCTAssertEqual(composer.cnvSequence("cl"), "ㄕㄥ");
  XCTAssertEqual(composer.cnvSequence("clf"), "ㄕㄥˊ");
  XCTAssertEqual(composer.cnvSequence("clj"), "ㄕㄥˇ");
  XCTAssertEqual(composer.cnvSequence("clk"), "ㄕㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cx"), "ㄕㄨ");
  XCTAssertEqual(composer.cnvSequence("cxf"), "ㄕㄨˊ");
  XCTAssertEqual(composer.cnvSequence("cxj"), "ㄕㄨˇ");
  XCTAssertEqual(composer.cnvSequence("cxk"), "ㄕㄨˋ");
  XCTAssertEqual(composer.cnvSequence("cxa"), "ㄕㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("cxaj"), "ㄕㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cxak"), "ㄕㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cxo"), "ㄕㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("cxok"), "ㄕㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("cxi"), "ㄕㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("cxij"), "ㄕㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cxik"), "ㄕㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cxq"), "ㄕㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("cxqf"), "ㄕㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cxqj"), "ㄕㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cxqk"), "ㄕㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("cxm"), "ㄕㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("cxmk"), "ㄕㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cxnj"), "ㄕㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cxnk"), "ㄕㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cxt"), "ㄕㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("cxtf"), "ㄕㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cxtj"), "ㄕㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cxtk"), "ㄕㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jk"), "ㄖˋ");
  XCTAssertEqual(composer.cnvSequence("jrj"), "ㄖㄜˇ");
  XCTAssertEqual(composer.cnvSequence("jrk"), "ㄖㄜˋ");
  XCTAssertEqual(composer.cnvSequence("jzf"), "ㄖㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jzj"), "ㄖㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jzk"), "ㄖㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jpf"), "ㄖㄡˊ");
  XCTAssertEqual(composer.cnvSequence("jpj"), "ㄖㄡˇ");
  XCTAssertEqual(composer.cnvSequence("jpk"), "ㄖㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jmf"), "ㄖㄢˊ");
  XCTAssertEqual(composer.cnvSequence("jmj"), "ㄖㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jmk"), "ㄖㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jnf"), "ㄖㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jnj"), "ㄖㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jnk"), "ㄖㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jt"), "ㄖㄤ");
  XCTAssertEqual(composer.cnvSequence("jtf"), "ㄖㄤˊ");
  XCTAssertEqual(composer.cnvSequence("jtj"), "ㄖㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jtk"), "ㄖㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jl"), "ㄖㄥ");
  XCTAssertEqual(composer.cnvSequence("jlf"), "ㄖㄥˊ");
  XCTAssertEqual(composer.cnvSequence("jlj"), "ㄖㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jlk"), "ㄖㄥˋ");
  XCTAssertEqual(composer.cnvSequence("jxf"), "ㄖㄨˊ");
  XCTAssertEqual(composer.cnvSequence("jxj"), "ㄖㄨˇ");
  XCTAssertEqual(composer.cnvSequence("jxk"), "ㄖㄨˋ");
  XCTAssertEqual(composer.cnvSequence("jxof"), "ㄖㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("jxok"), "ㄖㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("jxqf"), "ㄖㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("jxqj"), "ㄖㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("jxqk"), "ㄖㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jxmf"), "ㄖㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("jxmj"), "ㄖㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jxmk"), "ㄖㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jxnf"), "ㄖㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jxnj"), "ㄖㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jxnk"), "ㄖㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jxlf"), "ㄖㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("jxlj"), "ㄖㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jxlk"), "ㄖㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("q"), "ㄗ");
  XCTAssertEqual(composer.cnvSequence("qf"), "ㄗˊ");
  XCTAssertEqual(composer.cnvSequence("qj"), "ㄗˇ");
  XCTAssertEqual(composer.cnvSequence("qk"), "ㄗˋ");
  XCTAssertEqual(composer.cnvSequence("qd"), "ㄗ˙");
  XCTAssertEqual(composer.cnvSequence("qa"), "ㄗㄚ");
  XCTAssertEqual(composer.cnvSequence("qaf"), "ㄗㄚˊ");
  XCTAssertEqual(composer.cnvSequence("qaj"), "ㄗㄚˇ");
  XCTAssertEqual(composer.cnvSequence("qrf"), "ㄗㄜˊ");
  XCTAssertEqual(composer.cnvSequence("qrj"), "ㄗㄜˇ");
  XCTAssertEqual(composer.cnvSequence("qrk"), "ㄗㄜˋ");
  XCTAssertEqual(composer.cnvSequence("qi"), "ㄗㄞ");
  XCTAssertEqual(composer.cnvSequence("qij"), "ㄗㄞˇ");
  XCTAssertEqual(composer.cnvSequence("qik"), "ㄗㄞˋ");
  XCTAssertEqual(composer.cnvSequence("qqf"), "ㄗㄟˊ");
  XCTAssertEqual(composer.cnvSequence("qz"), "ㄗㄠ");
  XCTAssertEqual(composer.cnvSequence("qzf"), "ㄗㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qzj"), "ㄗㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qzk"), "ㄗㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qp"), "ㄗㄡ");
  XCTAssertEqual(composer.cnvSequence("qpj"), "ㄗㄡˇ");
  XCTAssertEqual(composer.cnvSequence("qpk"), "ㄗㄡˋ");
  XCTAssertEqual(composer.cnvSequence("qm"), "ㄗㄢ");
  XCTAssertEqual(composer.cnvSequence("qmf"), "ㄗㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qmj"), "ㄗㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qmk"), "ㄗㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qn"), "ㄗㄣ");
  XCTAssertEqual(composer.cnvSequence("qnj"), "ㄗㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qnk"), "ㄗㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qt"), "ㄗㄤ");
  XCTAssertEqual(composer.cnvSequence("qtj"), "ㄗㄤˇ");
  XCTAssertEqual(composer.cnvSequence("qtk"), "ㄗㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ql"), "ㄗㄥ");
  XCTAssertEqual(composer.cnvSequence("qlj"), "ㄗㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qlk"), "ㄗㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qx"), "ㄗㄨ");
  XCTAssertEqual(composer.cnvSequence("qxf"), "ㄗㄨˊ");
  XCTAssertEqual(composer.cnvSequence("qxj"), "ㄗㄨˇ");
  XCTAssertEqual(composer.cnvSequence("qxk"), "ㄗㄨˋ");
  XCTAssertEqual(composer.cnvSequence("qxo"), "ㄗㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("qxof"), "ㄗㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("qxoj"), "ㄗㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("qxok"), "ㄗㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("qxod"), "ㄗㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("qxq"), "ㄗㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("qxqj"), "ㄗㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("qxqk"), "ㄗㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("qxm"), "ㄗㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("qxmj"), "ㄗㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qxmk"), "ㄗㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qxn"), "ㄗㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("qxnj"), "ㄗㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qxnk"), "ㄗㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qxl"), "ㄗㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("qxlj"), "ㄗㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qxlk"), "ㄗㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("w"), "ㄘ");
  XCTAssertEqual(composer.cnvSequence("wf"), "ㄘˊ");
  XCTAssertEqual(composer.cnvSequence("wj"), "ㄘˇ");
  XCTAssertEqual(composer.cnvSequence("wk"), "ㄘˋ");
  XCTAssertEqual(composer.cnvSequence("wa"), "ㄘㄚ");
  XCTAssertEqual(composer.cnvSequence("waj"), "ㄘㄚˇ");
  XCTAssertEqual(composer.cnvSequence("wak"), "ㄘㄚˋ");
  XCTAssertEqual(composer.cnvSequence("wrk"), "ㄘㄜˋ");
  XCTAssertEqual(composer.cnvSequence("wi"), "ㄘㄞ");
  XCTAssertEqual(composer.cnvSequence("wif"), "ㄘㄞˊ");
  XCTAssertEqual(composer.cnvSequence("wij"), "ㄘㄞˇ");
  XCTAssertEqual(composer.cnvSequence("wik"), "ㄘㄞˋ");
  XCTAssertEqual(composer.cnvSequence("wz"), "ㄘㄠ");
  XCTAssertEqual(composer.cnvSequence("wzf"), "ㄘㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wzj"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wzk"), "ㄘㄠˋ");
  XCTAssertEqual(composer.cnvSequence("wp"), "ㄘㄡ");
  XCTAssertEqual(composer.cnvSequence("wpf"), "ㄘㄡˊ");
  XCTAssertEqual(composer.cnvSequence("wpj"), "ㄘㄡˇ");
  XCTAssertEqual(composer.cnvSequence("wpk"), "ㄘㄡˋ");
  XCTAssertEqual(composer.cnvSequence("wm"), "ㄘㄢ");
  XCTAssertEqual(composer.cnvSequence("wmf"), "ㄘㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wmj"), "ㄘㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wmk"), "ㄘㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wn"), "ㄘㄣ");
  XCTAssertEqual(composer.cnvSequence("wnf"), "ㄘㄣˊ");
  XCTAssertEqual(composer.cnvSequence("wt"), "ㄘㄤ");
  XCTAssertEqual(composer.cnvSequence("wtf"), "ㄘㄤˊ");
  XCTAssertEqual(composer.cnvSequence("wtj"), "ㄘㄤˇ");
  XCTAssertEqual(composer.cnvSequence("wtk"), "ㄘㄤˋ");
  XCTAssertEqual(composer.cnvSequence("wl"), "ㄘㄥ");
  XCTAssertEqual(composer.cnvSequence("wlf"), "ㄘㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wlj"), "ㄘㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wlk"), "ㄘㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wx"), "ㄘㄨ");
  XCTAssertEqual(composer.cnvSequence("wxf"), "ㄘㄨˊ");
  XCTAssertEqual(composer.cnvSequence("wxj"), "ㄘㄨˇ");
  XCTAssertEqual(composer.cnvSequence("wxk"), "ㄘㄨˋ");
  XCTAssertEqual(composer.cnvSequence("wxo"), "ㄘㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("wxof"), "ㄘㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("wxoj"), "ㄘㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("wxok"), "ㄘㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("wxq"), "ㄘㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("wxqj"), "ㄘㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("wxqk"), "ㄘㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("wxm"), "ㄘㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("wxmf"), "ㄘㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wxmj"), "ㄘㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wxmk"), "ㄘㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wxn"), "ㄘㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("wxnf"), "ㄘㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("wxnj"), "ㄘㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("wxnk"), "ㄘㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("wxl"), "ㄘㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("wxlf"), "ㄘㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wxlj"), "ㄘㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wxlk"), "ㄘㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("s"), "ㄙ");
  XCTAssertEqual(composer.cnvSequence("sj"), "ㄙˇ");
  XCTAssertEqual(composer.cnvSequence("sk"), "ㄙˋ");
  XCTAssertEqual(composer.cnvSequence("sa"), "ㄙㄚ");
  XCTAssertEqual(composer.cnvSequence("saj"), "ㄙㄚˇ");
  XCTAssertEqual(composer.cnvSequence("sak"), "ㄙㄚˋ");
  XCTAssertEqual(composer.cnvSequence("sad"), "ㄙㄚ˙");
  XCTAssertEqual(composer.cnvSequence("sr"), "ㄙㄜ");
  XCTAssertEqual(composer.cnvSequence("srk"), "ㄙㄜˋ");
  XCTAssertEqual(composer.cnvSequence("si"), "ㄙㄞ");
  XCTAssertEqual(composer.cnvSequence("sif"), "ㄙㄞˊ");
  XCTAssertEqual(composer.cnvSequence("sij"), "ㄙㄞˇ");
  XCTAssertEqual(composer.cnvSequence("sik"), "ㄙㄞˋ");
  XCTAssertEqual(composer.cnvSequence("sq"), "ㄙㄟ");
  XCTAssertEqual(composer.cnvSequence("sz"), "ㄙㄠ");
  XCTAssertEqual(composer.cnvSequence("szj"), "ㄙㄠˇ");
  XCTAssertEqual(composer.cnvSequence("szk"), "ㄙㄠˋ");
  XCTAssertEqual(composer.cnvSequence("sp"), "ㄙㄡ");
  XCTAssertEqual(composer.cnvSequence("spj"), "ㄙㄡˇ");
  XCTAssertEqual(composer.cnvSequence("spk"), "ㄙㄡˋ");
  XCTAssertEqual(composer.cnvSequence("sm"), "ㄙㄢ");
  XCTAssertEqual(composer.cnvSequence("smj"), "ㄙㄢˇ");
  XCTAssertEqual(composer.cnvSequence("smk"), "ㄙㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sn"), "ㄙㄣ");
  XCTAssertEqual(composer.cnvSequence("snj"), "ㄙㄣˇ");
  XCTAssertEqual(composer.cnvSequence("st"), "ㄙㄤ");
  XCTAssertEqual(composer.cnvSequence("stj"), "ㄙㄤˇ");
  XCTAssertEqual(composer.cnvSequence("stk"), "ㄙㄤˋ");
  XCTAssertEqual(composer.cnvSequence("sl"), "ㄙㄥ");
  XCTAssertEqual(composer.cnvSequence("slk"), "ㄙㄥˋ");
  XCTAssertEqual(composer.cnvSequence("sx"), "ㄙㄨ");
  XCTAssertEqual(composer.cnvSequence("sxf"), "ㄙㄨˊ");
  XCTAssertEqual(composer.cnvSequence("sxj"), "ㄙㄨˇ");
  XCTAssertEqual(composer.cnvSequence("sxk"), "ㄙㄨˋ");
  XCTAssertEqual(composer.cnvSequence("sxo"), "ㄙㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("sxof"), "ㄙㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("sxoj"), "ㄙㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("sxok"), "ㄙㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("sxq"), "ㄙㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("sxqf"), "ㄙㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sxqj"), "ㄙㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("sxqk"), "ㄙㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("sxm"), "ㄙㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("sxmj"), "ㄙㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sxmk"), "ㄙㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sxn"), "ㄙㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("sxnj"), "ㄙㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sxnk"), "ㄙㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sxl"), "ㄙㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("sxlf"), "ㄙㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sxlj"), "ㄙㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sxlk"), "ㄙㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("a"), "ㄚ");
  XCTAssertEqual(composer.cnvSequence("af"), "ㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ak"), "ㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ad"), "ㄚ˙");
  XCTAssertEqual(composer.cnvSequence("o"), "ㄛ");
  XCTAssertEqual(composer.cnvSequence("of"), "ㄛˊ");
  XCTAssertEqual(composer.cnvSequence("oj"), "ㄛˇ");
  XCTAssertEqual(composer.cnvSequence("ok"), "ㄛˋ");
  XCTAssertEqual(composer.cnvSequence("r"), "ㄜ");
  XCTAssertEqual(composer.cnvSequence("rf"), "ㄜˊ");
  XCTAssertEqual(composer.cnvSequence("rj"), "ㄜˇ");
  XCTAssertEqual(composer.cnvSequence("rk"), "ㄜˋ");
  // XCTAssertEqual(composer.cnvSequence("wf"), "ㄝˊ");
  // XCTAssertEqual(composer.cnvSequence("wj"), "ㄝˇ");
  // XCTAssertEqual(composer.cnvSequence("wk"), "ㄝˋ");
  // XCTAssertEqual(composer.cnvSequence("wd"), "ㄝ˙");
  XCTAssertEqual(composer.cnvSequence("i"), "ㄞ");
  XCTAssertEqual(composer.cnvSequence("if"), "ㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ij"), "ㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ik"), "ㄞˋ");
  // XCTAssertEqual(composer.cnvSequence("qk"), "ㄟˋ");
  XCTAssertEqual(composer.cnvSequence("z"), "ㄠ");
  XCTAssertEqual(composer.cnvSequence("zf"), "ㄠˊ");
  XCTAssertEqual(composer.cnvSequence("zj"), "ㄠˇ");
  XCTAssertEqual(composer.cnvSequence("zk"), "ㄠˋ");
  XCTAssertEqual(composer.cnvSequence("p "), "ㄡ ");
  XCTAssertEqual(composer.cnvSequence("pf"), "ㄡˊ");
  XCTAssertEqual(composer.cnvSequence("pj"), "ㄡˇ");
  XCTAssertEqual(composer.cnvSequence("pk"), "ㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pd"), "ㄡ˙");
  XCTAssertEqual(composer.cnvSequence("m "), "ㄢ ");
  XCTAssertEqual(composer.cnvSequence("mf"), "ㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mj"), "ㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mk"), "ㄢˋ");
  XCTAssertEqual(composer.cnvSequence("n "), "ㄣ ");
  XCTAssertEqual(composer.cnvSequence("nf"), "ㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nj"), "ㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nk"), "ㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nd"), "ㄣ˙");
  XCTAssertEqual(composer.cnvSequence("t "), "ㄤ ");
  XCTAssertEqual(composer.cnvSequence("tf"), "ㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tj"), "ㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tk"), "ㄤˋ");
  XCTAssertEqual(composer.cnvSequence("l "), "ㄥ ");
  XCTAssertEqual(composer.cnvSequence("lk"), "ㄥˋ");
  XCTAssertEqual(composer.cnvSequence("h "), "ㄦ ");
  XCTAssertEqual(composer.cnvSequence("hf"), "ㄦˊ");
  XCTAssertEqual(composer.cnvSequence("hj"), "ㄦˇ");
  XCTAssertEqual(composer.cnvSequence("hk"), "ㄦˋ");
  XCTAssertEqual(composer.cnvSequence("hd"), "ㄦ˙");
  XCTAssertEqual(composer.cnvSequence("e"), "ㄧ");
  XCTAssertEqual(composer.cnvSequence("ef"), "ㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ej"), "ㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ek"), "ㄧˋ");
  XCTAssertEqual(composer.cnvSequence("ea"), "ㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("eaf"), "ㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("eaj"), "ㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("eak"), "ㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ead"), "ㄧㄚ˙");
  XCTAssertEqual(composer.cnvSequence("eo"), "ㄧㄛ");
  XCTAssertEqual(composer.cnvSequence("eod"), "ㄧㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ew"), "ㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("ewf"), "ㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("ewj"), "ㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ewk"), "ㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ewd"), "ㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("eif"), "ㄧㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ez"), "ㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("ezf"), "ㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ezj"), "ㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ezk"), "ㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ep"), "ㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("epf"), "ㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("epj"), "ㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("epk"), "ㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("em"), "ㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("emf"), "ㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("emj"), "ㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("emk"), "ㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("en"), "ㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("enf"), "ㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("enj"), "ㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("enk"), "ㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("et"), "ㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("etf"), "ㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("etj"), "ㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("etk"), "ㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("el"), "ㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("elf"), "ㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("elj"), "ㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("elk"), "ㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("x"), "ㄨ");
  XCTAssertEqual(composer.cnvSequence("xf"), "ㄨˊ");
  XCTAssertEqual(composer.cnvSequence("xj"), "ㄨˇ");
  XCTAssertEqual(composer.cnvSequence("xk"), "ㄨˋ");
  XCTAssertEqual(composer.cnvSequence("xa"), "ㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("xaf"), "ㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xaj"), "ㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xak"), "ㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xad"), "ㄨㄚ˙");
  XCTAssertEqual(composer.cnvSequence("xo"), "ㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("xoj"), "ㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("xok"), "ㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("xi"), "ㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("xij"), "ㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xik"), "ㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xq"), "ㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("xqf"), "ㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xqj"), "ㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("xqk"), "ㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("xm"), "ㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("xmf"), "ㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xmj"), "ㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xmk"), "ㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xn"), "ㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("xnf"), "ㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xnj"), "ㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xnk"), "ㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xt"), "ㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("xtf"), "ㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xtj"), "ㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xtk"), "ㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xl"), "ㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("xlj"), "ㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xlk"), "ㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("u"), "ㄩ");
  XCTAssertEqual(composer.cnvSequence("uf"), "ㄩˊ");
  XCTAssertEqual(composer.cnvSequence("uj"), "ㄩˇ");
  XCTAssertEqual(composer.cnvSequence("uk"), "ㄩˋ");
  XCTAssertEqual(composer.cnvSequence("uw"), "ㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("uwj"), "ㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("uwk"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("um"), "ㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("umf"), "ㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("umj"), "ㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("umk"), "ㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("un"), "ㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("unf"), "ㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("unj"), "ㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("unk"), "ㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ul"), "ㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("ulf"), "ㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ulj"), "ㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ulk"), "ㄩㄥˋ");
}

- (void)test_Zhuyin_HsuKeys {
  // Testing handleHsu()
  Composer composer = Composer("", ofHsu);
  XCTAssertEqual(composer.cnvSequence("kek"), "ㄎㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("gewd"), "ㄍㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("gen"), "ㄍㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("bekd"), "ㄅㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("bekj"), "ㄅㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dxk"), "ㄉㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("by"), "ㄅㄚ");
  XCTAssertEqual(composer.cnvSequence("byd"), "ㄅㄚˊ");
  XCTAssertEqual(composer.cnvSequence("byf"), "ㄅㄚˇ");
  XCTAssertEqual(composer.cnvSequence("byj"), "ㄅㄚˋ");
  XCTAssertEqual(composer.cnvSequence("bys"), "ㄅㄚ˙");
  XCTAssertEqual(composer.cnvSequence("bh"), "ㄅㄛ");
  XCTAssertEqual(composer.cnvSequence("bhd"), "ㄅㄛˊ");
  XCTAssertEqual(composer.cnvSequence("bhf"), "ㄅㄛˇ");
  XCTAssertEqual(composer.cnvSequence("bhj"), "ㄅㄛˋ");
  XCTAssertEqual(composer.cnvSequence("bhs"), "ㄅㄛ˙");
  XCTAssertEqual(composer.cnvSequence("bi"), "ㄅㄞ");
  XCTAssertEqual(composer.cnvSequence("bid"), "ㄅㄞˊ");
  XCTAssertEqual(composer.cnvSequence("bif"), "ㄅㄞˇ");
  XCTAssertEqual(composer.cnvSequence("bij"), "ㄅㄞˋ");
  XCTAssertEqual(composer.cnvSequence("bis"), "ㄅㄞ˙");
  XCTAssertEqual(composer.cnvSequence("ba"), "ㄅㄟ");
  XCTAssertEqual(composer.cnvSequence("baf"), "ㄅㄟˇ");
  XCTAssertEqual(composer.cnvSequence("baj"), "ㄅㄟˋ");
  XCTAssertEqual(composer.cnvSequence("bas"), "ㄅㄟ˙");
  XCTAssertEqual(composer.cnvSequence("bw"), "ㄅㄠ");
  XCTAssertEqual(composer.cnvSequence("bwd"), "ㄅㄠˊ");
  XCTAssertEqual(composer.cnvSequence("bwf"), "ㄅㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bwj"), "ㄅㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bm"), "ㄅㄢ");
  XCTAssertEqual(composer.cnvSequence("bmf"), "ㄅㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bmj"), "ㄅㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bn"), "ㄅㄣ");
  XCTAssertEqual(composer.cnvSequence("bnf"), "ㄅㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bnj"), "ㄅㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bk"), "ㄅㄤ");
  XCTAssertEqual(composer.cnvSequence("bkf"), "ㄅㄤˇ");
  XCTAssertEqual(composer.cnvSequence("bkj"), "ㄅㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bl"), "ㄅㄥ");
  XCTAssertEqual(composer.cnvSequence("bld"), "ㄅㄥˊ");
  XCTAssertEqual(composer.cnvSequence("blf"), "ㄅㄥˇ");
  XCTAssertEqual(composer.cnvSequence("blj"), "ㄅㄥˋ");
  XCTAssertEqual(composer.cnvSequence("be"), "ㄅㄧ");
  XCTAssertEqual(composer.cnvSequence("bed"), "ㄅㄧˊ");
  XCTAssertEqual(composer.cnvSequence("bef"), "ㄅㄧˇ");
  XCTAssertEqual(composer.cnvSequence("bej"), "ㄅㄧˋ");
  XCTAssertEqual(composer.cnvSequence("bee"), "ㄅㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("beed"), "ㄅㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("beef"), "ㄅㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("beej"), "ㄅㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("bew"), "ㄅㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("bewf"), "ㄅㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bewj"), "ㄅㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bem"), "ㄅㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("bemd"), "ㄅㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("bemf"), "ㄅㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bemj"), "ㄅㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ben"), "ㄅㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("benf"), "ㄅㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("benj"), "ㄅㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bel"), "ㄅㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("belf"), "ㄅㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("belj"), "ㄅㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bx"), "ㄅㄨ");
  XCTAssertEqual(composer.cnvSequence("bxd"), "ㄅㄨˊ");
  XCTAssertEqual(composer.cnvSequence("bxf"), "ㄅㄨˇ");
  XCTAssertEqual(composer.cnvSequence("bxj"), "ㄅㄨˋ");
  XCTAssertEqual(composer.cnvSequence("py"), "ㄆㄚ");
  XCTAssertEqual(composer.cnvSequence("pyd"), "ㄆㄚˊ");
  XCTAssertEqual(composer.cnvSequence("pyf"), "ㄆㄚˇ");
  XCTAssertEqual(composer.cnvSequence("pyj"), "ㄆㄚˋ");
  XCTAssertEqual(composer.cnvSequence("pys"), "ㄆㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ph"), "ㄆㄛ");
  XCTAssertEqual(composer.cnvSequence("phd"), "ㄆㄛˊ");
  XCTAssertEqual(composer.cnvSequence("phf"), "ㄆㄛˇ");
  XCTAssertEqual(composer.cnvSequence("phj"), "ㄆㄛˋ");
  XCTAssertEqual(composer.cnvSequence("pi"), "ㄆㄞ");
  XCTAssertEqual(composer.cnvSequence("pid"), "ㄆㄞˊ");
  XCTAssertEqual(composer.cnvSequence("pif"), "ㄆㄞˇ");
  XCTAssertEqual(composer.cnvSequence("pij"), "ㄆㄞˋ");
  XCTAssertEqual(composer.cnvSequence("pa"), "ㄆㄟ");
  XCTAssertEqual(composer.cnvSequence("pad"), "ㄆㄟˊ");
  XCTAssertEqual(composer.cnvSequence("paf"), "ㄆㄟˇ");
  XCTAssertEqual(composer.cnvSequence("paj"), "ㄆㄟˋ");
  XCTAssertEqual(composer.cnvSequence("pw"), "ㄆㄠ");
  XCTAssertEqual(composer.cnvSequence("pwd"), "ㄆㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pwf"), "ㄆㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pwj"), "ㄆㄠˋ");
  XCTAssertEqual(composer.cnvSequence("po"), "ㄆㄡ");
  XCTAssertEqual(composer.cnvSequence("pod"), "ㄆㄡˊ");
  XCTAssertEqual(composer.cnvSequence("pof"), "ㄆㄡˇ");
  XCTAssertEqual(composer.cnvSequence("poj"), "ㄆㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pm"), "ㄆㄢ");
  XCTAssertEqual(composer.cnvSequence("pmd"), "ㄆㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pmf"), "ㄆㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pmj"), "ㄆㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pn"), "ㄆㄣ");
  XCTAssertEqual(composer.cnvSequence("pnd"), "ㄆㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pnf"), "ㄆㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pnj"), "ㄆㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pk"), "ㄆㄤ");
  XCTAssertEqual(composer.cnvSequence("pkd"), "ㄆㄤˊ");
  XCTAssertEqual(composer.cnvSequence("pkf"), "ㄆㄤˇ");
  XCTAssertEqual(composer.cnvSequence("pkj"), "ㄆㄤˋ");
  XCTAssertEqual(composer.cnvSequence("pl"), "ㄆㄥ");
  XCTAssertEqual(composer.cnvSequence("pld"), "ㄆㄥˊ");
  XCTAssertEqual(composer.cnvSequence("plf"), "ㄆㄥˇ");
  XCTAssertEqual(composer.cnvSequence("plj"), "ㄆㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pe"), "ㄆㄧ");
  XCTAssertEqual(composer.cnvSequence("ped"), "ㄆㄧˊ");
  XCTAssertEqual(composer.cnvSequence("pef"), "ㄆㄧˇ");
  XCTAssertEqual(composer.cnvSequence("pej"), "ㄆㄧˋ");
  XCTAssertEqual(composer.cnvSequence("pey"), "ㄆㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("pee"), "ㄆㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("peef"), "ㄆㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("peej"), "ㄆㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("pew"), "ㄆㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("pewd"), "ㄆㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pewf"), "ㄆㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pewj"), "ㄆㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pem"), "ㄆㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("pemd"), "ㄆㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pemf"), "ㄆㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pemj"), "ㄆㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pen"), "ㄆㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("pend"), "ㄆㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("penf"), "ㄆㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("penj"), "ㄆㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pel"), "ㄆㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("peld"), "ㄆㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("pelf"), "ㄆㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("pelj"), "ㄆㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("px"), "ㄆㄨ");
  XCTAssertEqual(composer.cnvSequence("pxd"), "ㄆㄨˊ");
  XCTAssertEqual(composer.cnvSequence("pxf"), "ㄆㄨˇ");
  XCTAssertEqual(composer.cnvSequence("pxj"), "ㄆㄨˋ");
  XCTAssertEqual(composer.cnvSequence("my"), "ㄇㄚ");
  XCTAssertEqual(composer.cnvSequence("myd"), "ㄇㄚˊ");
  XCTAssertEqual(composer.cnvSequence("myf"), "ㄇㄚˇ");
  XCTAssertEqual(composer.cnvSequence("myj"), "ㄇㄚˋ");
  XCTAssertEqual(composer.cnvSequence("mys"), "ㄇㄚ˙");
  XCTAssertEqual(composer.cnvSequence("mh"), "ㄇㄛ");
  XCTAssertEqual(composer.cnvSequence("mhd"), "ㄇㄛˊ");
  XCTAssertEqual(composer.cnvSequence("mhf"), "ㄇㄛˇ");
  XCTAssertEqual(composer.cnvSequence("mhj"), "ㄇㄛˋ");
  XCTAssertEqual(composer.cnvSequence("mhs"), "ㄇㄛ˙");
  XCTAssertEqual(composer.cnvSequence("mg"), "ㄇㄜ");
  XCTAssertEqual(composer.cnvSequence("mgj"), "ㄇㄜˋ");
  XCTAssertEqual(composer.cnvSequence("mgs"), "ㄇㄜ˙");
  XCTAssertEqual(composer.cnvSequence("mi"), "ㄇㄞ");
  XCTAssertEqual(composer.cnvSequence("mid"), "ㄇㄞˊ");
  XCTAssertEqual(composer.cnvSequence("mif"), "ㄇㄞˇ");
  XCTAssertEqual(composer.cnvSequence("mij"), "ㄇㄞˋ");
  XCTAssertEqual(composer.cnvSequence("mad"), "ㄇㄟˊ");
  XCTAssertEqual(composer.cnvSequence("maf"), "ㄇㄟˇ");
  XCTAssertEqual(composer.cnvSequence("maj"), "ㄇㄟˋ");
  XCTAssertEqual(composer.cnvSequence("mw"), "ㄇㄠ");
  XCTAssertEqual(composer.cnvSequence("mwd"), "ㄇㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mwf"), "ㄇㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mwj"), "ㄇㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mod"), "ㄇㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mof"), "ㄇㄡˇ");
  XCTAssertEqual(composer.cnvSequence("moj"), "ㄇㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mm"), "ㄇㄢ");
  XCTAssertEqual(composer.cnvSequence("mmd"), "ㄇㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mmf"), "ㄇㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mmj"), "ㄇㄢˋ");
  XCTAssertEqual(composer.cnvSequence("mn"), "ㄇㄣ");
  XCTAssertEqual(composer.cnvSequence("mnd"), "ㄇㄣˊ");
  XCTAssertEqual(composer.cnvSequence("mnf"), "ㄇㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mnj"), "ㄇㄣˋ");
  XCTAssertEqual(composer.cnvSequence("mns"), "ㄇㄣ˙");
  XCTAssertEqual(composer.cnvSequence("mk"), "ㄇㄤ");
  XCTAssertEqual(composer.cnvSequence("mkd"), "ㄇㄤˊ");
  XCTAssertEqual(composer.cnvSequence("mkf"), "ㄇㄤˇ");
  XCTAssertEqual(composer.cnvSequence("mkj"), "ㄇㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ml"), "ㄇㄥ");
  XCTAssertEqual(composer.cnvSequence("mld"), "ㄇㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mlf"), "ㄇㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mlj"), "ㄇㄥˋ");
  XCTAssertEqual(composer.cnvSequence("me"), "ㄇㄧ");
  XCTAssertEqual(composer.cnvSequence("med"), "ㄇㄧˊ");
  XCTAssertEqual(composer.cnvSequence("mef"), "ㄇㄧˇ");
  XCTAssertEqual(composer.cnvSequence("mej"), "ㄇㄧˋ");
  XCTAssertEqual(composer.cnvSequence("mee"), "ㄇㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("meed"), "ㄇㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("meej"), "ㄇㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("mew"), "ㄇㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("mewd"), "ㄇㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mewf"), "ㄇㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mewj"), "ㄇㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("meod"), "ㄇㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("meof"), "ㄇㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("meoj"), "ㄇㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mem"), "ㄇㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("memd"), "ㄇㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("memf"), "ㄇㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("memj"), "ㄇㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("men"), "ㄇㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("mend"), "ㄇㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("menf"), "ㄇㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("meld"), "ㄇㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("melf"), "ㄇㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("melj"), "ㄇㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mxd"), "ㄇㄨˊ");
  XCTAssertEqual(composer.cnvSequence("mxf"), "ㄇㄨˇ");
  XCTAssertEqual(composer.cnvSequence("mxj"), "ㄇㄨˋ");
  XCTAssertEqual(composer.cnvSequence("fy"), "ㄈㄚ");
  XCTAssertEqual(composer.cnvSequence("fyd"), "ㄈㄚˊ");
  XCTAssertEqual(composer.cnvSequence("fyf"), "ㄈㄚˇ");
  XCTAssertEqual(composer.cnvSequence("fyj"), "ㄈㄚˋ");
  XCTAssertEqual(composer.cnvSequence("fhd"), "ㄈㄛˊ");
  XCTAssertEqual(composer.cnvSequence("fa"), "ㄈㄟ");
  XCTAssertEqual(composer.cnvSequence("fad"), "ㄈㄟˊ");
  XCTAssertEqual(composer.cnvSequence("faf"), "ㄈㄟˇ");
  XCTAssertEqual(composer.cnvSequence("faj"), "ㄈㄟˋ");
  XCTAssertEqual(composer.cnvSequence("fo"), "ㄈㄡ");
  XCTAssertEqual(composer.cnvSequence("fod"), "ㄈㄡˊ");
  XCTAssertEqual(composer.cnvSequence("fof"), "ㄈㄡˇ");
  XCTAssertEqual(composer.cnvSequence("foj"), "ㄈㄡˋ");
  XCTAssertEqual(composer.cnvSequence("fm"), "ㄈㄢ");
  XCTAssertEqual(composer.cnvSequence("fmd"), "ㄈㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fmf"), "ㄈㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fmj"), "ㄈㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fn"), "ㄈㄣ");
  XCTAssertEqual(composer.cnvSequence("fnd"), "ㄈㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fnf"), "ㄈㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fnj"), "ㄈㄣˋ");
  XCTAssertEqual(composer.cnvSequence("fns"), "ㄈㄣ˙");
  XCTAssertEqual(composer.cnvSequence("fk"), "ㄈㄤ");
  XCTAssertEqual(composer.cnvSequence("fkd"), "ㄈㄤˊ");
  XCTAssertEqual(composer.cnvSequence("fkf"), "ㄈㄤˇ");
  XCTAssertEqual(composer.cnvSequence("fkj"), "ㄈㄤˋ");
  XCTAssertEqual(composer.cnvSequence("fl"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("fld"), "ㄈㄥˊ");
  XCTAssertEqual(composer.cnvSequence("flf"), "ㄈㄥˇ");
  XCTAssertEqual(composer.cnvSequence("flj"), "ㄈㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fewj"), "ㄈㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("fx"), "ㄈㄨ");
  XCTAssertEqual(composer.cnvSequence("fxd"), "ㄈㄨˊ");
  XCTAssertEqual(composer.cnvSequence("fxf"), "ㄈㄨˇ");
  XCTAssertEqual(composer.cnvSequence("fxj"), "ㄈㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dy"), "ㄉㄚ");
  XCTAssertEqual(composer.cnvSequence("dyd"), "ㄉㄚˊ");
  XCTAssertEqual(composer.cnvSequence("dyf"), "ㄉㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dyj"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("dys"), "ㄉㄚ˙");
  XCTAssertEqual(composer.cnvSequence("dg"), "ㄉㄜ");
  XCTAssertEqual(composer.cnvSequence("dgd"), "ㄉㄜˊ");
  XCTAssertEqual(composer.cnvSequence("dgs"), "ㄉㄜ˙");
  XCTAssertEqual(composer.cnvSequence("di"), "ㄉㄞ");
  XCTAssertEqual(composer.cnvSequence("dif"), "ㄉㄞˇ");
  XCTAssertEqual(composer.cnvSequence("dij"), "ㄉㄞˋ");
  XCTAssertEqual(composer.cnvSequence("daf"), "ㄉㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dw"), "ㄉㄠ");
  XCTAssertEqual(composer.cnvSequence("dwd"), "ㄉㄠˊ");
  XCTAssertEqual(composer.cnvSequence("dwf"), "ㄉㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dwj"), "ㄉㄠˋ");
  XCTAssertEqual(composer.cnvSequence("do"), "ㄉㄡ");
  XCTAssertEqual(composer.cnvSequence("dod"), "ㄉㄡˊ");
  XCTAssertEqual(composer.cnvSequence("dof"), "ㄉㄡˇ");
  XCTAssertEqual(composer.cnvSequence("doj"), "ㄉㄡˋ");
  XCTAssertEqual(composer.cnvSequence("dm"), "ㄉㄢ");
  XCTAssertEqual(composer.cnvSequence("dmf"), "ㄉㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dmj"), "ㄉㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dnj"), "ㄉㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dk"), "ㄉㄤ");
  XCTAssertEqual(composer.cnvSequence("dkf"), "ㄉㄤˇ");
  XCTAssertEqual(composer.cnvSequence("dkj"), "ㄉㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dl"), "ㄉㄥ");
  XCTAssertEqual(composer.cnvSequence("dlf"), "ㄉㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dlj"), "ㄉㄥˋ");
  XCTAssertEqual(composer.cnvSequence("de"), "ㄉㄧ");
  XCTAssertEqual(composer.cnvSequence("ded"), "ㄉㄧˊ");
  XCTAssertEqual(composer.cnvSequence("def"), "ㄉㄧˇ");
  XCTAssertEqual(composer.cnvSequence("dej"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("deyf"), "ㄉㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dee"), "ㄉㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("deed"), "ㄉㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("deef"), "ㄉㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("deej"), "ㄉㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("dew"), "ㄉㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("dewf"), "ㄉㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dewj"), "ㄉㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("deo"), "ㄉㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("dem"), "ㄉㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("demd"), "ㄉㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("demf"), "ㄉㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("demj"), "ㄉㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("del"), "ㄉㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("deld"), "ㄉㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("delf"), "ㄉㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("delj"), "ㄉㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("dx"), "ㄉㄨ");
  XCTAssertEqual(composer.cnvSequence("dxd"), "ㄉㄨˊ");
  XCTAssertEqual(composer.cnvSequence("dxf"), "ㄉㄨˇ");
  XCTAssertEqual(composer.cnvSequence("dxj"), "ㄉㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dxh"), "ㄉㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("dxhd"), "ㄉㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("dxhf"), "ㄉㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("dxhj"), "ㄉㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("dxhs"), "ㄉㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("dxa"), "ㄉㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("dxaf"), "ㄉㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dxaj"), "ㄉㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("dxm"), "ㄉㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("dxmf"), "ㄉㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dxmj"), "ㄉㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dxn"), "ㄉㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("dxnf"), "ㄉㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("dxnj"), "ㄉㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dxl"), "ㄉㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("dxlf"), "ㄉㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dxlj"), "ㄉㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ty"), "ㄊㄚ");
  XCTAssertEqual(composer.cnvSequence("tyf"), "ㄊㄚˇ");
  XCTAssertEqual(composer.cnvSequence("tyj"), "ㄊㄚˋ");
  XCTAssertEqual(composer.cnvSequence("tgj"), "ㄊㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ti"), "ㄊㄞ");
  XCTAssertEqual(composer.cnvSequence("tid"), "ㄊㄞˊ");
  XCTAssertEqual(composer.cnvSequence("tif"), "ㄊㄞˇ");
  XCTAssertEqual(composer.cnvSequence("tij"), "ㄊㄞˋ");
  XCTAssertEqual(composer.cnvSequence("tis"), "ㄊㄞ˙");
  XCTAssertEqual(composer.cnvSequence("tw"), "ㄊㄠ");
  XCTAssertEqual(composer.cnvSequence("twd"), "ㄊㄠˊ");
  XCTAssertEqual(composer.cnvSequence("twf"), "ㄊㄠˇ");
  XCTAssertEqual(composer.cnvSequence("twj"), "ㄊㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tws"), "ㄊㄠ˙");
  XCTAssertEqual(composer.cnvSequence("to"), "ㄊㄡ");
  XCTAssertEqual(composer.cnvSequence("tod"), "ㄊㄡˊ");
  XCTAssertEqual(composer.cnvSequence("tof"), "ㄊㄡˇ");
  XCTAssertEqual(composer.cnvSequence("toj"), "ㄊㄡˋ");
  XCTAssertEqual(composer.cnvSequence("tos"), "ㄊㄡ˙");
  XCTAssertEqual(composer.cnvSequence("tm"), "ㄊㄢ");
  XCTAssertEqual(composer.cnvSequence("tmd"), "ㄊㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tmf"), "ㄊㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tmj"), "ㄊㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tk"), "ㄊㄤ");
  XCTAssertEqual(composer.cnvSequence("tkd"), "ㄊㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tkf"), "ㄊㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tkj"), "ㄊㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tl"), "ㄊㄥ");
  XCTAssertEqual(composer.cnvSequence("tld"), "ㄊㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tlj"), "ㄊㄥˋ");
  XCTAssertEqual(composer.cnvSequence("te"), "ㄊㄧ");
  XCTAssertEqual(composer.cnvSequence("ted"), "ㄊㄧˊ");
  XCTAssertEqual(composer.cnvSequence("tef"), "ㄊㄧˇ");
  XCTAssertEqual(composer.cnvSequence("tej"), "ㄊㄧˋ");
  XCTAssertEqual(composer.cnvSequence("tee"), "ㄊㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("teed"), "ㄊㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("teef"), "ㄊㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("teej"), "ㄊㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("tew"), "ㄊㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("tewd"), "ㄊㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tewf"), "ㄊㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tewj"), "ㄊㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tem"), "ㄊㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("temd"), "ㄊㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("temf"), "ㄊㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("temj"), "ㄊㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tel"), "ㄊㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("teld"), "ㄊㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("telf"), "ㄊㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("telj"), "ㄊㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tx"), "ㄊㄨ");
  XCTAssertEqual(composer.cnvSequence("txd"), "ㄊㄨˊ");
  XCTAssertEqual(composer.cnvSequence("txf"), "ㄊㄨˇ");
  XCTAssertEqual(composer.cnvSequence("txj"), "ㄊㄨˋ");
  XCTAssertEqual(composer.cnvSequence("txh"), "ㄊㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("txhd"), "ㄊㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("txhf"), "ㄊㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("txhj"), "ㄊㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("txa"), "ㄊㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("txad"), "ㄊㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("txaf"), "ㄊㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("txaj"), "ㄊㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("txm"), "ㄊㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("txmd"), "ㄊㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("txmf"), "ㄊㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("txmj"), "ㄊㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("txn"), "ㄊㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("txnd"), "ㄊㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("txnf"), "ㄊㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("txnj"), "ㄊㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("txl"), "ㄊㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("txld"), "ㄊㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("txlf"), "ㄊㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("txlj"), "ㄊㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ny"), "ㄋㄚ");
  XCTAssertEqual(composer.cnvSequence("nyd"), "ㄋㄚˊ");
  XCTAssertEqual(composer.cnvSequence("nyf"), "ㄋㄚˇ");
  XCTAssertEqual(composer.cnvSequence("nyj"), "ㄋㄚˋ");
  XCTAssertEqual(composer.cnvSequence("nys"), "ㄋㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ngj"), "ㄋㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ngs"), "ㄋㄜ˙");
  XCTAssertEqual(composer.cnvSequence("nid"), "ㄋㄞˊ");
  XCTAssertEqual(composer.cnvSequence("nif"), "ㄋㄞˇ");
  XCTAssertEqual(composer.cnvSequence("nij"), "ㄋㄞˋ");
  XCTAssertEqual(composer.cnvSequence("nad"), "ㄋㄟˊ");
  XCTAssertEqual(composer.cnvSequence("naf"), "ㄋㄟˇ");
  XCTAssertEqual(composer.cnvSequence("naj"), "ㄋㄟˋ");
  XCTAssertEqual(composer.cnvSequence("nw"), "ㄋㄠ");
  XCTAssertEqual(composer.cnvSequence("nwd"), "ㄋㄠˊ");
  XCTAssertEqual(composer.cnvSequence("nwf"), "ㄋㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nwj"), "ㄋㄠˋ");
  XCTAssertEqual(composer.cnvSequence("nod"), "ㄋㄡˊ");
  XCTAssertEqual(composer.cnvSequence("nof"), "ㄋㄡˇ");
  XCTAssertEqual(composer.cnvSequence("noj"), "ㄋㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nm"), "ㄋㄢ");
  XCTAssertEqual(composer.cnvSequence("nmd"), "ㄋㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nmf"), "ㄋㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nmj"), "ㄋㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nnf"), "ㄋㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nnj"), "ㄋㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nk"), "ㄋㄤ");
  XCTAssertEqual(composer.cnvSequence("nkd"), "ㄋㄤˊ");
  XCTAssertEqual(composer.cnvSequence("nkf"), "ㄋㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nkj"), "ㄋㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nks"), "ㄋㄤ˙");
  XCTAssertEqual(composer.cnvSequence("nld"), "ㄋㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nlf"), "ㄋㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ne"), "ㄋㄧ");
  XCTAssertEqual(composer.cnvSequence("ned"), "ㄋㄧˊ");
  XCTAssertEqual(composer.cnvSequence("nef"), "ㄋㄧˇ");
  XCTAssertEqual(composer.cnvSequence("nej"), "ㄋㄧˋ");
  XCTAssertEqual(composer.cnvSequence("nee"), "ㄋㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("need"), "ㄋㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("neej"), "ㄋㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("newf"), "ㄋㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("newj"), "ㄋㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("neo"), "ㄋㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("neod"), "ㄋㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("neof"), "ㄋㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("neoj"), "ㄋㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nem"), "ㄋㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("nemd"), "ㄋㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nemf"), "ㄋㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nemj"), "ㄋㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nen"), "ㄋㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("nend"), "ㄋㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nenf"), "ㄋㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nenj"), "ㄋㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nekd"), "ㄋㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("nekf"), "ㄋㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nekj"), "ㄋㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("neld"), "ㄋㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nelf"), "ㄋㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nelj"), "ㄋㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nxd"), "ㄋㄨˊ");
  XCTAssertEqual(composer.cnvSequence("nxf"), "ㄋㄨˇ");
  XCTAssertEqual(composer.cnvSequence("nxj"), "ㄋㄨˋ");
  XCTAssertEqual(composer.cnvSequence("nxhd"), "ㄋㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("nxhf"), "ㄋㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("nxhj"), "ㄋㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("nxad"), "ㄋㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nxmd"), "ㄋㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nxmf"), "ㄋㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nxmj"), "ㄋㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nxnd"), "ㄋㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nxld"), "ㄋㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nxlf"), "ㄋㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nxlj"), "ㄋㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nud"), "ㄋㄩˊ");
  XCTAssertEqual(composer.cnvSequence("nuf"), "ㄋㄩˇ");
  XCTAssertEqual(composer.cnvSequence("nuj"), "ㄋㄩˋ");
  XCTAssertEqual(composer.cnvSequence("nuej"), "ㄋㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ly"), "ㄌㄚ");
  XCTAssertEqual(composer.cnvSequence("lyd"), "ㄌㄚˊ");
  XCTAssertEqual(composer.cnvSequence("lyf"), "ㄌㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lyj"), "ㄌㄚˋ");
  XCTAssertEqual(composer.cnvSequence("lys"), "ㄌㄚ˙");
  XCTAssertEqual(composer.cnvSequence("lh"), "ㄌㄛ");
  XCTAssertEqual(composer.cnvSequence("lhs"), "ㄌㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lg"), "ㄌㄜ");
  XCTAssertEqual(composer.cnvSequence("lgd"), "ㄌㄜˊ");
  XCTAssertEqual(composer.cnvSequence("lgj"), "ㄌㄜˋ");
  XCTAssertEqual(composer.cnvSequence("lgs"), "ㄌㄜ˙");
  XCTAssertEqual(composer.cnvSequence("lid"), "ㄌㄞˊ");
  XCTAssertEqual(composer.cnvSequence("lif"), "ㄌㄞˇ");
  XCTAssertEqual(composer.cnvSequence("lij"), "ㄌㄞˋ");
  XCTAssertEqual(composer.cnvSequence("la"), "ㄌㄟ");
  XCTAssertEqual(composer.cnvSequence("lad"), "ㄌㄟˊ");
  XCTAssertEqual(composer.cnvSequence("laf"), "ㄌㄟˇ");
  XCTAssertEqual(composer.cnvSequence("laj"), "ㄌㄟˋ");
  XCTAssertEqual(composer.cnvSequence("las"), "ㄌㄟ˙");
  XCTAssertEqual(composer.cnvSequence("lw"), "ㄌㄠ");
  XCTAssertEqual(composer.cnvSequence("lwd"), "ㄌㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lwf"), "ㄌㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lwj"), "ㄌㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lo"), "ㄌㄡ");
  XCTAssertEqual(composer.cnvSequence("lod"), "ㄌㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lof"), "ㄌㄡˇ");
  XCTAssertEqual(composer.cnvSequence("loj"), "ㄌㄡˋ");
  XCTAssertEqual(composer.cnvSequence("los"), "ㄌㄡ˙");
  XCTAssertEqual(composer.cnvSequence("lmd"), "ㄌㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lmf"), "ㄌㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lmj"), "ㄌㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lk"), "ㄌㄤ");
  XCTAssertEqual(composer.cnvSequence("lkd"), "ㄌㄤˊ");
  XCTAssertEqual(composer.cnvSequence("lkf"), "ㄌㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lkj"), "ㄌㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ll"), "ㄌㄥ");
  XCTAssertEqual(composer.cnvSequence("lld"), "ㄌㄥˊ");
  XCTAssertEqual(composer.cnvSequence("llf"), "ㄌㄥˇ");
  XCTAssertEqual(composer.cnvSequence("llj"), "ㄌㄥˋ");
  XCTAssertEqual(composer.cnvSequence("le"), "ㄌㄧ");
  XCTAssertEqual(composer.cnvSequence("led"), "ㄌㄧˊ");
  XCTAssertEqual(composer.cnvSequence("lef"), "ㄌㄧˇ");
  XCTAssertEqual(composer.cnvSequence("lej"), "ㄌㄧˋ");
  XCTAssertEqual(composer.cnvSequence("les"), "ㄌㄧ˙");
  XCTAssertEqual(composer.cnvSequence("leyf"), "ㄌㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lee"), "ㄌㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("leed"), "ㄌㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("leef"), "ㄌㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("leej"), "ㄌㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lew"), "ㄌㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("lewd"), "ㄌㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lewf"), "ㄌㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lewj"), "ㄌㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("leo"), "ㄌㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("leod"), "ㄌㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("leof"), "ㄌㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("leoj"), "ㄌㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lem"), "ㄌㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("lemd"), "ㄌㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lemf"), "ㄌㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lemj"), "ㄌㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lend"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lenf"), "ㄌㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lenj"), "ㄌㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lekd"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("lekf"), "ㄌㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lekj"), "ㄌㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("lel"), "ㄌㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("leld"), "ㄌㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lelf"), "ㄌㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lelj"), "ㄌㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lx"), "ㄌㄨ");
  XCTAssertEqual(composer.cnvSequence("lxd"), "ㄌㄨˊ");
  XCTAssertEqual(composer.cnvSequence("lxf"), "ㄌㄨˇ");
  XCTAssertEqual(composer.cnvSequence("lxj"), "ㄌㄨˋ");
  XCTAssertEqual(composer.cnvSequence("lxh"), "ㄌㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("lxhd"), "ㄌㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("lxhf"), "ㄌㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("lxhj"), "ㄌㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("lxhs"), "ㄌㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lxmd"), "ㄌㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lxmf"), "ㄌㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lxmj"), "ㄌㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lxn"), "ㄌㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("lxnd"), "ㄌㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lxnf"), "ㄌㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lxnj"), "ㄌㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lxl"), "ㄌㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("lxld"), "ㄌㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lxlf"), "ㄌㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lxlj"), "ㄌㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lu"), "ㄌㄩ");
  XCTAssertEqual(composer.cnvSequence("lud"), "ㄌㄩˊ");
  XCTAssertEqual(composer.cnvSequence("luf"), "ㄌㄩˇ");
  XCTAssertEqual(composer.cnvSequence("luj"), "ㄌㄩˋ");
  XCTAssertEqual(composer.cnvSequence("lue"), "ㄌㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("luef"), "ㄌㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("luej"), "ㄌㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lumd"), "ㄌㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lumf"), "ㄌㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gy"), "ㄍㄚ");
  XCTAssertEqual(composer.cnvSequence("gyd"), "ㄍㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gyf"), "ㄍㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gyj"), "ㄍㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gys"), "ㄍㄚ˙");
  XCTAssertEqual(composer.cnvSequence("gg"), "ㄍㄜ");
  XCTAssertEqual(composer.cnvSequence("ggd"), "ㄍㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ggf"), "ㄍㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ggj"), "ㄍㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ggs"), "ㄍㄜ˙");
  XCTAssertEqual(composer.cnvSequence("gi"), "ㄍㄞ");
  XCTAssertEqual(composer.cnvSequence("gif"), "ㄍㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gij"), "ㄍㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gaf"), "ㄍㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gw"), "ㄍㄠ");
  XCTAssertEqual(composer.cnvSequence("gwf"), "ㄍㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gwj"), "ㄍㄠˋ");
  XCTAssertEqual(composer.cnvSequence("go"), "ㄍㄡ");
  XCTAssertEqual(composer.cnvSequence("gof"), "ㄍㄡˇ");
  XCTAssertEqual(composer.cnvSequence("goj"), "ㄍㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gm"), "ㄍㄢ");
  XCTAssertEqual(composer.cnvSequence("gmf"), "ㄍㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gmj"), "ㄍㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gn"), "ㄍㄣ");
  XCTAssertEqual(composer.cnvSequence("gnd"), "ㄍㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gnf"), "ㄍㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gnj"), "ㄍㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gk"), "ㄍㄤ");
  XCTAssertEqual(composer.cnvSequence("gkf"), "ㄍㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gkj"), "ㄍㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gl"), "ㄍㄥ");
  XCTAssertEqual(composer.cnvSequence("glf"), "ㄍㄥˇ");
  XCTAssertEqual(composer.cnvSequence("glj"), "ㄍㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gx"), "ㄍㄨ");
  XCTAssertEqual(composer.cnvSequence("gxd"), "ㄍㄨˊ");
  XCTAssertEqual(composer.cnvSequence("gxf"), "ㄍㄨˇ");
  XCTAssertEqual(composer.cnvSequence("gxj"), "ㄍㄨˋ");
  XCTAssertEqual(composer.cnvSequence("gxy"), "ㄍㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("gxyd"), "ㄍㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gxyf"), "ㄍㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gxyj"), "ㄍㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gxh"), "ㄍㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("gxhd"), "ㄍㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("gxhf"), "ㄍㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("gxhj"), "ㄍㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("gxi"), "ㄍㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("gxif"), "ㄍㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gxij"), "ㄍㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gxa"), "ㄍㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("gxaf"), "ㄍㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gxaj"), "ㄍㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gxm"), "ㄍㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("gxmf"), "ㄍㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gxmj"), "ㄍㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gxn"), "ㄍㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("gxnf"), "ㄍㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gxnj"), "ㄍㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gxk"), "ㄍㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("gxkf"), "ㄍㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gxkj"), "ㄍㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gxl"), "ㄍㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("gxld"), "ㄍㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("gxlf"), "ㄍㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gxlj"), "ㄍㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ky"), "ㄎㄚ");
  XCTAssertEqual(composer.cnvSequence("kyf"), "ㄎㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kyj"), "ㄎㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kg"), "ㄎㄜ");
  XCTAssertEqual(composer.cnvSequence("kgd"), "ㄎㄜˊ");
  XCTAssertEqual(composer.cnvSequence("kgf"), "ㄎㄜˇ");
  XCTAssertEqual(composer.cnvSequence("kgj"), "ㄎㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ki"), "ㄎㄞ");
  XCTAssertEqual(composer.cnvSequence("kif"), "ㄎㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kij"), "ㄎㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kw"), "ㄎㄠ");
  XCTAssertEqual(composer.cnvSequence("kwf"), "ㄎㄠˇ");
  XCTAssertEqual(composer.cnvSequence("kwj"), "ㄎㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ko"), "ㄎㄡ");
  XCTAssertEqual(composer.cnvSequence("kof"), "ㄎㄡˇ");
  XCTAssertEqual(composer.cnvSequence("koj"), "ㄎㄡˋ");
  XCTAssertEqual(composer.cnvSequence("km"), "ㄎㄢ");
  XCTAssertEqual(composer.cnvSequence("kmf"), "ㄎㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kmj"), "ㄎㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kn"), "ㄎㄣ");
  XCTAssertEqual(composer.cnvSequence("knf"), "ㄎㄣˇ");
  XCTAssertEqual(composer.cnvSequence("knj"), "ㄎㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kk"), "ㄎㄤ");
  XCTAssertEqual(composer.cnvSequence("kkd"), "ㄎㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kkf"), "ㄎㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kkj"), "ㄎㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kl"), "ㄎㄥ");
  XCTAssertEqual(composer.cnvSequence("klf"), "ㄎㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kx"), "ㄎㄨ");
  XCTAssertEqual(composer.cnvSequence("kxd"), "ㄎㄨˊ");
  XCTAssertEqual(composer.cnvSequence("kxf"), "ㄎㄨˇ");
  XCTAssertEqual(composer.cnvSequence("kxj"), "ㄎㄨˋ");
  XCTAssertEqual(composer.cnvSequence("kxy"), "ㄎㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("kxyf"), "ㄎㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kxyj"), "ㄎㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kxhj"), "ㄎㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("kxi"), "ㄎㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("kxif"), "ㄎㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kxij"), "ㄎㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kxa"), "ㄎㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("kxad"), "ㄎㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("kxaf"), "ㄎㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("kxaj"), "ㄎㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("kxm"), "ㄎㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("kxmf"), "ㄎㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kxmj"), "ㄎㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kxn"), "ㄎㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("kxnf"), "ㄎㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("kxnj"), "ㄎㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kxk"), "ㄎㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("kxkd"), "ㄎㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kxkf"), "ㄎㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kxkj"), "ㄎㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kxl"), "ㄎㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("kxlf"), "ㄎㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kxlj"), "ㄎㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hy"), "ㄏㄚ");
  XCTAssertEqual(composer.cnvSequence("hyd"), "ㄏㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hyf"), "ㄏㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hg"), "ㄏㄜ");
  XCTAssertEqual(composer.cnvSequence("hgd"), "ㄏㄜˊ");
  XCTAssertEqual(composer.cnvSequence("hgf"), "ㄏㄜˇ");
  XCTAssertEqual(composer.cnvSequence("hgj"), "ㄏㄜˋ");
  XCTAssertEqual(composer.cnvSequence("hi"), "ㄏㄞ");
  XCTAssertEqual(composer.cnvSequence("hid"), "ㄏㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hif"), "ㄏㄞˇ");
  XCTAssertEqual(composer.cnvSequence("hij"), "ㄏㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ha"), "ㄏㄟ");
  XCTAssertEqual(composer.cnvSequence("haf"), "ㄏㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hw"), "ㄏㄠ");
  XCTAssertEqual(composer.cnvSequence("hwd"), "ㄏㄠˊ");
  XCTAssertEqual(composer.cnvSequence("hwf"), "ㄏㄠˇ");
  XCTAssertEqual(composer.cnvSequence("hwj"), "ㄏㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ho"), "ㄏㄡ");
  XCTAssertEqual(composer.cnvSequence("hod"), "ㄏㄡˊ");
  XCTAssertEqual(composer.cnvSequence("hof"), "ㄏㄡˇ");
  XCTAssertEqual(composer.cnvSequence("hoj"), "ㄏㄡˋ");
  XCTAssertEqual(composer.cnvSequence("hm"), "ㄏㄢ");
  XCTAssertEqual(composer.cnvSequence("hmd"), "ㄏㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hmf"), "ㄏㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hmj"), "ㄏㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hn"), "ㄏㄣ");
  XCTAssertEqual(composer.cnvSequence("hnd"), "ㄏㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hnf"), "ㄏㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hnj"), "ㄏㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hk"), "ㄏㄤ");
  XCTAssertEqual(composer.cnvSequence("hkd"), "ㄏㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hkf"), "ㄏㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hkj"), "ㄏㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hl"), "ㄏㄥ");
  XCTAssertEqual(composer.cnvSequence("hld"), "ㄏㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hlj"), "ㄏㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hx"), "ㄏㄨ");
  XCTAssertEqual(composer.cnvSequence("hxd"), "ㄏㄨˊ");
  XCTAssertEqual(composer.cnvSequence("hxf"), "ㄏㄨˇ");
  XCTAssertEqual(composer.cnvSequence("hxj"), "ㄏㄨˋ");
  XCTAssertEqual(composer.cnvSequence("hxy"), "ㄏㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("hxyd"), "ㄏㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hxyf"), "ㄏㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hxyj"), "ㄏㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("hxh"), "ㄏㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("hxhd"), "ㄏㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hxhf"), "ㄏㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hxhj"), "ㄏㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("hxhs"), "ㄏㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("hxid"), "ㄏㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hxij"), "ㄏㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hxa"), "ㄏㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("hxad"), "ㄏㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("hxaf"), "ㄏㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hxaj"), "ㄏㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("hxm"), "ㄏㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("hxmd"), "ㄏㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hxmf"), "ㄏㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hxmj"), "ㄏㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hxn"), "ㄏㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("hxnd"), "ㄏㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hxnf"), "ㄏㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hxnj"), "ㄏㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hxk"), "ㄏㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("hxkd"), "ㄏㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hxkf"), "ㄏㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hxkj"), "ㄏㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hxks"), "ㄏㄨㄤ˙");
  XCTAssertEqual(composer.cnvSequence("hxl"), "ㄏㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("hxld"), "ㄏㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hxlf"), "ㄏㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hxlj"), "ㄏㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("je"), "ㄐㄧ");
  XCTAssertEqual(composer.cnvSequence("jed"), "ㄐㄧˊ");
  XCTAssertEqual(composer.cnvSequence("jef"), "ㄐㄧˇ");
  XCTAssertEqual(composer.cnvSequence("jej"), "ㄐㄧˋ");
  XCTAssertEqual(composer.cnvSequence("jey"), "ㄐㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("jeyd"), "ㄐㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("jeyf"), "ㄐㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jeyj"), "ㄐㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("jee"), "ㄐㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("jeed"), "ㄐㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("jeef"), "ㄐㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("jeej"), "ㄐㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("jees"), "ㄐㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("jew"), "ㄐㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("jewd"), "ㄐㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jewf"), "ㄐㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jewj"), "ㄐㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jeo"), "ㄐㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("jeof"), "ㄐㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("jeoj"), "ㄐㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jem"), "ㄐㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("jemf"), "ㄐㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jemj"), "ㄐㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jen"), "ㄐㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("jenf"), "ㄐㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jenj"), "ㄐㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jek"), "ㄐㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("jekd"), "ㄐㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("jekf"), "ㄐㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jekj"), "ㄐㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jel"), "ㄐㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("jelf"), "ㄐㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jelj"), "ㄐㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ju"), "ㄐㄩ");
  XCTAssertEqual(composer.cnvSequence("jud"), "ㄐㄩˊ");
  XCTAssertEqual(composer.cnvSequence("juf"), "ㄐㄩˇ");
  XCTAssertEqual(composer.cnvSequence("juj"), "ㄐㄩˋ");
  XCTAssertEqual(composer.cnvSequence("jue"), "ㄐㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("jued"), "ㄐㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("juef"), "ㄐㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("juej"), "ㄐㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("jum"), "ㄐㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("jumf"), "ㄐㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jumj"), "ㄐㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jun"), "ㄐㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("jund"), "ㄐㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("junf"), "ㄐㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("junj"), "ㄐㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jul"), "ㄐㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("julf"), "ㄐㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("julj"), "ㄐㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vs"), "ㄑ˙");
  XCTAssertEqual(composer.cnvSequence("ve"), "ㄑㄧ");
  XCTAssertEqual(composer.cnvSequence("ved"), "ㄑㄧˊ");
  XCTAssertEqual(composer.cnvSequence("vef"), "ㄑㄧˇ");
  XCTAssertEqual(composer.cnvSequence("vej"), "ㄑㄧˋ");
  XCTAssertEqual(composer.cnvSequence("vey"), "ㄑㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("veyd"), "ㄑㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("veyf"), "ㄑㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("veyj"), "ㄑㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vee"), "ㄑㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("veed"), "ㄑㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("veef"), "ㄑㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("veej"), "ㄑㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vew"), "ㄑㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("vewd"), "ㄑㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vewf"), "ㄑㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vewj"), "ㄑㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("veo"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("veod"), "ㄑㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("veof"), "ㄑㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("veoj"), "ㄑㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vem"), "ㄑㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("vemd"), "ㄑㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vemf"), "ㄑㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vemj"), "ㄑㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ven"), "ㄑㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("vend"), "ㄑㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("venf"), "ㄑㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("venj"), "ㄑㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vek"), "ㄑㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("vekd"), "ㄑㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vekf"), "ㄑㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vekj"), "ㄑㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vel"), "ㄑㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("veld"), "ㄑㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("velf"), "ㄑㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("velj"), "ㄑㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vu"), "ㄑㄩ");
  XCTAssertEqual(composer.cnvSequence("vud"), "ㄑㄩˊ");
  XCTAssertEqual(composer.cnvSequence("vuf"), "ㄑㄩˇ");
  XCTAssertEqual(composer.cnvSequence("vuj"), "ㄑㄩˋ");
  XCTAssertEqual(composer.cnvSequence("vue"), "ㄑㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("vued"), "ㄑㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vuej"), "ㄑㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vum"), "ㄑㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("vumd"), "ㄑㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vumf"), "ㄑㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vumj"), "ㄑㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vun"), "ㄑㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("vund"), "ㄑㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vunf"), "ㄑㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vunj"), "ㄑㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vul"), "ㄑㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("vuld"), "ㄑㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vulf"), "ㄑㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vulj"), "ㄑㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ce"), "ㄒㄧ");
  XCTAssertEqual(composer.cnvSequence("ced"), "ㄒㄧˊ");
  XCTAssertEqual(composer.cnvSequence("cef"), "ㄒㄧˇ");
  XCTAssertEqual(composer.cnvSequence("cej"), "ㄒㄧˋ");
  XCTAssertEqual(composer.cnvSequence("cey"), "ㄒㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("ceyd"), "ㄒㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ceyf"), "ㄒㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ceyj"), "ㄒㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cee"), "ㄒㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("ceed"), "ㄒㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("ceef"), "ㄒㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ceej"), "ㄒㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cew"), "ㄒㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("cewd"), "ㄒㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cewf"), "ㄒㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cewj"), "ㄒㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ceo"), "ㄒㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("ceod"), "ㄒㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ceof"), "ㄒㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ceoj"), "ㄒㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cem"), "ㄒㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("cemd"), "ㄒㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cemf"), "ㄒㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cemj"), "ㄒㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cen"), "ㄒㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("cend"), "ㄒㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cenf"), "ㄒㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cenj"), "ㄒㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cek"), "ㄒㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("cekd"), "ㄒㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cekf"), "ㄒㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cekj"), "ㄒㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cel"), "ㄒㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("celd"), "ㄒㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("celf"), "ㄒㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("celj"), "ㄒㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cu"), "ㄒㄩ");
  XCTAssertEqual(composer.cnvSequence("cud"), "ㄒㄩˊ");
  XCTAssertEqual(composer.cnvSequence("cuf"), "ㄒㄩˇ");
  XCTAssertEqual(composer.cnvSequence("cuj"), "ㄒㄩˋ");
  XCTAssertEqual(composer.cnvSequence("cue"), "ㄒㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("cued"), "ㄒㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("cuef"), "ㄒㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("cuej"), "ㄒㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cum"), "ㄒㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("cumd"), "ㄒㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cumf"), "ㄒㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cumj"), "ㄒㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cun"), "ㄒㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("cund"), "ㄒㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cunj"), "ㄒㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cul"), "ㄒㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("culd"), "ㄒㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("culf"), "ㄒㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("culj"), "ㄒㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("j"), "ㄓ");
  XCTAssertEqual(composer.cnvSequence("jd"), "ㄓˊ");
  XCTAssertEqual(composer.cnvSequence("jf"), "ㄓˇ");
  XCTAssertEqual(composer.cnvSequence("jj"), "ㄓˋ");
  XCTAssertEqual(composer.cnvSequence("jy"), "ㄓㄚ");
  XCTAssertEqual(composer.cnvSequence("jyd"), "ㄓㄚˊ");
  XCTAssertEqual(composer.cnvSequence("jyf"), "ㄓㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jyj"), "ㄓㄚˋ");
  XCTAssertEqual(composer.cnvSequence("jg"), "ㄓㄜ");
  XCTAssertEqual(composer.cnvSequence("jgd"), "ㄓㄜˊ");
  XCTAssertEqual(composer.cnvSequence("jgf"), "ㄓㄜˇ");
  XCTAssertEqual(composer.cnvSequence("jgj"), "ㄓㄜˋ");
  XCTAssertEqual(composer.cnvSequence("jgs"), "ㄓㄜ˙");
  XCTAssertEqual(composer.cnvSequence("ji"), "ㄓㄞ");
  XCTAssertEqual(composer.cnvSequence("jid"), "ㄓㄞˊ");
  XCTAssertEqual(composer.cnvSequence("jif"), "ㄓㄞˇ");
  XCTAssertEqual(composer.cnvSequence("jij"), "ㄓㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jaj"), "ㄓㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jw"), "ㄓㄠ");
  XCTAssertEqual(composer.cnvSequence("jwd"), "ㄓㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jwf"), "ㄓㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jwj"), "ㄓㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jo"), "ㄓㄡ");
  XCTAssertEqual(composer.cnvSequence("jod"), "ㄓㄡˊ");
  XCTAssertEqual(composer.cnvSequence("jof"), "ㄓㄡˇ");
  XCTAssertEqual(composer.cnvSequence("joj"), "ㄓㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jm"), "ㄓㄢ");
  XCTAssertEqual(composer.cnvSequence("jmf"), "ㄓㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jmj"), "ㄓㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jn"), "ㄓㄣ");
  XCTAssertEqual(composer.cnvSequence("jnd"), "ㄓㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jnf"), "ㄓㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jnj"), "ㄓㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jk"), "ㄓㄤ");
  XCTAssertEqual(composer.cnvSequence("jkf"), "ㄓㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jkj"), "ㄓㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jl"), "ㄓㄥ");
  XCTAssertEqual(composer.cnvSequence("jlf"), "ㄓㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jlj"), "ㄓㄥˋ");
  XCTAssertEqual(composer.cnvSequence("jx"), "ㄓㄨ");
  XCTAssertEqual(composer.cnvSequence("jxd"), "ㄓㄨˊ");
  XCTAssertEqual(composer.cnvSequence("jxf"), "ㄓㄨˇ");
  XCTAssertEqual(composer.cnvSequence("jxj"), "ㄓㄨˋ");
  XCTAssertEqual(composer.cnvSequence("jxy"), "ㄓㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("jxyf"), "ㄓㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jxh"), "ㄓㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("jxhd"), "ㄓㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("jxhj"), "ㄓㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("jxi"), "ㄓㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("jxif"), "ㄓㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("jxij"), "ㄓㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jxa"), "ㄓㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("jxaf"), "ㄓㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("jxaj"), "ㄓㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jxm"), "ㄓㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("jxmf"), "ㄓㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jxmj"), "ㄓㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jxn"), "ㄓㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("jxnf"), "ㄓㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jxnj"), "ㄓㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jxk"), "ㄓㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("jxkf"), "ㄓㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jxkj"), "ㄓㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jxl"), "ㄓㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("jxlf"), "ㄓㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jxlj"), "ㄓㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("v "), "ㄔ ");
  XCTAssertEqual(composer.cnvSequence("vd"), "ㄔˊ");
  XCTAssertEqual(composer.cnvSequence("vf"), "ㄔˇ");
  XCTAssertEqual(composer.cnvSequence("vj"), "ㄔˋ");
  XCTAssertEqual(composer.cnvSequence("vy"), "ㄔㄚ");
  XCTAssertEqual(composer.cnvSequence("vyd"), "ㄔㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vyf"), "ㄔㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vyj"), "ㄔㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vg "), "ㄔㄜ ");
  XCTAssertEqual(composer.cnvSequence("vgf"), "ㄔㄜˇ");
  XCTAssertEqual(composer.cnvSequence("vgj"), "ㄔㄜˋ");
  XCTAssertEqual(composer.cnvSequence("vi"), "ㄔㄞ");
  XCTAssertEqual(composer.cnvSequence("vid"), "ㄔㄞˊ");
  XCTAssertEqual(composer.cnvSequence("vif"), "ㄔㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vij"), "ㄔㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vw"), "ㄔㄠ");
  XCTAssertEqual(composer.cnvSequence("vwd"), "ㄔㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vwf"), "ㄔㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vwj"), "ㄔㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vo"), "ㄔㄡ");
  XCTAssertEqual(composer.cnvSequence("vod"), "ㄔㄡˊ");
  XCTAssertEqual(composer.cnvSequence("vof"), "ㄔㄡˇ");
  XCTAssertEqual(composer.cnvSequence("voj"), "ㄔㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vm "), "ㄔㄢ ");
  XCTAssertEqual(composer.cnvSequence("vmd"), "ㄔㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vmf"), "ㄔㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vmj"), "ㄔㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vn "), "ㄔㄣ ");
  XCTAssertEqual(composer.cnvSequence("vnd"), "ㄔㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vnf"), "ㄔㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vnj"), "ㄔㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vns"), "ㄔㄣ˙");
  XCTAssertEqual(composer.cnvSequence("vk "), "ㄔㄤ ");
  XCTAssertEqual(composer.cnvSequence("vkd"), "ㄔㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vkf"), "ㄔㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vkj"), "ㄔㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vl "), "ㄔㄥ ");
  XCTAssertEqual(composer.cnvSequence("vld"), "ㄔㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vlf"), "ㄔㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vlj"), "ㄔㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vx"), "ㄔㄨ");
  XCTAssertEqual(composer.cnvSequence("vxd"), "ㄔㄨˊ");
  XCTAssertEqual(composer.cnvSequence("vxf"), "ㄔㄨˇ");
  XCTAssertEqual(composer.cnvSequence("vxj"), "ㄔㄨˋ");
  XCTAssertEqual(composer.cnvSequence("vxy"), "ㄔㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("vxyf"), "ㄔㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vxyj"), "ㄔㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vxh"), "ㄔㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("vxhj"), "ㄔㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("vxi"), "ㄔㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("vxid"), "ㄔㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("vxif"), "ㄔㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vxij"), "ㄔㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vxa"), "ㄔㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("vxad"), "ㄔㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("vxaf"), "ㄔㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("vxaj"), "ㄔㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("vxm"), "ㄔㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("vxmd"), "ㄔㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vxmf"), "ㄔㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vxmj"), "ㄔㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vxn"), "ㄔㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("vxnd"), "ㄔㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vxnf"), "ㄔㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vxk"), "ㄔㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("vxkd"), "ㄔㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vxkf"), "ㄔㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vxkj"), "ㄔㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vxl"), "ㄔㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("vxld"), "ㄔㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vxlf"), "ㄔㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vxlj"), "ㄔㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("c"), "ㄕ");
  XCTAssertEqual(composer.cnvSequence("cd"), "ㄕˊ");
  XCTAssertEqual(composer.cnvSequence("cf"), "ㄕˇ");
  XCTAssertEqual(composer.cnvSequence("cj"), "ㄕˋ");
  XCTAssertEqual(composer.cnvSequence("cs"), "ㄕ˙");
  XCTAssertEqual(composer.cnvSequence("cy"), "ㄕㄚ");
  XCTAssertEqual(composer.cnvSequence("cyd"), "ㄕㄚˊ");
  XCTAssertEqual(composer.cnvSequence("cyf"), "ㄕㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cyj"), "ㄕㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cys"), "ㄕㄚ˙");
  XCTAssertEqual(composer.cnvSequence("cg"), "ㄕㄜ");
  XCTAssertEqual(composer.cnvSequence("cgd"), "ㄕㄜˊ");
  XCTAssertEqual(composer.cnvSequence("cgf"), "ㄕㄜˇ");
  XCTAssertEqual(composer.cnvSequence("cgj"), "ㄕㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ci"), "ㄕㄞ");
  XCTAssertEqual(composer.cnvSequence("cif"), "ㄕㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cij"), "ㄕㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cad"), "ㄕㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cw"), "ㄕㄠ");
  XCTAssertEqual(composer.cnvSequence("cwd"), "ㄕㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cwf"), "ㄕㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cwj"), "ㄕㄠˋ");
  XCTAssertEqual(composer.cnvSequence("co"), "ㄕㄡ");
  XCTAssertEqual(composer.cnvSequence("cod"), "ㄕㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cof"), "ㄕㄡˇ");
  XCTAssertEqual(composer.cnvSequence("coj"), "ㄕㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cm"), "ㄕㄢ");
  XCTAssertEqual(composer.cnvSequence("cmd"), "ㄕㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cmf"), "ㄕㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cmj"), "ㄕㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cn"), "ㄕㄣ");
  XCTAssertEqual(composer.cnvSequence("cnd"), "ㄕㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cnf"), "ㄕㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cnj"), "ㄕㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ck"), "ㄕㄤ");
  XCTAssertEqual(composer.cnvSequence("ckf"), "ㄕㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ckj"), "ㄕㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cks"), "ㄕㄤ˙");
  XCTAssertEqual(composer.cnvSequence("cl"), "ㄕㄥ");
  XCTAssertEqual(composer.cnvSequence("cld"), "ㄕㄥˊ");
  XCTAssertEqual(composer.cnvSequence("clf"), "ㄕㄥˇ");
  XCTAssertEqual(composer.cnvSequence("clj"), "ㄕㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cx"), "ㄕㄨ");
  XCTAssertEqual(composer.cnvSequence("cxd"), "ㄕㄨˊ");
  XCTAssertEqual(composer.cnvSequence("cxf"), "ㄕㄨˇ");
  XCTAssertEqual(composer.cnvSequence("cxj"), "ㄕㄨˋ");
  XCTAssertEqual(composer.cnvSequence("cxy"), "ㄕㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("cxyf"), "ㄕㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cxyj"), "ㄕㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cxh"), "ㄕㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("cxhj"), "ㄕㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("cxi"), "ㄕㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("cxif"), "ㄕㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cxij"), "ㄕㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cxa"), "ㄕㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("cxad"), "ㄕㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cxaf"), "ㄕㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cxaj"), "ㄕㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("cxm"), "ㄕㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("cxmj"), "ㄕㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cxnf"), "ㄕㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cxnj"), "ㄕㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cxk"), "ㄕㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("cxkd"), "ㄕㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cxkf"), "ㄕㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cxkj"), "ㄕㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("rj"), "ㄖˋ");
  XCTAssertEqual(composer.cnvSequence("rgf"), "ㄖㄜˇ");
  XCTAssertEqual(composer.cnvSequence("rgj"), "ㄖㄜˋ");
  XCTAssertEqual(composer.cnvSequence("rwd"), "ㄖㄠˊ");
  XCTAssertEqual(composer.cnvSequence("rwf"), "ㄖㄠˇ");
  XCTAssertEqual(composer.cnvSequence("rwj"), "ㄖㄠˋ");
  XCTAssertEqual(composer.cnvSequence("rod"), "ㄖㄡˊ");
  XCTAssertEqual(composer.cnvSequence("rof"), "ㄖㄡˇ");
  XCTAssertEqual(composer.cnvSequence("roj"), "ㄖㄡˋ");
  XCTAssertEqual(composer.cnvSequence("rmd"), "ㄖㄢˊ");
  XCTAssertEqual(composer.cnvSequence("rmf"), "ㄖㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rmj"), "ㄖㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rnd"), "ㄖㄣˊ");
  XCTAssertEqual(composer.cnvSequence("rnf"), "ㄖㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rnj"), "ㄖㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rk"), "ㄖㄤ");
  XCTAssertEqual(composer.cnvSequence("rkd"), "ㄖㄤˊ");
  XCTAssertEqual(composer.cnvSequence("rkf"), "ㄖㄤˇ");
  XCTAssertEqual(composer.cnvSequence("rkj"), "ㄖㄤˋ");
  XCTAssertEqual(composer.cnvSequence("rl"), "ㄖㄥ");
  XCTAssertEqual(composer.cnvSequence("rld"), "ㄖㄥˊ");
  XCTAssertEqual(composer.cnvSequence("rlf"), "ㄖㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rlj"), "ㄖㄥˋ");
  XCTAssertEqual(composer.cnvSequence("rxd"), "ㄖㄨˊ");
  XCTAssertEqual(composer.cnvSequence("rxf"), "ㄖㄨˇ");
  XCTAssertEqual(composer.cnvSequence("rxj"), "ㄖㄨˋ");
  XCTAssertEqual(composer.cnvSequence("rxhd"), "ㄖㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("rxhj"), "ㄖㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("rxad"), "ㄖㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("rxaf"), "ㄖㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("rxaj"), "ㄖㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("rxmd"), "ㄖㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("rxmf"), "ㄖㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rxmj"), "ㄖㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rxnd"), "ㄖㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("rxnf"), "ㄖㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rxnj"), "ㄖㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rxld"), "ㄖㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("rxlf"), "ㄖㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rxlj"), "ㄖㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("z"), "ㄗ");
  XCTAssertEqual(composer.cnvSequence("zd"), "ㄗˊ");
  XCTAssertEqual(composer.cnvSequence("zf"), "ㄗˇ");
  XCTAssertEqual(composer.cnvSequence("zj"), "ㄗˋ");
  XCTAssertEqual(composer.cnvSequence("zs"), "ㄗ˙");
  XCTAssertEqual(composer.cnvSequence("zy"), "ㄗㄚ");
  XCTAssertEqual(composer.cnvSequence("zyd"), "ㄗㄚˊ");
  XCTAssertEqual(composer.cnvSequence("zyf"), "ㄗㄚˇ");
  XCTAssertEqual(composer.cnvSequence("zgd"), "ㄗㄜˊ");
  XCTAssertEqual(composer.cnvSequence("zgf"), "ㄗㄜˇ");
  XCTAssertEqual(composer.cnvSequence("zgj"), "ㄗㄜˋ");
  XCTAssertEqual(composer.cnvSequence("zi"), "ㄗㄞ");
  XCTAssertEqual(composer.cnvSequence("zif"), "ㄗㄞˇ");
  XCTAssertEqual(composer.cnvSequence("zij"), "ㄗㄞˋ");
  XCTAssertEqual(composer.cnvSequence("zad"), "ㄗㄟˊ");
  XCTAssertEqual(composer.cnvSequence("zw"), "ㄗㄠ");
  XCTAssertEqual(composer.cnvSequence("zwd"), "ㄗㄠˊ");
  XCTAssertEqual(composer.cnvSequence("zwf"), "ㄗㄠˇ");
  XCTAssertEqual(composer.cnvSequence("zwj"), "ㄗㄠˋ");
  XCTAssertEqual(composer.cnvSequence("zo"), "ㄗㄡ");
  XCTAssertEqual(composer.cnvSequence("zof"), "ㄗㄡˇ");
  XCTAssertEqual(composer.cnvSequence("zoj"), "ㄗㄡˋ");
  XCTAssertEqual(composer.cnvSequence("zm"), "ㄗㄢ");
  XCTAssertEqual(composer.cnvSequence("zmd"), "ㄗㄢˊ");
  XCTAssertEqual(composer.cnvSequence("zmf"), "ㄗㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zmj"), "ㄗㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zn"), "ㄗㄣ");
  XCTAssertEqual(composer.cnvSequence("znf"), "ㄗㄣˇ");
  XCTAssertEqual(composer.cnvSequence("znj"), "ㄗㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zk"), "ㄗㄤ");
  XCTAssertEqual(composer.cnvSequence("zkf"), "ㄗㄤˇ");
  XCTAssertEqual(composer.cnvSequence("zkj"), "ㄗㄤˋ");
  XCTAssertEqual(composer.cnvSequence("zl"), "ㄗㄥ");
  XCTAssertEqual(composer.cnvSequence("zlf"), "ㄗㄥˇ");
  XCTAssertEqual(composer.cnvSequence("zlj"), "ㄗㄥˋ");
  XCTAssertEqual(composer.cnvSequence("zx"), "ㄗㄨ");
  XCTAssertEqual(composer.cnvSequence("zxd"), "ㄗㄨˊ");
  XCTAssertEqual(composer.cnvSequence("zxf"), "ㄗㄨˇ");
  XCTAssertEqual(composer.cnvSequence("zxj"), "ㄗㄨˋ");
  XCTAssertEqual(composer.cnvSequence("zxh"), "ㄗㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("zxhd"), "ㄗㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("zxhf"), "ㄗㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("zxhj"), "ㄗㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("zxhs"), "ㄗㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("zxa"), "ㄗㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("zxaf"), "ㄗㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("zxaj"), "ㄗㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("zxm"), "ㄗㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("zxmf"), "ㄗㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zxmj"), "ㄗㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zxn"), "ㄗㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("zxnf"), "ㄗㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("zxnj"), "ㄗㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zxl"), "ㄗㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("zxlf"), "ㄗㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("zxlj"), "ㄗㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("a"), "ㄘ");
  XCTAssertEqual(composer.cnvSequence("ad"), "ㄘˊ");
  XCTAssertEqual(composer.cnvSequence("af"), "ㄘˇ");
  XCTAssertEqual(composer.cnvSequence("aj"), "ㄘˋ");
  XCTAssertEqual(composer.cnvSequence("ay"), "ㄘㄚ");
  XCTAssertEqual(composer.cnvSequence("ayf"), "ㄘㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ayj"), "ㄘㄚˋ");
  XCTAssertEqual(composer.cnvSequence("agj"), "ㄘㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ai"), "ㄘㄞ");
  XCTAssertEqual(composer.cnvSequence("aid"), "ㄘㄞˊ");
  XCTAssertEqual(composer.cnvSequence("aif"), "ㄘㄞˇ");
  XCTAssertEqual(composer.cnvSequence("aij"), "ㄘㄞˋ");
  XCTAssertEqual(composer.cnvSequence("aw"), "ㄘㄠ");
  XCTAssertEqual(composer.cnvSequence("awd"), "ㄘㄠˊ");
  XCTAssertEqual(composer.cnvSequence("awf"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("awj"), "ㄘㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ao"), "ㄘㄡ");
  XCTAssertEqual(composer.cnvSequence("aod"), "ㄘㄡˊ");
  XCTAssertEqual(composer.cnvSequence("aof"), "ㄘㄡˇ");
  XCTAssertEqual(composer.cnvSequence("aoj"), "ㄘㄡˋ");
  XCTAssertEqual(composer.cnvSequence("am"), "ㄘㄢ");
  XCTAssertEqual(composer.cnvSequence("amd"), "ㄘㄢˊ");
  XCTAssertEqual(composer.cnvSequence("amf"), "ㄘㄢˇ");
  XCTAssertEqual(composer.cnvSequence("amj"), "ㄘㄢˋ");
  XCTAssertEqual(composer.cnvSequence("an"), "ㄘㄣ");
  XCTAssertEqual(composer.cnvSequence("and"), "ㄘㄣˊ");
  XCTAssertEqual(composer.cnvSequence("ak"), "ㄘㄤ");
  XCTAssertEqual(composer.cnvSequence("akd"), "ㄘㄤˊ");
  XCTAssertEqual(composer.cnvSequence("akf"), "ㄘㄤˇ");
  XCTAssertEqual(composer.cnvSequence("akj"), "ㄘㄤˋ");
  XCTAssertEqual(composer.cnvSequence("al"), "ㄘㄥ");
  XCTAssertEqual(composer.cnvSequence("ald"), "ㄘㄥˊ");
  XCTAssertEqual(composer.cnvSequence("alf"), "ㄘㄥˇ");
  XCTAssertEqual(composer.cnvSequence("alj"), "ㄘㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ax"), "ㄘㄨ");
  XCTAssertEqual(composer.cnvSequence("axd"), "ㄘㄨˊ");
  XCTAssertEqual(composer.cnvSequence("axf"), "ㄘㄨˇ");
  XCTAssertEqual(composer.cnvSequence("axj"), "ㄘㄨˋ");
  XCTAssertEqual(composer.cnvSequence("axh"), "ㄘㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("axhd"), "ㄘㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("axhf"), "ㄘㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("axhj"), "ㄘㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("axa"), "ㄘㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("axaf"), "ㄘㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("axaj"), "ㄘㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("axm"), "ㄘㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("axmd"), "ㄘㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("axmf"), "ㄘㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("axmj"), "ㄘㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("axn"), "ㄘㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("axnd"), "ㄘㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("axnf"), "ㄘㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("axnj"), "ㄘㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("axl"), "ㄘㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("axld"), "ㄘㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("axlf"), "ㄘㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("axlj"), "ㄘㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("s"), "ㄙ");
  XCTAssertEqual(composer.cnvSequence("sf"), "ㄙˇ");
  XCTAssertEqual(composer.cnvSequence("sj"), "ㄙˋ");
  XCTAssertEqual(composer.cnvSequence("sy"), "ㄙㄚ");
  XCTAssertEqual(composer.cnvSequence("syf"), "ㄙㄚˇ");
  XCTAssertEqual(composer.cnvSequence("syj"), "ㄙㄚˋ");
  XCTAssertEqual(composer.cnvSequence("sys"), "ㄙㄚ˙");
  XCTAssertEqual(composer.cnvSequence("sg"), "ㄙㄜ");
  XCTAssertEqual(composer.cnvSequence("sgj"), "ㄙㄜˋ");
  XCTAssertEqual(composer.cnvSequence("si"), "ㄙㄞ");
  XCTAssertEqual(composer.cnvSequence("sid"), "ㄙㄞˊ");
  XCTAssertEqual(composer.cnvSequence("sif"), "ㄙㄞˇ");
  XCTAssertEqual(composer.cnvSequence("sij"), "ㄙㄞˋ");
  XCTAssertEqual(composer.cnvSequence("sa"), "ㄙㄟ");
  XCTAssertEqual(composer.cnvSequence("sw"), "ㄙㄠ");
  XCTAssertEqual(composer.cnvSequence("swf"), "ㄙㄠˇ");
  XCTAssertEqual(composer.cnvSequence("swj"), "ㄙㄠˋ");
  XCTAssertEqual(composer.cnvSequence("so"), "ㄙㄡ");
  XCTAssertEqual(composer.cnvSequence("sof"), "ㄙㄡˇ");
  XCTAssertEqual(composer.cnvSequence("soj"), "ㄙㄡˋ");
  XCTAssertEqual(composer.cnvSequence("sm"), "ㄙㄢ");
  XCTAssertEqual(composer.cnvSequence("smf"), "ㄙㄢˇ");
  XCTAssertEqual(composer.cnvSequence("smj"), "ㄙㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sn"), "ㄙㄣ");
  XCTAssertEqual(composer.cnvSequence("snf"), "ㄙㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sk"), "ㄙㄤ");
  XCTAssertEqual(composer.cnvSequence("skf"), "ㄙㄤˇ");
  XCTAssertEqual(composer.cnvSequence("skj"), "ㄙㄤˋ");
  XCTAssertEqual(composer.cnvSequence("sl"), "ㄙㄥ");
  XCTAssertEqual(composer.cnvSequence("slj"), "ㄙㄥˋ");
  XCTAssertEqual(composer.cnvSequence("sx"), "ㄙㄨ");
  XCTAssertEqual(composer.cnvSequence("sxd"), "ㄙㄨˊ");
  XCTAssertEqual(composer.cnvSequence("sxf"), "ㄙㄨˇ");
  XCTAssertEqual(composer.cnvSequence("sxj"), "ㄙㄨˋ");
  XCTAssertEqual(composer.cnvSequence("sxh"), "ㄙㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("sxhd"), "ㄙㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("sxhf"), "ㄙㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("sxhj"), "ㄙㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("sxa"), "ㄙㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("sxad"), "ㄙㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sxaf"), "ㄙㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("sxaj"), "ㄙㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("sxm"), "ㄙㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("sxmf"), "ㄙㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sxmj"), "ㄙㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sxn"), "ㄙㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("sxnf"), "ㄙㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sxnj"), "ㄙㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sxl"), "ㄙㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("sxld"), "ㄙㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sxlf"), "ㄙㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sxlj"), "ㄙㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("y"), "ㄚ");
  XCTAssertEqual(composer.cnvSequence("yd"), "ㄚˊ");
  XCTAssertEqual(composer.cnvSequence("yj"), "ㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ys"), "ㄚ˙");
  XCTAssertEqual(composer.cnvSequence("h "), "ㄛ ");
  XCTAssertEqual(composer.cnvSequence("hd"), "ㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hf"), "ㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hj"), "ㄛˋ");
  XCTAssertEqual(composer.cnvSequence("g "), "ㄜ ");
  XCTAssertEqual(composer.cnvSequence("gd"), "ㄜˊ");
  XCTAssertEqual(composer.cnvSequence("gf"), "ㄜˇ");
  XCTAssertEqual(composer.cnvSequence("gj"), "ㄜˋ");
  // XCTAssertEqual(composer.cnvSequence("ed"), "ㄝˊ");
  // XCTAssertEqual(composer.cnvSequence("ef"), "ㄝˇ");
  // XCTAssertEqual(composer.cnvSequence("ej"), "ㄝˋ");
  // XCTAssertEqual(composer.cnvSequence("es"), "ㄝ˙");
  XCTAssertEqual(composer.cnvSequence("i"), "ㄞ");
  XCTAssertEqual(composer.cnvSequence("id"), "ㄞˊ");
  XCTAssertEqual(composer.cnvSequence("if"), "ㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ij"), "ㄞˋ");
  // XCTAssertEqual(composer.cnvSequence("aj"), "ㄟˋ");
  XCTAssertEqual(composer.cnvSequence("w"), "ㄠ");
  XCTAssertEqual(composer.cnvSequence("wd"), "ㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wf"), "ㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wj"), "ㄠˋ");
  XCTAssertEqual(composer.cnvSequence("o"), "ㄡ");
  XCTAssertEqual(composer.cnvSequence("od"), "ㄡˊ");
  XCTAssertEqual(composer.cnvSequence("of"), "ㄡˇ");
  XCTAssertEqual(composer.cnvSequence("oj"), "ㄡˋ");
  XCTAssertEqual(composer.cnvSequence("os"), "ㄡ˙");
  XCTAssertEqual(composer.cnvSequence("m "), "ㄢ ");
  XCTAssertEqual(composer.cnvSequence("md"), "ㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mf"), "ㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mj"), "ㄢˋ");
  XCTAssertEqual(composer.cnvSequence("n "), "ㄣ ");
  XCTAssertEqual(composer.cnvSequence("nd"), "ㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nf"), "ㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nj"), "ㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ns"), "ㄣ˙");
  XCTAssertEqual(composer.cnvSequence("k "), "ㄤ ");
  XCTAssertEqual(composer.cnvSequence("kd"), "ㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kf"), "ㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kj"), "ㄤˋ");
  // XCTAssertEqual(composer.cnvSequence("l "), "ㄥ ");
  // XCTAssertEqual(composer.cnvSequence("lj"), "ㄥˋ");
  XCTAssertEqual(composer.cnvSequence("l "), "ㄦ ");
  XCTAssertEqual(composer.cnvSequence("ld"), "ㄦˊ");
  XCTAssertEqual(composer.cnvSequence("lf"), "ㄦˇ");
  XCTAssertEqual(composer.cnvSequence("lj"), "ㄦˋ");
  XCTAssertEqual(composer.cnvSequence("ls"), "ㄦ˙");
  XCTAssertEqual(composer.cnvSequence("e"), "ㄧ");
  XCTAssertEqual(composer.cnvSequence("ed"), "ㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ef"), "ㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ej"), "ㄧˋ");
  XCTAssertEqual(composer.cnvSequence("ey"), "ㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("eyd"), "ㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("eyf"), "ㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("eyj"), "ㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("eys"), "ㄧㄚ˙");
  XCTAssertEqual(composer.cnvSequence("eh"), "ㄧㄛ");
  XCTAssertEqual(composer.cnvSequence("ehs"), "ㄧㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ee"), "ㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("eed"), "ㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("eef"), "ㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("eej"), "ㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ees"), "ㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("eid"), "ㄧㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ew"), "ㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("ewd"), "ㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ewf"), "ㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ewj"), "ㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("eo"), "ㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("eod"), "ㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("eof"), "ㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("eoj"), "ㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("em"), "ㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("emd"), "ㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("emf"), "ㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("emj"), "ㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("en"), "ㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("end"), "ㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("enf"), "ㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("enj"), "ㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ek"), "ㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("ekd"), "ㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ekf"), "ㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ekj"), "ㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("el"), "ㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("eld"), "ㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("elf"), "ㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("elj"), "ㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("x"), "ㄨ");
  XCTAssertEqual(composer.cnvSequence("xd"), "ㄨˊ");
  XCTAssertEqual(composer.cnvSequence("xf"), "ㄨˇ");
  XCTAssertEqual(composer.cnvSequence("xj"), "ㄨˋ");
  XCTAssertEqual(composer.cnvSequence("xy"), "ㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("xyd"), "ㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xyf"), "ㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xyj"), "ㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xys"), "ㄨㄚ˙");
  XCTAssertEqual(composer.cnvSequence("xh"), "ㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("xhf"), "ㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("xhj"), "ㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("xi"), "ㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("xif"), "ㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xij"), "ㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xa"), "ㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("xad"), "ㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xaf"), "ㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("xaj"), "ㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("xm"), "ㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("xmd"), "ㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xmf"), "ㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xmj"), "ㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xn"), "ㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("xnd"), "ㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xnf"), "ㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xnj"), "ㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xk"), "ㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("xkd"), "ㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xkf"), "ㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xkj"), "ㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xl"), "ㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("xlf"), "ㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xlj"), "ㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("u"), "ㄩ");
  XCTAssertEqual(composer.cnvSequence("ud"), "ㄩˊ");
  XCTAssertEqual(composer.cnvSequence("uf"), "ㄩˇ");
  XCTAssertEqual(composer.cnvSequence("uj"), "ㄩˋ");
  XCTAssertEqual(composer.cnvSequence("ue"), "ㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("uef"), "ㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("uej"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("um"), "ㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("umd"), "ㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("umf"), "ㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("umj"), "ㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("un"), "ㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("und"), "ㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("unf"), "ㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("unj"), "ㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ul"), "ㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("uld"), "ㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ulf"), "ㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ulj"), "ㄩㄥˋ");
}

- (void)test_Zhuyin_StarlightKeys {
  // Testing handleStarlight()
  Composer composer = Composer("", ofStarlight);
  XCTAssertEqual(composer.cnvSequence("kik"), "ㄎㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("gif7"), "ㄍㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("gin"), "ㄍㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("bik7"), "ㄅㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("bik9"), "ㄅㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("duk"), "ㄉㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("ba"), "ㄅㄚ");
  XCTAssertEqual(composer.cnvSequence("ba7"), "ㄅㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ba8"), "ㄅㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ba9"), "ㄅㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ba0"), "ㄅㄚ˙");
  XCTAssertEqual(composer.cnvSequence("bo"), "ㄅㄛ");
  XCTAssertEqual(composer.cnvSequence("bo7"), "ㄅㄛˊ");
  XCTAssertEqual(composer.cnvSequence("bo8"), "ㄅㄛˇ");
  XCTAssertEqual(composer.cnvSequence("bo9"), "ㄅㄛˋ");
  XCTAssertEqual(composer.cnvSequence("bo0"), "ㄅㄛ˙");
  XCTAssertEqual(composer.cnvSequence("by"), "ㄅㄞ");
  XCTAssertEqual(composer.cnvSequence("by7"), "ㄅㄞˊ");
  XCTAssertEqual(composer.cnvSequence("by8"), "ㄅㄞˇ");
  XCTAssertEqual(composer.cnvSequence("by9"), "ㄅㄞˋ");
  XCTAssertEqual(composer.cnvSequence("by0"), "ㄅㄞ˙");
  XCTAssertEqual(composer.cnvSequence("bt"), "ㄅㄟ");
  XCTAssertEqual(composer.cnvSequence("bt8"), "ㄅㄟˇ");
  XCTAssertEqual(composer.cnvSequence("bt9"), "ㄅㄟˋ");
  XCTAssertEqual(composer.cnvSequence("bt0"), "ㄅㄟ˙");
  XCTAssertEqual(composer.cnvSequence("bf"), "ㄅㄠ");
  XCTAssertEqual(composer.cnvSequence("bf7"), "ㄅㄠˊ");
  XCTAssertEqual(composer.cnvSequence("bf8"), "ㄅㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bf9"), "ㄅㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bm"), "ㄅㄢ");
  XCTAssertEqual(composer.cnvSequence("bm8"), "ㄅㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bm9"), "ㄅㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bn"), "ㄅㄣ");
  XCTAssertEqual(composer.cnvSequence("bn8"), "ㄅㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bn9"), "ㄅㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bk"), "ㄅㄤ");
  XCTAssertEqual(composer.cnvSequence("bk8"), "ㄅㄤˇ");
  XCTAssertEqual(composer.cnvSequence("bk9"), "ㄅㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bg"), "ㄅㄥ");
  XCTAssertEqual(composer.cnvSequence("bg7"), "ㄅㄥˊ");
  XCTAssertEqual(composer.cnvSequence("bg8"), "ㄅㄥˇ");
  XCTAssertEqual(composer.cnvSequence("bg9"), "ㄅㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bi"), "ㄅㄧ");
  XCTAssertEqual(composer.cnvSequence("bi7"), "ㄅㄧˊ");
  XCTAssertEqual(composer.cnvSequence("bi8"), "ㄅㄧˇ");
  XCTAssertEqual(composer.cnvSequence("bi9"), "ㄅㄧˋ");
  XCTAssertEqual(composer.cnvSequence("bie"), "ㄅㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("bie7"), "ㄅㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("bie8"), "ㄅㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("bie9"), "ㄅㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("bif"), "ㄅㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("bif8"), "ㄅㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bif9"), "ㄅㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bim"), "ㄅㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("bim7"), "ㄅㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("bim8"), "ㄅㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bim9"), "ㄅㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bin"), "ㄅㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("bin8"), "ㄅㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bin9"), "ㄅㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("big"), "ㄅㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("big8"), "ㄅㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("big9"), "ㄅㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bu"), "ㄅㄨ");
  XCTAssertEqual(composer.cnvSequence("bu7"), "ㄅㄨˊ");
  XCTAssertEqual(composer.cnvSequence("bu8"), "ㄅㄨˇ");
  XCTAssertEqual(composer.cnvSequence("bu9"), "ㄅㄨˋ");
  XCTAssertEqual(composer.cnvSequence("pa"), "ㄆㄚ");
  XCTAssertEqual(composer.cnvSequence("pa7"), "ㄆㄚˊ");
  XCTAssertEqual(composer.cnvSequence("pa8"), "ㄆㄚˇ");
  XCTAssertEqual(composer.cnvSequence("pa9"), "ㄆㄚˋ");
  XCTAssertEqual(composer.cnvSequence("pa0"), "ㄆㄚ˙");
  XCTAssertEqual(composer.cnvSequence("po"), "ㄆㄛ");
  XCTAssertEqual(composer.cnvSequence("po7"), "ㄆㄛˊ");
  XCTAssertEqual(composer.cnvSequence("po8"), "ㄆㄛˇ");
  XCTAssertEqual(composer.cnvSequence("po9"), "ㄆㄛˋ");
  XCTAssertEqual(composer.cnvSequence("py"), "ㄆㄞ");
  XCTAssertEqual(composer.cnvSequence("py7"), "ㄆㄞˊ");
  XCTAssertEqual(composer.cnvSequence("py8"), "ㄆㄞˇ");
  XCTAssertEqual(composer.cnvSequence("py9"), "ㄆㄞˋ");
  XCTAssertEqual(composer.cnvSequence("pt"), "ㄆㄟ");
  XCTAssertEqual(composer.cnvSequence("pt7"), "ㄆㄟˊ");
  XCTAssertEqual(composer.cnvSequence("pt8"), "ㄆㄟˇ");
  XCTAssertEqual(composer.cnvSequence("pt9"), "ㄆㄟˋ");
  XCTAssertEqual(composer.cnvSequence("pf"), "ㄆㄠ");
  XCTAssertEqual(composer.cnvSequence("pf7"), "ㄆㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pf8"), "ㄆㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pf9"), "ㄆㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pw"), "ㄆㄡ");
  XCTAssertEqual(composer.cnvSequence("pw7"), "ㄆㄡˊ");
  XCTAssertEqual(composer.cnvSequence("pw8"), "ㄆㄡˇ");
  XCTAssertEqual(composer.cnvSequence("pw9"), "ㄆㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pm"), "ㄆㄢ");
  XCTAssertEqual(composer.cnvSequence("pm7"), "ㄆㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pm8"), "ㄆㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pm9"), "ㄆㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pn"), "ㄆㄣ");
  XCTAssertEqual(composer.cnvSequence("pn7"), "ㄆㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pn8"), "ㄆㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pn9"), "ㄆㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pk"), "ㄆㄤ");
  XCTAssertEqual(composer.cnvSequence("pk7"), "ㄆㄤˊ");
  XCTAssertEqual(composer.cnvSequence("pk8"), "ㄆㄤˇ");
  XCTAssertEqual(composer.cnvSequence("pk9"), "ㄆㄤˋ");
  XCTAssertEqual(composer.cnvSequence("pg"), "ㄆㄥ");
  XCTAssertEqual(composer.cnvSequence("pg7"), "ㄆㄥˊ");
  XCTAssertEqual(composer.cnvSequence("pg8"), "ㄆㄥˇ");
  XCTAssertEqual(composer.cnvSequence("pg9"), "ㄆㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pi"), "ㄆㄧ");
  XCTAssertEqual(composer.cnvSequence("pi7"), "ㄆㄧˊ");
  XCTAssertEqual(composer.cnvSequence("pi8"), "ㄆㄧˇ");
  XCTAssertEqual(composer.cnvSequence("pi9"), "ㄆㄧˋ");
  XCTAssertEqual(composer.cnvSequence("pia"), "ㄆㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("pie"), "ㄆㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("pie8"), "ㄆㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("pie9"), "ㄆㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("pif"), "ㄆㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("pif7"), "ㄆㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pif8"), "ㄆㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pif9"), "ㄆㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pim"), "ㄆㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("pim7"), "ㄆㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pim8"), "ㄆㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pim9"), "ㄆㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pin"), "ㄆㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("pin7"), "ㄆㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pin8"), "ㄆㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pin9"), "ㄆㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pig"), "ㄆㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("pig7"), "ㄆㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("pig8"), "ㄆㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("pig9"), "ㄆㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pu"), "ㄆㄨ");
  XCTAssertEqual(composer.cnvSequence("pu7"), "ㄆㄨˊ");
  XCTAssertEqual(composer.cnvSequence("pu8"), "ㄆㄨˇ");
  XCTAssertEqual(composer.cnvSequence("pu9"), "ㄆㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ma"), "ㄇㄚ");
  XCTAssertEqual(composer.cnvSequence("ma7"), "ㄇㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ma8"), "ㄇㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ma9"), "ㄇㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ma0"), "ㄇㄚ˙");
  XCTAssertEqual(composer.cnvSequence("mo"), "ㄇㄛ");
  XCTAssertEqual(composer.cnvSequence("mo7"), "ㄇㄛˊ");
  XCTAssertEqual(composer.cnvSequence("mo8"), "ㄇㄛˇ");
  XCTAssertEqual(composer.cnvSequence("mo9"), "ㄇㄛˋ");
  XCTAssertEqual(composer.cnvSequence("mo0"), "ㄇㄛ˙");
  XCTAssertEqual(composer.cnvSequence("me"), "ㄇㄜ");
  XCTAssertEqual(composer.cnvSequence("me9"), "ㄇㄜˋ");
  XCTAssertEqual(composer.cnvSequence("me0"), "ㄇㄜ˙");
  XCTAssertEqual(composer.cnvSequence("my"), "ㄇㄞ");
  XCTAssertEqual(composer.cnvSequence("my7"), "ㄇㄞˊ");
  XCTAssertEqual(composer.cnvSequence("my8"), "ㄇㄞˇ");
  XCTAssertEqual(composer.cnvSequence("my9"), "ㄇㄞˋ");
  XCTAssertEqual(composer.cnvSequence("mt7"), "ㄇㄟˊ");
  XCTAssertEqual(composer.cnvSequence("mt8"), "ㄇㄟˇ");
  XCTAssertEqual(composer.cnvSequence("mt9"), "ㄇㄟˋ");
  XCTAssertEqual(composer.cnvSequence("mf"), "ㄇㄠ");
  XCTAssertEqual(composer.cnvSequence("mf7"), "ㄇㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mf8"), "ㄇㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mf9"), "ㄇㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mw7"), "ㄇㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mw8"), "ㄇㄡˇ");
  XCTAssertEqual(composer.cnvSequence("mw9"), "ㄇㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mm"), "ㄇㄢ");
  XCTAssertEqual(composer.cnvSequence("mm7"), "ㄇㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mm8"), "ㄇㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mm9"), "ㄇㄢˋ");
  XCTAssertEqual(composer.cnvSequence("mn"), "ㄇㄣ");
  XCTAssertEqual(composer.cnvSequence("mn7"), "ㄇㄣˊ");
  XCTAssertEqual(composer.cnvSequence("mn8"), "ㄇㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mn9"), "ㄇㄣˋ");
  XCTAssertEqual(composer.cnvSequence("mn0"), "ㄇㄣ˙");
  XCTAssertEqual(composer.cnvSequence("mk"), "ㄇㄤ");
  XCTAssertEqual(composer.cnvSequence("mk7"), "ㄇㄤˊ");
  XCTAssertEqual(composer.cnvSequence("mk8"), "ㄇㄤˇ");
  XCTAssertEqual(composer.cnvSequence("mk9"), "ㄇㄤˋ");
  XCTAssertEqual(composer.cnvSequence("mg"), "ㄇㄥ");
  XCTAssertEqual(composer.cnvSequence("mg7"), "ㄇㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mg8"), "ㄇㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mg9"), "ㄇㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mi"), "ㄇㄧ");
  XCTAssertEqual(composer.cnvSequence("mi7"), "ㄇㄧˊ");
  XCTAssertEqual(composer.cnvSequence("mi8"), "ㄇㄧˇ");
  XCTAssertEqual(composer.cnvSequence("mi9"), "ㄇㄧˋ");
  XCTAssertEqual(composer.cnvSequence("mie"), "ㄇㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("mie7"), "ㄇㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("mie9"), "ㄇㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("mif"), "ㄇㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("mif7"), "ㄇㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mif8"), "ㄇㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mif9"), "ㄇㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("miw7"), "ㄇㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("miw8"), "ㄇㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("miw9"), "ㄇㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mim"), "ㄇㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("mim7"), "ㄇㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mim8"), "ㄇㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mim9"), "ㄇㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("min"), "ㄇㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("min7"), "ㄇㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("min8"), "ㄇㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mig7"), "ㄇㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mig8"), "ㄇㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mig9"), "ㄇㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mu7"), "ㄇㄨˊ");
  XCTAssertEqual(composer.cnvSequence("mu8"), "ㄇㄨˇ");
  XCTAssertEqual(composer.cnvSequence("mu9"), "ㄇㄨˋ");
  XCTAssertEqual(composer.cnvSequence("fa"), "ㄈㄚ");
  XCTAssertEqual(composer.cnvSequence("fa7"), "ㄈㄚˊ");
  XCTAssertEqual(composer.cnvSequence("fa8"), "ㄈㄚˇ");
  XCTAssertEqual(composer.cnvSequence("fa9"), "ㄈㄚˋ");
  XCTAssertEqual(composer.cnvSequence("fo7"), "ㄈㄛˊ");
  XCTAssertEqual(composer.cnvSequence("ft"), "ㄈㄟ");
  XCTAssertEqual(composer.cnvSequence("ft7"), "ㄈㄟˊ");
  XCTAssertEqual(composer.cnvSequence("ft8"), "ㄈㄟˇ");
  XCTAssertEqual(composer.cnvSequence("ft9"), "ㄈㄟˋ");
  XCTAssertEqual(composer.cnvSequence("fw"), "ㄈㄡ");
  XCTAssertEqual(composer.cnvSequence("fw7"), "ㄈㄡˊ");
  XCTAssertEqual(composer.cnvSequence("fw8"), "ㄈㄡˇ");
  XCTAssertEqual(composer.cnvSequence("fw9"), "ㄈㄡˋ");
  XCTAssertEqual(composer.cnvSequence("fm"), "ㄈㄢ");
  XCTAssertEqual(composer.cnvSequence("fm7"), "ㄈㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fm8"), "ㄈㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fm9"), "ㄈㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fn"), "ㄈㄣ");
  XCTAssertEqual(composer.cnvSequence("fn7"), "ㄈㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fn8"), "ㄈㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fn9"), "ㄈㄣˋ");
  XCTAssertEqual(composer.cnvSequence("fn0"), "ㄈㄣ˙");
  XCTAssertEqual(composer.cnvSequence("fk"), "ㄈㄤ");
  XCTAssertEqual(composer.cnvSequence("fk7"), "ㄈㄤˊ");
  XCTAssertEqual(composer.cnvSequence("fk8"), "ㄈㄤˇ");
  XCTAssertEqual(composer.cnvSequence("fk9"), "ㄈㄤˋ");
  XCTAssertEqual(composer.cnvSequence("fg"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("fg7"), "ㄈㄥˊ");
  XCTAssertEqual(composer.cnvSequence("fg8"), "ㄈㄥˇ");
  XCTAssertEqual(composer.cnvSequence("fg9"), "ㄈㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fif9"), "ㄈㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("fu"), "ㄈㄨ");
  XCTAssertEqual(composer.cnvSequence("fu7"), "ㄈㄨˊ");
  XCTAssertEqual(composer.cnvSequence("fu8"), "ㄈㄨˇ");
  XCTAssertEqual(composer.cnvSequence("fu9"), "ㄈㄨˋ");
  XCTAssertEqual(composer.cnvSequence("da"), "ㄉㄚ");
  XCTAssertEqual(composer.cnvSequence("da7"), "ㄉㄚˊ");
  XCTAssertEqual(composer.cnvSequence("da8"), "ㄉㄚˇ");
  XCTAssertEqual(composer.cnvSequence("da9"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("da0"), "ㄉㄚ˙");
  XCTAssertEqual(composer.cnvSequence("de"), "ㄉㄜ");
  XCTAssertEqual(composer.cnvSequence("de7"), "ㄉㄜˊ");
  XCTAssertEqual(composer.cnvSequence("de0"), "ㄉㄜ˙");
  XCTAssertEqual(composer.cnvSequence("dy"), "ㄉㄞ");
  XCTAssertEqual(composer.cnvSequence("dy8"), "ㄉㄞˇ");
  XCTAssertEqual(composer.cnvSequence("dy9"), "ㄉㄞˋ");
  XCTAssertEqual(composer.cnvSequence("dt8"), "ㄉㄟˇ");
  XCTAssertEqual(composer.cnvSequence("df"), "ㄉㄠ");
  XCTAssertEqual(composer.cnvSequence("df7"), "ㄉㄠˊ");
  XCTAssertEqual(composer.cnvSequence("df8"), "ㄉㄠˇ");
  XCTAssertEqual(composer.cnvSequence("df9"), "ㄉㄠˋ");
  XCTAssertEqual(composer.cnvSequence("dw"), "ㄉㄡ");
  XCTAssertEqual(composer.cnvSequence("dw7"), "ㄉㄡˊ");
  XCTAssertEqual(composer.cnvSequence("dw8"), "ㄉㄡˇ");
  XCTAssertEqual(composer.cnvSequence("dw9"), "ㄉㄡˋ");
  XCTAssertEqual(composer.cnvSequence("dm"), "ㄉㄢ");
  XCTAssertEqual(composer.cnvSequence("dm8"), "ㄉㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dm9"), "ㄉㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dn9"), "ㄉㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dk"), "ㄉㄤ");
  XCTAssertEqual(composer.cnvSequence("dk8"), "ㄉㄤˇ");
  XCTAssertEqual(composer.cnvSequence("dk9"), "ㄉㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dg"), "ㄉㄥ");
  XCTAssertEqual(composer.cnvSequence("dg8"), "ㄉㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dg9"), "ㄉㄥˋ");
  XCTAssertEqual(composer.cnvSequence("di"), "ㄉㄧ");
  XCTAssertEqual(composer.cnvSequence("di7"), "ㄉㄧˊ");
  XCTAssertEqual(composer.cnvSequence("di8"), "ㄉㄧˇ");
  XCTAssertEqual(composer.cnvSequence("di9"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("dia8"), "ㄉㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("die"), "ㄉㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("die7"), "ㄉㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("die8"), "ㄉㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("die9"), "ㄉㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("dif"), "ㄉㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("dif8"), "ㄉㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dif9"), "ㄉㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("diw"), "ㄉㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("dim"), "ㄉㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("dim7"), "ㄉㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("dim8"), "ㄉㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dim9"), "ㄉㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dig"), "ㄉㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("dig7"), "ㄉㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("dig8"), "ㄉㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dig9"), "ㄉㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("du"), "ㄉㄨ");
  XCTAssertEqual(composer.cnvSequence("du7"), "ㄉㄨˊ");
  XCTAssertEqual(composer.cnvSequence("du8"), "ㄉㄨˇ");
  XCTAssertEqual(composer.cnvSequence("du9"), "ㄉㄨˋ");
  XCTAssertEqual(composer.cnvSequence("duo"), "ㄉㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("duo7"), "ㄉㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("duo8"), "ㄉㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("duo9"), "ㄉㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("duo0"), "ㄉㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("dut"), "ㄉㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("dut8"), "ㄉㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dut9"), "ㄉㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("dum"), "ㄉㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("dum8"), "ㄉㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dum9"), "ㄉㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dun"), "ㄉㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("dun8"), "ㄉㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("dun9"), "ㄉㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dug"), "ㄉㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("dug8"), "ㄉㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dug9"), "ㄉㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ta"), "ㄊㄚ");
  XCTAssertEqual(composer.cnvSequence("ta8"), "ㄊㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ta9"), "ㄊㄚˋ");
  XCTAssertEqual(composer.cnvSequence("te9"), "ㄊㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ty"), "ㄊㄞ");
  XCTAssertEqual(composer.cnvSequence("ty7"), "ㄊㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ty8"), "ㄊㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ty9"), "ㄊㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ty0"), "ㄊㄞ˙");
  XCTAssertEqual(composer.cnvSequence("tf"), "ㄊㄠ");
  XCTAssertEqual(composer.cnvSequence("tf7"), "ㄊㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tf8"), "ㄊㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tf9"), "ㄊㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tf0"), "ㄊㄠ˙");
  XCTAssertEqual(composer.cnvSequence("tw"), "ㄊㄡ");
  XCTAssertEqual(composer.cnvSequence("tw7"), "ㄊㄡˊ");
  XCTAssertEqual(composer.cnvSequence("tw8"), "ㄊㄡˇ");
  XCTAssertEqual(composer.cnvSequence("tw9"), "ㄊㄡˋ");
  XCTAssertEqual(composer.cnvSequence("tw0"), "ㄊㄡ˙");
  XCTAssertEqual(composer.cnvSequence("tm"), "ㄊㄢ");
  XCTAssertEqual(composer.cnvSequence("tm7"), "ㄊㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tm8"), "ㄊㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tm9"), "ㄊㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tk"), "ㄊㄤ");
  XCTAssertEqual(composer.cnvSequence("tk7"), "ㄊㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tk8"), "ㄊㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tk9"), "ㄊㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tg"), "ㄊㄥ");
  XCTAssertEqual(composer.cnvSequence("tg7"), "ㄊㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tg9"), "ㄊㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ti"), "ㄊㄧ");
  XCTAssertEqual(composer.cnvSequence("ti7"), "ㄊㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ti8"), "ㄊㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ti9"), "ㄊㄧˋ");
  XCTAssertEqual(composer.cnvSequence("tie"), "ㄊㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("tie7"), "ㄊㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("tie8"), "ㄊㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("tie9"), "ㄊㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("tif"), "ㄊㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("tif7"), "ㄊㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tif8"), "ㄊㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tif9"), "ㄊㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tim"), "ㄊㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("tim7"), "ㄊㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tim8"), "ㄊㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tim9"), "ㄊㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tig"), "ㄊㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("tig7"), "ㄊㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tig8"), "ㄊㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("tig9"), "ㄊㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tu"), "ㄊㄨ");
  XCTAssertEqual(composer.cnvSequence("tu7"), "ㄊㄨˊ");
  XCTAssertEqual(composer.cnvSequence("tu8"), "ㄊㄨˇ");
  XCTAssertEqual(composer.cnvSequence("tu9"), "ㄊㄨˋ");
  XCTAssertEqual(composer.cnvSequence("tuo"), "ㄊㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("tuo7"), "ㄊㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("tuo8"), "ㄊㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("tuo9"), "ㄊㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("tut"), "ㄊㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("tut7"), "ㄊㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("tut8"), "ㄊㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("tut9"), "ㄊㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("tum"), "ㄊㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("tum7"), "ㄊㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tum8"), "ㄊㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tum9"), "ㄊㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tun"), "ㄊㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("tun7"), "ㄊㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("tun8"), "ㄊㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("tun9"), "ㄊㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("tug"), "ㄊㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("tug7"), "ㄊㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tug8"), "ㄊㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("tug9"), "ㄊㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("na"), "ㄋㄚ");
  XCTAssertEqual(composer.cnvSequence("na7"), "ㄋㄚˊ");
  XCTAssertEqual(composer.cnvSequence("na8"), "ㄋㄚˇ");
  XCTAssertEqual(composer.cnvSequence("na9"), "ㄋㄚˋ");
  XCTAssertEqual(composer.cnvSequence("na0"), "ㄋㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ne9"), "ㄋㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ne0"), "ㄋㄜ˙");
  XCTAssertEqual(composer.cnvSequence("ny7"), "ㄋㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ny8"), "ㄋㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ny9"), "ㄋㄞˋ");
  XCTAssertEqual(composer.cnvSequence("nt7"), "ㄋㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nt8"), "ㄋㄟˇ");
  XCTAssertEqual(composer.cnvSequence("nt9"), "ㄋㄟˋ");
  XCTAssertEqual(composer.cnvSequence("nf"), "ㄋㄠ");
  XCTAssertEqual(composer.cnvSequence("nf7"), "ㄋㄠˊ");
  XCTAssertEqual(composer.cnvSequence("nf8"), "ㄋㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nf9"), "ㄋㄠˋ");
  XCTAssertEqual(composer.cnvSequence("nw7"), "ㄋㄡˊ");
  XCTAssertEqual(composer.cnvSequence("nw8"), "ㄋㄡˇ");
  XCTAssertEqual(composer.cnvSequence("nw9"), "ㄋㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nm"), "ㄋㄢ");
  XCTAssertEqual(composer.cnvSequence("nm7"), "ㄋㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nm8"), "ㄋㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nm9"), "ㄋㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nn8"), "ㄋㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nn9"), "ㄋㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nk"), "ㄋㄤ");
  XCTAssertEqual(composer.cnvSequence("nk7"), "ㄋㄤˊ");
  XCTAssertEqual(composer.cnvSequence("nk8"), "ㄋㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nk9"), "ㄋㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nk0"), "ㄋㄤ˙");
  XCTAssertEqual(composer.cnvSequence("ng7"), "ㄋㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ng8"), "ㄋㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ni"), "ㄋㄧ");
  XCTAssertEqual(composer.cnvSequence("ni7"), "ㄋㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ni8"), "ㄋㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ni9"), "ㄋㄧˋ");
  XCTAssertEqual(composer.cnvSequence("nie"), "ㄋㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("nie7"), "ㄋㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("nie9"), "ㄋㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("nif8"), "ㄋㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nif9"), "ㄋㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("niw"), "ㄋㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("niw7"), "ㄋㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("niw8"), "ㄋㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("niw9"), "ㄋㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nim"), "ㄋㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("nim7"), "ㄋㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nim8"), "ㄋㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nim9"), "ㄋㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nin"), "ㄋㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("nin7"), "ㄋㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nin8"), "ㄋㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nin9"), "ㄋㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nik7"), "ㄋㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("nik8"), "ㄋㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nik9"), "ㄋㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nig7"), "ㄋㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nig8"), "ㄋㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nig9"), "ㄋㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nu7"), "ㄋㄨˊ");
  XCTAssertEqual(composer.cnvSequence("nu8"), "ㄋㄨˇ");
  XCTAssertEqual(composer.cnvSequence("nu9"), "ㄋㄨˋ");
  XCTAssertEqual(composer.cnvSequence("nuo7"), "ㄋㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("nuo8"), "ㄋㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("nuo9"), "ㄋㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("nut7"), "ㄋㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("num7"), "ㄋㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("num8"), "ㄋㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("num9"), "ㄋㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nun7"), "ㄋㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nug7"), "ㄋㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nug8"), "ㄋㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nug9"), "ㄋㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nv7"), "ㄋㄩˊ");
  XCTAssertEqual(composer.cnvSequence("nv8"), "ㄋㄩˇ");
  XCTAssertEqual(composer.cnvSequence("nv9"), "ㄋㄩˋ");
  XCTAssertEqual(composer.cnvSequence("nve9"), "ㄋㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("la"), "ㄌㄚ");
  XCTAssertEqual(composer.cnvSequence("la7"), "ㄌㄚˊ");
  XCTAssertEqual(composer.cnvSequence("la8"), "ㄌㄚˇ");
  XCTAssertEqual(composer.cnvSequence("la9"), "ㄌㄚˋ");
  XCTAssertEqual(composer.cnvSequence("la0"), "ㄌㄚ˙");
  XCTAssertEqual(composer.cnvSequence("lo"), "ㄌㄛ");
  XCTAssertEqual(composer.cnvSequence("lo0"), "ㄌㄛ˙");
  XCTAssertEqual(composer.cnvSequence("le"), "ㄌㄜ");
  XCTAssertEqual(composer.cnvSequence("le7"), "ㄌㄜˊ");
  XCTAssertEqual(composer.cnvSequence("le9"), "ㄌㄜˋ");
  XCTAssertEqual(composer.cnvSequence("le0"), "ㄌㄜ˙");
  XCTAssertEqual(composer.cnvSequence("ly7"), "ㄌㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ly8"), "ㄌㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ly9"), "ㄌㄞˋ");
  XCTAssertEqual(composer.cnvSequence("lt"), "ㄌㄟ");
  XCTAssertEqual(composer.cnvSequence("lt7"), "ㄌㄟˊ");
  XCTAssertEqual(composer.cnvSequence("lt8"), "ㄌㄟˇ");
  XCTAssertEqual(composer.cnvSequence("lt9"), "ㄌㄟˋ");
  XCTAssertEqual(composer.cnvSequence("lt0"), "ㄌㄟ˙");
  XCTAssertEqual(composer.cnvSequence("lf"), "ㄌㄠ");
  XCTAssertEqual(composer.cnvSequence("lf7"), "ㄌㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lf8"), "ㄌㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lf9"), "ㄌㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lw"), "ㄌㄡ");
  XCTAssertEqual(composer.cnvSequence("lw7"), "ㄌㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lw8"), "ㄌㄡˇ");
  XCTAssertEqual(composer.cnvSequence("lw9"), "ㄌㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lw0"), "ㄌㄡ˙");
  XCTAssertEqual(composer.cnvSequence("lm7"), "ㄌㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lm8"), "ㄌㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lm9"), "ㄌㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lk"), "ㄌㄤ");
  XCTAssertEqual(composer.cnvSequence("lk7"), "ㄌㄤˊ");
  XCTAssertEqual(composer.cnvSequence("lk8"), "ㄌㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lk9"), "ㄌㄤˋ");
  XCTAssertEqual(composer.cnvSequence("lg"), "ㄌㄥ");
  XCTAssertEqual(composer.cnvSequence("lg7"), "ㄌㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lg8"), "ㄌㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lg9"), "ㄌㄥˋ");
  XCTAssertEqual(composer.cnvSequence("li"), "ㄌㄧ");
  XCTAssertEqual(composer.cnvSequence("li7"), "ㄌㄧˊ");
  XCTAssertEqual(composer.cnvSequence("li8"), "ㄌㄧˇ");
  XCTAssertEqual(composer.cnvSequence("li9"), "ㄌㄧˋ");
  XCTAssertEqual(composer.cnvSequence("li0"), "ㄌㄧ˙");
  XCTAssertEqual(composer.cnvSequence("lia8"), "ㄌㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lie"), "ㄌㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("lie7"), "ㄌㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("lie8"), "ㄌㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("lie9"), "ㄌㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lif"), "ㄌㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("lif7"), "ㄌㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lif8"), "ㄌㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lif9"), "ㄌㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("liw"), "ㄌㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("liw7"), "ㄌㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("liw8"), "ㄌㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("liw9"), "ㄌㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lim"), "ㄌㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("lim7"), "ㄌㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lim8"), "ㄌㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lim9"), "ㄌㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lin7"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lin8"), "ㄌㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lin9"), "ㄌㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lik7"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("lik8"), "ㄌㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lik9"), "ㄌㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("lig"), "ㄌㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("lig7"), "ㄌㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lig8"), "ㄌㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lig9"), "ㄌㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lu"), "ㄌㄨ");
  XCTAssertEqual(composer.cnvSequence("lu7"), "ㄌㄨˊ");
  XCTAssertEqual(composer.cnvSequence("lu8"), "ㄌㄨˇ");
  XCTAssertEqual(composer.cnvSequence("lu9"), "ㄌㄨˋ");
  XCTAssertEqual(composer.cnvSequence("luo"), "ㄌㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("luo7"), "ㄌㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("luo8"), "ㄌㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("luo9"), "ㄌㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("luo0"), "ㄌㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lum7"), "ㄌㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lum8"), "ㄌㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lum9"), "ㄌㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lun"), "ㄌㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("lun7"), "ㄌㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lun8"), "ㄌㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lun9"), "ㄌㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lug"), "ㄌㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("lug7"), "ㄌㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lug8"), "ㄌㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lug9"), "ㄌㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lv"), "ㄌㄩ");
  XCTAssertEqual(composer.cnvSequence("lv7"), "ㄌㄩˊ");
  XCTAssertEqual(composer.cnvSequence("lv8"), "ㄌㄩˇ");
  XCTAssertEqual(composer.cnvSequence("lv9"), "ㄌㄩˋ");
  XCTAssertEqual(composer.cnvSequence("lve"), "ㄌㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("lve8"), "ㄌㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("lve9"), "ㄌㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lvm7"), "ㄌㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lvm8"), "ㄌㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ga"), "ㄍㄚ");
  XCTAssertEqual(composer.cnvSequence("ga7"), "ㄍㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ga8"), "ㄍㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ga9"), "ㄍㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ga0"), "ㄍㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ge"), "ㄍㄜ");
  XCTAssertEqual(composer.cnvSequence("ge7"), "ㄍㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ge8"), "ㄍㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ge9"), "ㄍㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ge0"), "ㄍㄜ˙");
  XCTAssertEqual(composer.cnvSequence("gy"), "ㄍㄞ");
  XCTAssertEqual(composer.cnvSequence("gy8"), "ㄍㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gy9"), "ㄍㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gt8"), "ㄍㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gf"), "ㄍㄠ");
  XCTAssertEqual(composer.cnvSequence("gf8"), "ㄍㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gf9"), "ㄍㄠˋ");
  XCTAssertEqual(composer.cnvSequence("gw"), "ㄍㄡ");
  XCTAssertEqual(composer.cnvSequence("gw8"), "ㄍㄡˇ");
  XCTAssertEqual(composer.cnvSequence("gw9"), "ㄍㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gm"), "ㄍㄢ");
  XCTAssertEqual(composer.cnvSequence("gm8"), "ㄍㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gm9"), "ㄍㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gn"), "ㄍㄣ");
  XCTAssertEqual(composer.cnvSequence("gn7"), "ㄍㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gn8"), "ㄍㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gn9"), "ㄍㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gk"), "ㄍㄤ");
  XCTAssertEqual(composer.cnvSequence("gk8"), "ㄍㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gk9"), "ㄍㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gg"), "ㄍㄥ");
  XCTAssertEqual(composer.cnvSequence("gg8"), "ㄍㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gg9"), "ㄍㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gu"), "ㄍㄨ");
  XCTAssertEqual(composer.cnvSequence("gu7"), "ㄍㄨˊ");
  XCTAssertEqual(composer.cnvSequence("gu8"), "ㄍㄨˇ");
  XCTAssertEqual(composer.cnvSequence("gu9"), "ㄍㄨˋ");
  XCTAssertEqual(composer.cnvSequence("gua"), "ㄍㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("gua7"), "ㄍㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gua8"), "ㄍㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gua9"), "ㄍㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("guo"), "ㄍㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("guo7"), "ㄍㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("guo8"), "ㄍㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("guo9"), "ㄍㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("guy"), "ㄍㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("guy8"), "ㄍㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("guy9"), "ㄍㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gut"), "ㄍㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("gut8"), "ㄍㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gut9"), "ㄍㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gum"), "ㄍㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("gum8"), "ㄍㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gum9"), "ㄍㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gun"), "ㄍㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("gun8"), "ㄍㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gun9"), "ㄍㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("guk"), "ㄍㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("guk8"), "ㄍㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("guk9"), "ㄍㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gug"), "ㄍㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("gug7"), "ㄍㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("gug8"), "ㄍㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gug9"), "ㄍㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ka"), "ㄎㄚ");
  XCTAssertEqual(composer.cnvSequence("ka8"), "ㄎㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ka9"), "ㄎㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ke"), "ㄎㄜ");
  XCTAssertEqual(composer.cnvSequence("ke7"), "ㄎㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ke8"), "ㄎㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ke9"), "ㄎㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ky"), "ㄎㄞ");
  XCTAssertEqual(composer.cnvSequence("ky8"), "ㄎㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ky9"), "ㄎㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kf"), "ㄎㄠ");
  XCTAssertEqual(composer.cnvSequence("kf8"), "ㄎㄠˇ");
  XCTAssertEqual(composer.cnvSequence("kf9"), "ㄎㄠˋ");
  XCTAssertEqual(composer.cnvSequence("kw"), "ㄎㄡ");
  XCTAssertEqual(composer.cnvSequence("kw8"), "ㄎㄡˇ");
  XCTAssertEqual(composer.cnvSequence("kw9"), "ㄎㄡˋ");
  XCTAssertEqual(composer.cnvSequence("km"), "ㄎㄢ");
  XCTAssertEqual(composer.cnvSequence("km8"), "ㄎㄢˇ");
  XCTAssertEqual(composer.cnvSequence("km9"), "ㄎㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kn"), "ㄎㄣ");
  XCTAssertEqual(composer.cnvSequence("kn8"), "ㄎㄣˇ");
  XCTAssertEqual(composer.cnvSequence("kn9"), "ㄎㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kk"), "ㄎㄤ");
  XCTAssertEqual(composer.cnvSequence("kk7"), "ㄎㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kk8"), "ㄎㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kk9"), "ㄎㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kg"), "ㄎㄥ");
  XCTAssertEqual(composer.cnvSequence("kg8"), "ㄎㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ku"), "ㄎㄨ");
  XCTAssertEqual(composer.cnvSequence("ku7"), "ㄎㄨˊ");
  XCTAssertEqual(composer.cnvSequence("ku8"), "ㄎㄨˇ");
  XCTAssertEqual(composer.cnvSequence("ku9"), "ㄎㄨˋ");
  XCTAssertEqual(composer.cnvSequence("kua"), "ㄎㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("kua8"), "ㄎㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kua9"), "ㄎㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kuo9"), "ㄎㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("kuy"), "ㄎㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("kuy8"), "ㄎㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kuy9"), "ㄎㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kut"), "ㄎㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("kut7"), "ㄎㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("kut8"), "ㄎㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("kut9"), "ㄎㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("kum"), "ㄎㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("kum8"), "ㄎㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kum9"), "ㄎㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kun"), "ㄎㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("kun8"), "ㄎㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("kun9"), "ㄎㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kuk"), "ㄎㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("kuk7"), "ㄎㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kuk8"), "ㄎㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kuk9"), "ㄎㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kug"), "ㄎㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("kug8"), "ㄎㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kug9"), "ㄎㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ha"), "ㄏㄚ");
  XCTAssertEqual(composer.cnvSequence("ha7"), "ㄏㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ha8"), "ㄏㄚˇ");
  XCTAssertEqual(composer.cnvSequence("he"), "ㄏㄜ");
  XCTAssertEqual(composer.cnvSequence("he7"), "ㄏㄜˊ");
  XCTAssertEqual(composer.cnvSequence("he8"), "ㄏㄜˇ");
  XCTAssertEqual(composer.cnvSequence("he9"), "ㄏㄜˋ");
  XCTAssertEqual(composer.cnvSequence("hy"), "ㄏㄞ");
  XCTAssertEqual(composer.cnvSequence("hy7"), "ㄏㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hy8"), "ㄏㄞˇ");
  XCTAssertEqual(composer.cnvSequence("hy9"), "ㄏㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ht"), "ㄏㄟ");
  XCTAssertEqual(composer.cnvSequence("ht8"), "ㄏㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hf"), "ㄏㄠ");
  XCTAssertEqual(composer.cnvSequence("hf7"), "ㄏㄠˊ");
  XCTAssertEqual(composer.cnvSequence("hf8"), "ㄏㄠˇ");
  XCTAssertEqual(composer.cnvSequence("hf9"), "ㄏㄠˋ");
  XCTAssertEqual(composer.cnvSequence("hw"), "ㄏㄡ");
  XCTAssertEqual(composer.cnvSequence("hw7"), "ㄏㄡˊ");
  XCTAssertEqual(composer.cnvSequence("hw8"), "ㄏㄡˇ");
  XCTAssertEqual(composer.cnvSequence("hw9"), "ㄏㄡˋ");
  XCTAssertEqual(composer.cnvSequence("hm"), "ㄏㄢ");
  XCTAssertEqual(composer.cnvSequence("hm7"), "ㄏㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hm8"), "ㄏㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hm9"), "ㄏㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hn"), "ㄏㄣ");
  XCTAssertEqual(composer.cnvSequence("hn7"), "ㄏㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hn8"), "ㄏㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hn9"), "ㄏㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hk"), "ㄏㄤ");
  XCTAssertEqual(composer.cnvSequence("hk7"), "ㄏㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hk8"), "ㄏㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hk9"), "ㄏㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hg"), "ㄏㄥ");
  XCTAssertEqual(composer.cnvSequence("hg7"), "ㄏㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hg9"), "ㄏㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hu"), "ㄏㄨ");
  XCTAssertEqual(composer.cnvSequence("hu7"), "ㄏㄨˊ");
  XCTAssertEqual(composer.cnvSequence("hu8"), "ㄏㄨˇ");
  XCTAssertEqual(composer.cnvSequence("hu9"), "ㄏㄨˋ");
  XCTAssertEqual(composer.cnvSequence("hua"), "ㄏㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("hua7"), "ㄏㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hua8"), "ㄏㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hua9"), "ㄏㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("huo"), "ㄏㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("huo7"), "ㄏㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("huo8"), "ㄏㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("huo9"), "ㄏㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("huo0"), "ㄏㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("huy7"), "ㄏㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("huy9"), "ㄏㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hut"), "ㄏㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("hut7"), "ㄏㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("hut8"), "ㄏㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hut9"), "ㄏㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("hum"), "ㄏㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("hum7"), "ㄏㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hum8"), "ㄏㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hum9"), "ㄏㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hun"), "ㄏㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("hun7"), "ㄏㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hun8"), "ㄏㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hun9"), "ㄏㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("huk"), "ㄏㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("huk7"), "ㄏㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("huk8"), "ㄏㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("huk9"), "ㄏㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("huk0"), "ㄏㄨㄤ˙");
  XCTAssertEqual(composer.cnvSequence("hug"), "ㄏㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("hug7"), "ㄏㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hug8"), "ㄏㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hug9"), "ㄏㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ji"), "ㄐㄧ");
  XCTAssertEqual(composer.cnvSequence("ji7"), "ㄐㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ji8"), "ㄐㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ji9"), "ㄐㄧˋ");
  XCTAssertEqual(composer.cnvSequence("jia"), "ㄐㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("jia7"), "ㄐㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("jia8"), "ㄐㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jia9"), "ㄐㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("jie"), "ㄐㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("jie7"), "ㄐㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("jie8"), "ㄐㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("jie9"), "ㄐㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("jie0"), "ㄐㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("jif"), "ㄐㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("jif7"), "ㄐㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jif8"), "ㄐㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jif9"), "ㄐㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jiw"), "ㄐㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("jiw8"), "ㄐㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("jiw9"), "ㄐㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jim"), "ㄐㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("jim8"), "ㄐㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jim9"), "ㄐㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jin"), "ㄐㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("jin8"), "ㄐㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jin9"), "ㄐㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jik"), "ㄐㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("jik7"), "ㄐㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("jik8"), "ㄐㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jik9"), "ㄐㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jig"), "ㄐㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("jig8"), "ㄐㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jig9"), "ㄐㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("jv"), "ㄐㄩ");
  XCTAssertEqual(composer.cnvSequence("jv7"), "ㄐㄩˊ");
  XCTAssertEqual(composer.cnvSequence("jv8"), "ㄐㄩˇ");
  XCTAssertEqual(composer.cnvSequence("jv9"), "ㄐㄩˋ");
  XCTAssertEqual(composer.cnvSequence("jve"), "ㄐㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("jve7"), "ㄐㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("jve8"), "ㄐㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("jve9"), "ㄐㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("jvm"), "ㄐㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("jvm8"), "ㄐㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jvm9"), "ㄐㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jvn"), "ㄐㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("jvn7"), "ㄐㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jvn8"), "ㄐㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jvn9"), "ㄐㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jvg"), "ㄐㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("jvg8"), "ㄐㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jvg9"), "ㄐㄩㄥˋ");
  // XCTAssertEqual(composer.cnvSequence("q0"), "ㄑ˙");
  XCTAssertEqual(composer.cnvSequence("qi"), "ㄑㄧ");
  XCTAssertEqual(composer.cnvSequence("qi7"), "ㄑㄧˊ");
  XCTAssertEqual(composer.cnvSequence("qi8"), "ㄑㄧˇ");
  XCTAssertEqual(composer.cnvSequence("qi9"), "ㄑㄧˋ");
  XCTAssertEqual(composer.cnvSequence("qia"), "ㄑㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("qia7"), "ㄑㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("qia8"), "ㄑㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("qia9"), "ㄑㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("qie"), "ㄑㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("qie7"), "ㄑㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("qie8"), "ㄑㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("qie9"), "ㄑㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("qif"), "ㄑㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("qif7"), "ㄑㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qif8"), "ㄑㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qif9"), "ㄑㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qiw"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("qiw7"), "ㄑㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("qiw8"), "ㄑㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("qiw9"), "ㄑㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("qim"), "ㄑㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("qim7"), "ㄑㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qim8"), "ㄑㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qim9"), "ㄑㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qin"), "ㄑㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("qin7"), "ㄑㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("qin8"), "ㄑㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qin9"), "ㄑㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qik"), "ㄑㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("qik7"), "ㄑㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("qik8"), "ㄑㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("qik9"), "ㄑㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("qig"), "ㄑㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("qig7"), "ㄑㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qig8"), "ㄑㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qig9"), "ㄑㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qv"), "ㄑㄩ");
  XCTAssertEqual(composer.cnvSequence("qv7"), "ㄑㄩˊ");
  XCTAssertEqual(composer.cnvSequence("qv8"), "ㄑㄩˇ");
  XCTAssertEqual(composer.cnvSequence("qv9"), "ㄑㄩˋ");
  XCTAssertEqual(composer.cnvSequence("qve"), "ㄑㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("qve7"), "ㄑㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("qve9"), "ㄑㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("qvm"), "ㄑㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("qvm7"), "ㄑㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qvm8"), "ㄑㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qvm9"), "ㄑㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qvn"), "ㄑㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("qvn7"), "ㄑㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("qvn8"), "ㄑㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qvn9"), "ㄑㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qvg"), "ㄑㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("qvg7"), "ㄑㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qvg8"), "ㄑㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qvg9"), "ㄑㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("xi"), "ㄒㄧ");
  XCTAssertEqual(composer.cnvSequence("xi7"), "ㄒㄧˊ");
  XCTAssertEqual(composer.cnvSequence("xi8"), "ㄒㄧˇ");
  XCTAssertEqual(composer.cnvSequence("xi9"), "ㄒㄧˋ");
  XCTAssertEqual(composer.cnvSequence("xia"), "ㄒㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("xia7"), "ㄒㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xia8"), "ㄒㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xia9"), "ㄒㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xie"), "ㄒㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("xie7"), "ㄒㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("xie8"), "ㄒㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("xie9"), "ㄒㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("xif"), "ㄒㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("xif7"), "ㄒㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("xif8"), "ㄒㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("xif9"), "ㄒㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("xiw"), "ㄒㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("xiw7"), "ㄒㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("xiw8"), "ㄒㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("xiw9"), "ㄒㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("xim"), "ㄒㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("xim7"), "ㄒㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xim8"), "ㄒㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xim9"), "ㄒㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xin"), "ㄒㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("xin7"), "ㄒㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xin8"), "ㄒㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xin9"), "ㄒㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xik"), "ㄒㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("xik7"), "ㄒㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xik8"), "ㄒㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xik9"), "ㄒㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xig"), "ㄒㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("xig7"), "ㄒㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("xig8"), "ㄒㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xig9"), "ㄒㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("xv"), "ㄒㄩ");
  XCTAssertEqual(composer.cnvSequence("xv7"), "ㄒㄩˊ");
  XCTAssertEqual(composer.cnvSequence("xv8"), "ㄒㄩˇ");
  XCTAssertEqual(composer.cnvSequence("xv9"), "ㄒㄩˋ");
  XCTAssertEqual(composer.cnvSequence("xve"), "ㄒㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("xve7"), "ㄒㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("xve8"), "ㄒㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("xve9"), "ㄒㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("xvm"), "ㄒㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("xvm7"), "ㄒㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xvm8"), "ㄒㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xvm9"), "ㄒㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xvn"), "ㄒㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("xvn7"), "ㄒㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xvn9"), "ㄒㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xvg"), "ㄒㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("xvg7"), "ㄒㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("xvg8"), "ㄒㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xvg9"), "ㄒㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("j"), "ㄓ");
  XCTAssertEqual(composer.cnvSequence("j7"), "ㄓˊ");
  XCTAssertEqual(composer.cnvSequence("j8"), "ㄓˇ");
  XCTAssertEqual(composer.cnvSequence("j9"), "ㄓˋ");
  XCTAssertEqual(composer.cnvSequence("ja"), "ㄓㄚ");
  XCTAssertEqual(composer.cnvSequence("ja7"), "ㄓㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ja8"), "ㄓㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ja9"), "ㄓㄚˋ");
  XCTAssertEqual(composer.cnvSequence("je"), "ㄓㄜ");
  XCTAssertEqual(composer.cnvSequence("je7"), "ㄓㄜˊ");
  XCTAssertEqual(composer.cnvSequence("je8"), "ㄓㄜˇ");
  XCTAssertEqual(composer.cnvSequence("je9"), "ㄓㄜˋ");
  XCTAssertEqual(composer.cnvSequence("je0"), "ㄓㄜ˙");
  XCTAssertEqual(composer.cnvSequence("jy"), "ㄓㄞ");
  XCTAssertEqual(composer.cnvSequence("jy7"), "ㄓㄞˊ");
  XCTAssertEqual(composer.cnvSequence("jy8"), "ㄓㄞˇ");
  XCTAssertEqual(composer.cnvSequence("jy9"), "ㄓㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jt9"), "ㄓㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jf"), "ㄓㄠ");
  XCTAssertEqual(composer.cnvSequence("jf7"), "ㄓㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jf8"), "ㄓㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jf9"), "ㄓㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jw"), "ㄓㄡ");
  XCTAssertEqual(composer.cnvSequence("jw7"), "ㄓㄡˊ");
  XCTAssertEqual(composer.cnvSequence("jw8"), "ㄓㄡˇ");
  XCTAssertEqual(composer.cnvSequence("jw9"), "ㄓㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jm"), "ㄓㄢ");
  XCTAssertEqual(composer.cnvSequence("jm8"), "ㄓㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jm9"), "ㄓㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jn"), "ㄓㄣ");
  XCTAssertEqual(composer.cnvSequence("jn7"), "ㄓㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jn8"), "ㄓㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jn9"), "ㄓㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jk"), "ㄓㄤ");
  XCTAssertEqual(composer.cnvSequence("jk8"), "ㄓㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jk9"), "ㄓㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jg"), "ㄓㄥ");
  XCTAssertEqual(composer.cnvSequence("jg8"), "ㄓㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jg9"), "ㄓㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ju"), "ㄓㄨ");
  XCTAssertEqual(composer.cnvSequence("ju7"), "ㄓㄨˊ");
  XCTAssertEqual(composer.cnvSequence("ju8"), "ㄓㄨˇ");
  XCTAssertEqual(composer.cnvSequence("ju9"), "ㄓㄨˋ");
  XCTAssertEqual(composer.cnvSequence("jua"), "ㄓㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("jua8"), "ㄓㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("juo"), "ㄓㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("juo7"), "ㄓㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("juo9"), "ㄓㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("juy"), "ㄓㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("juy8"), "ㄓㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("juy9"), "ㄓㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jut"), "ㄓㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("jut8"), "ㄓㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("jut9"), "ㄓㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jum"), "ㄓㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("jum8"), "ㄓㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jum9"), "ㄓㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jun"), "ㄓㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("jun8"), "ㄓㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jun9"), "ㄓㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("juk"), "ㄓㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("juk8"), "ㄓㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("juk9"), "ㄓㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jug"), "ㄓㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("jug8"), "ㄓㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jug9"), "ㄓㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("q"), "ㄔ");
  XCTAssertEqual(composer.cnvSequence("q7"), "ㄔˊ");
  XCTAssertEqual(composer.cnvSequence("q8"), "ㄔˇ");
  XCTAssertEqual(composer.cnvSequence("q9"), "ㄔˋ");
  XCTAssertEqual(composer.cnvSequence("qa"), "ㄔㄚ");
  XCTAssertEqual(composer.cnvSequence("qa7"), "ㄔㄚˊ");
  XCTAssertEqual(composer.cnvSequence("qa8"), "ㄔㄚˇ");
  XCTAssertEqual(composer.cnvSequence("qa9"), "ㄔㄚˋ");
  XCTAssertEqual(composer.cnvSequence("qe"), "ㄔㄜ");
  XCTAssertEqual(composer.cnvSequence("qe8"), "ㄔㄜˇ");
  XCTAssertEqual(composer.cnvSequence("qe9"), "ㄔㄜˋ");
  XCTAssertEqual(composer.cnvSequence("qy"), "ㄔㄞ");
  XCTAssertEqual(composer.cnvSequence("qy7"), "ㄔㄞˊ");
  XCTAssertEqual(composer.cnvSequence("qy8"), "ㄔㄞˇ");
  XCTAssertEqual(composer.cnvSequence("qy9"), "ㄔㄞˋ");
  XCTAssertEqual(composer.cnvSequence("qf"), "ㄔㄠ");
  XCTAssertEqual(composer.cnvSequence("qf7"), "ㄔㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qf8"), "ㄔㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qf9"), "ㄔㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qw"), "ㄔㄡ");
  XCTAssertEqual(composer.cnvSequence("qw7"), "ㄔㄡˊ");
  XCTAssertEqual(composer.cnvSequence("qw8"), "ㄔㄡˇ");
  XCTAssertEqual(composer.cnvSequence("qw9"), "ㄔㄡˋ");
  XCTAssertEqual(composer.cnvSequence("qm"), "ㄔㄢ");
  XCTAssertEqual(composer.cnvSequence("qm7"), "ㄔㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qm8"), "ㄔㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qm9"), "ㄔㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qn"), "ㄔㄣ");
  XCTAssertEqual(composer.cnvSequence("qn7"), "ㄔㄣˊ");
  XCTAssertEqual(composer.cnvSequence("qn8"), "ㄔㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qn9"), "ㄔㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qn0"), "ㄔㄣ˙");
  XCTAssertEqual(composer.cnvSequence("qk"), "ㄔㄤ");
  XCTAssertEqual(composer.cnvSequence("qk7"), "ㄔㄤˊ");
  XCTAssertEqual(composer.cnvSequence("qk8"), "ㄔㄤˇ");
  XCTAssertEqual(composer.cnvSequence("qk9"), "ㄔㄤˋ");
  XCTAssertEqual(composer.cnvSequence("qg"), "ㄔㄥ");
  XCTAssertEqual(composer.cnvSequence("qg7"), "ㄔㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qg8"), "ㄔㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qg9"), "ㄔㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qu"), "ㄔㄨ");
  XCTAssertEqual(composer.cnvSequence("qu7"), "ㄔㄨˊ");
  XCTAssertEqual(composer.cnvSequence("qu8"), "ㄔㄨˇ");
  XCTAssertEqual(composer.cnvSequence("qu9"), "ㄔㄨˋ");
  XCTAssertEqual(composer.cnvSequence("qua"), "ㄔㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("qua8"), "ㄔㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("qua9"), "ㄔㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("quo"), "ㄔㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("quo9"), "ㄔㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("quy"), "ㄔㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("quy7"), "ㄔㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("quy8"), "ㄔㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("quy9"), "ㄔㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("qut"), "ㄔㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("qut7"), "ㄔㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("qut8"), "ㄔㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("qut9"), "ㄔㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("qum"), "ㄔㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("qum7"), "ㄔㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qum8"), "ㄔㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qum9"), "ㄔㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qun"), "ㄔㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("qun7"), "ㄔㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("qun8"), "ㄔㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("quk"), "ㄔㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("quk7"), "ㄔㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("quk8"), "ㄔㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("quk9"), "ㄔㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("qug"), "ㄔㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("qug7"), "ㄔㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("qug8"), "ㄔㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qug9"), "ㄔㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("x"), "ㄕ");
  XCTAssertEqual(composer.cnvSequence("x7"), "ㄕˊ");
  XCTAssertEqual(composer.cnvSequence("x8"), "ㄕˇ");
  XCTAssertEqual(composer.cnvSequence("x9"), "ㄕˋ");
  XCTAssertEqual(composer.cnvSequence("x0"), "ㄕ˙");
  XCTAssertEqual(composer.cnvSequence("xa"), "ㄕㄚ");
  XCTAssertEqual(composer.cnvSequence("xa7"), "ㄕㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xa8"), "ㄕㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xa9"), "ㄕㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xa0"), "ㄕㄚ˙");
  XCTAssertEqual(composer.cnvSequence("xe"), "ㄕㄜ");
  XCTAssertEqual(composer.cnvSequence("xe7"), "ㄕㄜˊ");
  XCTAssertEqual(composer.cnvSequence("xe8"), "ㄕㄜˇ");
  XCTAssertEqual(composer.cnvSequence("xe9"), "ㄕㄜˋ");
  XCTAssertEqual(composer.cnvSequence("xy"), "ㄕㄞ");
  XCTAssertEqual(composer.cnvSequence("xy8"), "ㄕㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xy9"), "ㄕㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xt7"), "ㄕㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xf"), "ㄕㄠ");
  XCTAssertEqual(composer.cnvSequence("xf7"), "ㄕㄠˊ");
  XCTAssertEqual(composer.cnvSequence("xf8"), "ㄕㄠˇ");
  XCTAssertEqual(composer.cnvSequence("xf9"), "ㄕㄠˋ");
  XCTAssertEqual(composer.cnvSequence("xw"), "ㄕㄡ");
  XCTAssertEqual(composer.cnvSequence("xw7"), "ㄕㄡˊ");
  XCTAssertEqual(composer.cnvSequence("xw8"), "ㄕㄡˇ");
  XCTAssertEqual(composer.cnvSequence("xw9"), "ㄕㄡˋ");
  XCTAssertEqual(composer.cnvSequence("xm"), "ㄕㄢ");
  XCTAssertEqual(composer.cnvSequence("xm7"), "ㄕㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xm8"), "ㄕㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xm9"), "ㄕㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xn"), "ㄕㄣ");
  XCTAssertEqual(composer.cnvSequence("xn7"), "ㄕㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xn8"), "ㄕㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xn9"), "ㄕㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xk"), "ㄕㄤ");
  XCTAssertEqual(composer.cnvSequence("xk8"), "ㄕㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xk9"), "ㄕㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xk0"), "ㄕㄤ˙");
  XCTAssertEqual(composer.cnvSequence("xg"), "ㄕㄥ");
  XCTAssertEqual(composer.cnvSequence("xg7"), "ㄕㄥˊ");
  XCTAssertEqual(composer.cnvSequence("xg8"), "ㄕㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xg9"), "ㄕㄥˋ");
  XCTAssertEqual(composer.cnvSequence("xu"), "ㄕㄨ");
  XCTAssertEqual(composer.cnvSequence("xu7"), "ㄕㄨˊ");
  XCTAssertEqual(composer.cnvSequence("xu8"), "ㄕㄨˇ");
  XCTAssertEqual(composer.cnvSequence("xu9"), "ㄕㄨˋ");
  XCTAssertEqual(composer.cnvSequence("xua"), "ㄕㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("xua8"), "ㄕㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xua9"), "ㄕㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xuo"), "ㄕㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("xuo9"), "ㄕㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("xuy"), "ㄕㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("xuy8"), "ㄕㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xuy9"), "ㄕㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xut"), "ㄕㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("xut7"), "ㄕㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xut8"), "ㄕㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("xut9"), "ㄕㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("xum"), "ㄕㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("xum9"), "ㄕㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xun8"), "ㄕㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xun9"), "ㄕㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xuk"), "ㄕㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("xuk7"), "ㄕㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xuk8"), "ㄕㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xuk9"), "ㄕㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("r9"), "ㄖˋ");
  XCTAssertEqual(composer.cnvSequence("re8"), "ㄖㄜˇ");
  XCTAssertEqual(composer.cnvSequence("re9"), "ㄖㄜˋ");
  XCTAssertEqual(composer.cnvSequence("rf7"), "ㄖㄠˊ");
  XCTAssertEqual(composer.cnvSequence("rf8"), "ㄖㄠˇ");
  XCTAssertEqual(composer.cnvSequence("rf9"), "ㄖㄠˋ");
  XCTAssertEqual(composer.cnvSequence("rw7"), "ㄖㄡˊ");
  XCTAssertEqual(composer.cnvSequence("rw8"), "ㄖㄡˇ");
  XCTAssertEqual(composer.cnvSequence("rw9"), "ㄖㄡˋ");
  XCTAssertEqual(composer.cnvSequence("rm7"), "ㄖㄢˊ");
  XCTAssertEqual(composer.cnvSequence("rm8"), "ㄖㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rm9"), "ㄖㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rn7"), "ㄖㄣˊ");
  XCTAssertEqual(composer.cnvSequence("rn8"), "ㄖㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rn9"), "ㄖㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rk"), "ㄖㄤ");
  XCTAssertEqual(composer.cnvSequence("rk7"), "ㄖㄤˊ");
  XCTAssertEqual(composer.cnvSequence("rk8"), "ㄖㄤˇ");
  XCTAssertEqual(composer.cnvSequence("rk9"), "ㄖㄤˋ");
  XCTAssertEqual(composer.cnvSequence("rg"), "ㄖㄥ");
  XCTAssertEqual(composer.cnvSequence("rg7"), "ㄖㄥˊ");
  XCTAssertEqual(composer.cnvSequence("rg8"), "ㄖㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rg9"), "ㄖㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ru7"), "ㄖㄨˊ");
  XCTAssertEqual(composer.cnvSequence("ru8"), "ㄖㄨˇ");
  XCTAssertEqual(composer.cnvSequence("ru9"), "ㄖㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ruo7"), "ㄖㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("ruo9"), "ㄖㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("rut7"), "ㄖㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("rut8"), "ㄖㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("rut9"), "ㄖㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("rum7"), "ㄖㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("rum8"), "ㄖㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rum9"), "ㄖㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("run7"), "ㄖㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("run8"), "ㄖㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("run9"), "ㄖㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rug7"), "ㄖㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("rug8"), "ㄖㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rug9"), "ㄖㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("z"), "ㄗ");
  XCTAssertEqual(composer.cnvSequence("z7"), "ㄗˊ");
  XCTAssertEqual(composer.cnvSequence("z8"), "ㄗˇ");
  XCTAssertEqual(composer.cnvSequence("z9"), "ㄗˋ");
  XCTAssertEqual(composer.cnvSequence("z0"), "ㄗ˙");
  XCTAssertEqual(composer.cnvSequence("za"), "ㄗㄚ");
  XCTAssertEqual(composer.cnvSequence("za7"), "ㄗㄚˊ");
  XCTAssertEqual(composer.cnvSequence("za8"), "ㄗㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ze7"), "ㄗㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ze8"), "ㄗㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ze9"), "ㄗㄜˋ");
  XCTAssertEqual(composer.cnvSequence("zy"), "ㄗㄞ");
  XCTAssertEqual(composer.cnvSequence("zy8"), "ㄗㄞˇ");
  XCTAssertEqual(composer.cnvSequence("zy9"), "ㄗㄞˋ");
  XCTAssertEqual(composer.cnvSequence("zt7"), "ㄗㄟˊ");
  XCTAssertEqual(composer.cnvSequence("zf"), "ㄗㄠ");
  XCTAssertEqual(composer.cnvSequence("zf7"), "ㄗㄠˊ");
  XCTAssertEqual(composer.cnvSequence("zf8"), "ㄗㄠˇ");
  XCTAssertEqual(composer.cnvSequence("zf9"), "ㄗㄠˋ");
  XCTAssertEqual(composer.cnvSequence("zw"), "ㄗㄡ");
  XCTAssertEqual(composer.cnvSequence("zw8"), "ㄗㄡˇ");
  XCTAssertEqual(composer.cnvSequence("zw9"), "ㄗㄡˋ");
  XCTAssertEqual(composer.cnvSequence("zm"), "ㄗㄢ");
  XCTAssertEqual(composer.cnvSequence("zm7"), "ㄗㄢˊ");
  XCTAssertEqual(composer.cnvSequence("zm8"), "ㄗㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zm9"), "ㄗㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zn"), "ㄗㄣ");
  XCTAssertEqual(composer.cnvSequence("zn8"), "ㄗㄣˇ");
  XCTAssertEqual(composer.cnvSequence("zn9"), "ㄗㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zk"), "ㄗㄤ");
  XCTAssertEqual(composer.cnvSequence("zk8"), "ㄗㄤˇ");
  XCTAssertEqual(composer.cnvSequence("zk9"), "ㄗㄤˋ");
  XCTAssertEqual(composer.cnvSequence("zg"), "ㄗㄥ");
  XCTAssertEqual(composer.cnvSequence("zg8"), "ㄗㄥˇ");
  XCTAssertEqual(composer.cnvSequence("zg9"), "ㄗㄥˋ");
  XCTAssertEqual(composer.cnvSequence("zu"), "ㄗㄨ");
  XCTAssertEqual(composer.cnvSequence("zu7"), "ㄗㄨˊ");
  XCTAssertEqual(composer.cnvSequence("zu8"), "ㄗㄨˇ");
  XCTAssertEqual(composer.cnvSequence("zu9"), "ㄗㄨˋ");
  XCTAssertEqual(composer.cnvSequence("zuo"), "ㄗㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("zuo7"), "ㄗㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("zuo8"), "ㄗㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("zuo9"), "ㄗㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("zuo0"), "ㄗㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("zut"), "ㄗㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("zut8"), "ㄗㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("zut9"), "ㄗㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("zum"), "ㄗㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("zum8"), "ㄗㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zum9"), "ㄗㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zun"), "ㄗㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("zun8"), "ㄗㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("zun9"), "ㄗㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zug"), "ㄗㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("zug8"), "ㄗㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("zug9"), "ㄗㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("c"), "ㄘ");
  XCTAssertEqual(composer.cnvSequence("c7"), "ㄘˊ");
  XCTAssertEqual(composer.cnvSequence("c8"), "ㄘˇ");
  XCTAssertEqual(composer.cnvSequence("c9"), "ㄘˋ");
  XCTAssertEqual(composer.cnvSequence("ca"), "ㄘㄚ");
  XCTAssertEqual(composer.cnvSequence("ca8"), "ㄘㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ca9"), "ㄘㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ce9"), "ㄘㄜˋ");
  XCTAssertEqual(composer.cnvSequence("cy"), "ㄘㄞ");
  XCTAssertEqual(composer.cnvSequence("cy7"), "ㄘㄞˊ");
  XCTAssertEqual(composer.cnvSequence("cy8"), "ㄘㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cy9"), "ㄘㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cf"), "ㄘㄠ");
  XCTAssertEqual(composer.cnvSequence("cf7"), "ㄘㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cf8"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cf9"), "ㄘㄠˋ");
  XCTAssertEqual(composer.cnvSequence("cw"), "ㄘㄡ");
  XCTAssertEqual(composer.cnvSequence("cw7"), "ㄘㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cw8"), "ㄘㄡˇ");
  XCTAssertEqual(composer.cnvSequence("cw9"), "ㄘㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cm"), "ㄘㄢ");
  XCTAssertEqual(composer.cnvSequence("cm7"), "ㄘㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cm8"), "ㄘㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cm9"), "ㄘㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cn"), "ㄘㄣ");
  XCTAssertEqual(composer.cnvSequence("cn7"), "ㄘㄣˊ");
  XCTAssertEqual(composer.cnvSequence("ck"), "ㄘㄤ");
  XCTAssertEqual(composer.cnvSequence("ck7"), "ㄘㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ck8"), "ㄘㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ck9"), "ㄘㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cg"), "ㄘㄥ");
  XCTAssertEqual(composer.cnvSequence("cg7"), "ㄘㄥˊ");
  XCTAssertEqual(composer.cnvSequence("cg8"), "ㄘㄥˇ");
  XCTAssertEqual(composer.cnvSequence("cg9"), "ㄘㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cu"), "ㄘㄨ");
  XCTAssertEqual(composer.cnvSequence("cu7"), "ㄘㄨˊ");
  XCTAssertEqual(composer.cnvSequence("cu8"), "ㄘㄨˇ");
  XCTAssertEqual(composer.cnvSequence("cu9"), "ㄘㄨˋ");
  XCTAssertEqual(composer.cnvSequence("cuo"), "ㄘㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("cuo7"), "ㄘㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("cuo8"), "ㄘㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("cuo9"), "ㄘㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("cut"), "ㄘㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("cut8"), "ㄘㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cut9"), "ㄘㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("cum"), "ㄘㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("cum7"), "ㄘㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cum8"), "ㄘㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cum9"), "ㄘㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cun"), "ㄘㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("cun7"), "ㄘㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cun8"), "ㄘㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cun9"), "ㄘㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cug"), "ㄘㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("cug7"), "ㄘㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("cug8"), "ㄘㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("cug9"), "ㄘㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("s"), "ㄙ");
  XCTAssertEqual(composer.cnvSequence("s8"), "ㄙˇ");
  XCTAssertEqual(composer.cnvSequence("s9"), "ㄙˋ");
  XCTAssertEqual(composer.cnvSequence("sa"), "ㄙㄚ");
  XCTAssertEqual(composer.cnvSequence("sa8"), "ㄙㄚˇ");
  XCTAssertEqual(composer.cnvSequence("sa9"), "ㄙㄚˋ");
  XCTAssertEqual(composer.cnvSequence("sa0"), "ㄙㄚ˙");
  XCTAssertEqual(composer.cnvSequence("se"), "ㄙㄜ");
  XCTAssertEqual(composer.cnvSequence("se9"), "ㄙㄜˋ");
  XCTAssertEqual(composer.cnvSequence("sy"), "ㄙㄞ");
  XCTAssertEqual(composer.cnvSequence("sy7"), "ㄙㄞˊ");
  XCTAssertEqual(composer.cnvSequence("sy8"), "ㄙㄞˇ");
  XCTAssertEqual(composer.cnvSequence("sy9"), "ㄙㄞˋ");
  XCTAssertEqual(composer.cnvSequence("st"), "ㄙㄟ");
  XCTAssertEqual(composer.cnvSequence("sf"), "ㄙㄠ");
  XCTAssertEqual(composer.cnvSequence("sf8"), "ㄙㄠˇ");
  XCTAssertEqual(composer.cnvSequence("sf9"), "ㄙㄠˋ");
  XCTAssertEqual(composer.cnvSequence("sw"), "ㄙㄡ");
  XCTAssertEqual(composer.cnvSequence("sw8"), "ㄙㄡˇ");
  XCTAssertEqual(composer.cnvSequence("sw9"), "ㄙㄡˋ");
  XCTAssertEqual(composer.cnvSequence("sm"), "ㄙㄢ");
  XCTAssertEqual(composer.cnvSequence("sm8"), "ㄙㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sm9"), "ㄙㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sn"), "ㄙㄣ");
  XCTAssertEqual(composer.cnvSequence("sn8"), "ㄙㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sk"), "ㄙㄤ");
  XCTAssertEqual(composer.cnvSequence("sk8"), "ㄙㄤˇ");
  XCTAssertEqual(composer.cnvSequence("sk9"), "ㄙㄤˋ");
  XCTAssertEqual(composer.cnvSequence("sg"), "ㄙㄥ");
  XCTAssertEqual(composer.cnvSequence("sg9"), "ㄙㄥˋ");
  XCTAssertEqual(composer.cnvSequence("su"), "ㄙㄨ");
  XCTAssertEqual(composer.cnvSequence("su7"), "ㄙㄨˊ");
  XCTAssertEqual(composer.cnvSequence("su8"), "ㄙㄨˇ");
  XCTAssertEqual(composer.cnvSequence("su9"), "ㄙㄨˋ");
  XCTAssertEqual(composer.cnvSequence("suo"), "ㄙㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("suo7"), "ㄙㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("suo8"), "ㄙㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("suo9"), "ㄙㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("sut"), "ㄙㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("sut7"), "ㄙㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sut8"), "ㄙㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("sut9"), "ㄙㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("sum"), "ㄙㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("sum8"), "ㄙㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sum9"), "ㄙㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sun"), "ㄙㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("sun8"), "ㄙㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sun9"), "ㄙㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sug"), "ㄙㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("sug7"), "ㄙㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sug8"), "ㄙㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sug9"), "ㄙㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("a"), "ㄚ");
  XCTAssertEqual(composer.cnvSequence("a7"), "ㄚˊ");
  XCTAssertEqual(composer.cnvSequence("a9"), "ㄚˋ");
  XCTAssertEqual(composer.cnvSequence("a0"), "ㄚ˙");
  XCTAssertEqual(composer.cnvSequence("o"), "ㄛ");
  XCTAssertEqual(composer.cnvSequence("o7"), "ㄛˊ");
  XCTAssertEqual(composer.cnvSequence("o8"), "ㄛˇ");
  XCTAssertEqual(composer.cnvSequence("o9"), "ㄛˋ");
  XCTAssertEqual(composer.cnvSequence("e"), "ㄜ");
  XCTAssertEqual(composer.cnvSequence("e7"), "ㄜˊ");
  XCTAssertEqual(composer.cnvSequence("e8"), "ㄜˇ");
  XCTAssertEqual(composer.cnvSequence("e9"), "ㄜˋ");
  // XCTAssertEqual(composer.cnvSequence("e7"), "ㄝˊ");
  // XCTAssertEqual(composer.cnvSequence("e8"), "ㄝˇ");
  // XCTAssertEqual(composer.cnvSequence("e9"), "ㄝˋ");
  // XCTAssertEqual(composer.cnvSequence("e0"), "ㄝ˙");
  XCTAssertEqual(composer.cnvSequence("y"), "ㄞ");
  XCTAssertEqual(composer.cnvSequence("y7"), "ㄞˊ");
  XCTAssertEqual(composer.cnvSequence("y8"), "ㄞˇ");
  XCTAssertEqual(composer.cnvSequence("y9"), "ㄞˋ");
  XCTAssertEqual(composer.cnvSequence("t9"), "ㄟˋ");
  XCTAssertEqual(composer.cnvSequence("f "), "ㄠ ");
  XCTAssertEqual(composer.cnvSequence("f7"), "ㄠˊ");
  XCTAssertEqual(composer.cnvSequence("f8"), "ㄠˇ");
  XCTAssertEqual(composer.cnvSequence("f9"), "ㄠˋ");
  XCTAssertEqual(composer.cnvSequence("w"), "ㄡ");
  XCTAssertEqual(composer.cnvSequence("w7"), "ㄡˊ");
  XCTAssertEqual(composer.cnvSequence("w8"), "ㄡˇ");
  XCTAssertEqual(composer.cnvSequence("w9"), "ㄡˋ");
  XCTAssertEqual(composer.cnvSequence("w0"), "ㄡ˙");
  XCTAssertEqual(composer.cnvSequence("m "), "ㄢ ");
  XCTAssertEqual(composer.cnvSequence("m7"), "ㄢˊ");
  XCTAssertEqual(composer.cnvSequence("m8"), "ㄢˇ");
  XCTAssertEqual(composer.cnvSequence("m9"), "ㄢˋ");
  XCTAssertEqual(composer.cnvSequence("n "), "ㄣ ");
  XCTAssertEqual(composer.cnvSequence("n7"), "ㄣˊ");
  XCTAssertEqual(composer.cnvSequence("n8"), "ㄣˇ");
  XCTAssertEqual(composer.cnvSequence("n9"), "ㄣˋ");
  XCTAssertEqual(composer.cnvSequence("n0"), "ㄣ˙");
  XCTAssertEqual(composer.cnvSequence("k "), "ㄤ ");
  XCTAssertEqual(composer.cnvSequence("k7"), "ㄤˊ");
  XCTAssertEqual(composer.cnvSequence("k8"), "ㄤˇ");
  XCTAssertEqual(composer.cnvSequence("k9"), "ㄤˋ");
  XCTAssertEqual(composer.cnvSequence("g "), "ㄥ ");
  XCTAssertEqual(composer.cnvSequence("g9"), "ㄥˋ");
  XCTAssertEqual(composer.cnvSequence("l "), "ㄦ ");
  XCTAssertEqual(composer.cnvSequence("l7"), "ㄦˊ");
  XCTAssertEqual(composer.cnvSequence("l8"), "ㄦˇ");
  XCTAssertEqual(composer.cnvSequence("l9"), "ㄦˋ");
  XCTAssertEqual(composer.cnvSequence("l0"), "ㄦ˙");
  XCTAssertEqual(composer.cnvSequence("i"), "ㄧ");
  XCTAssertEqual(composer.cnvSequence("i7"), "ㄧˊ");
  XCTAssertEqual(composer.cnvSequence("i8"), "ㄧˇ");
  XCTAssertEqual(composer.cnvSequence("i9"), "ㄧˋ");
  XCTAssertEqual(composer.cnvSequence("ia"), "ㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("ia7"), "ㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ia8"), "ㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ia9"), "ㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ia0"), "ㄧㄚ˙");
  XCTAssertEqual(composer.cnvSequence("io"), "ㄧㄛ");
  XCTAssertEqual(composer.cnvSequence("io0"), "ㄧㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ie"), "ㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("ie7"), "ㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("ie8"), "ㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ie9"), "ㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ie0"), "ㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("iy7"), "ㄧㄞˊ");
  XCTAssertEqual(composer.cnvSequence("if"), "ㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("if7"), "ㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("if8"), "ㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("if9"), "ㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("iw"), "ㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("iw7"), "ㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("iw8"), "ㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("iw9"), "ㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("im"), "ㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("im7"), "ㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("im8"), "ㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("im9"), "ㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("in"), "ㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("in7"), "ㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("in8"), "ㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("in9"), "ㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ik"), "ㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("ik7"), "ㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ik8"), "ㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ik9"), "ㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ig"), "ㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("ig7"), "ㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ig8"), "ㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ig9"), "ㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("u"), "ㄨ");
  XCTAssertEqual(composer.cnvSequence("u7"), "ㄨˊ");
  XCTAssertEqual(composer.cnvSequence("u8"), "ㄨˇ");
  XCTAssertEqual(composer.cnvSequence("u9"), "ㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ua"), "ㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("ua7"), "ㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ua8"), "ㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ua9"), "ㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ua0"), "ㄨㄚ˙");
  XCTAssertEqual(composer.cnvSequence("uo"), "ㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("uo8"), "ㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("uo9"), "ㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("uy"), "ㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("uy8"), "ㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("uy9"), "ㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ut"), "ㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("ut7"), "ㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("ut8"), "ㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("ut9"), "ㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("um"), "ㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("um7"), "ㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("um8"), "ㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("um9"), "ㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("un"), "ㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("un7"), "ㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("un8"), "ㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("un9"), "ㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("uk"), "ㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("uk7"), "ㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("uk8"), "ㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("uk9"), "ㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ug"), "ㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("ug8"), "ㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ug9"), "ㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("v"), "ㄩ");
  XCTAssertEqual(composer.cnvSequence("v7"), "ㄩˊ");
  XCTAssertEqual(composer.cnvSequence("v8"), "ㄩˇ");
  XCTAssertEqual(composer.cnvSequence("v9"), "ㄩˋ");
  XCTAssertEqual(composer.cnvSequence("ve"), "ㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("ve8"), "ㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ve9"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vm"), "ㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("vm7"), "ㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vm8"), "ㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vm9"), "ㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vn"), "ㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("vn7"), "ㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vn8"), "ㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vn9"), "ㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vg"), "ㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("vg7"), "ㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vg8"), "ㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vg9"), "ㄩㄥˋ");
}

- (void)test_Zhuyin_AlvinLiuKeys {
  // Testing handleAlvinLiu()
  Composer c = Composer("", ofAlvinLiu);
  XCTAssertEqual(c.cnvSequence("kig"), "ㄎㄧㄤ");
  XCTAssertEqual(c.cnvSequence("giwf"), "ㄍㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("gin"), "ㄍㄧㄣ");
  XCTAssertEqual(c.cnvSequence("kig"), "ㄎㄧㄤ");
  XCTAssertEqual(c.cnvSequence("giwf"), "ㄍㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("gin"), "ㄍㄧㄣ");
  XCTAssertEqual(c.cnvSequence("bigf"), "ㄅㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("bigl"), "ㄅㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("dug"), "ㄉㄨㄤ");
  XCTAssertEqual(c.cnvSequence("ba"), "ㄅㄚ");
  XCTAssertEqual(c.cnvSequence("baf"), "ㄅㄚˊ");
  XCTAssertEqual(c.cnvSequence("baj"), "ㄅㄚˇ");
  XCTAssertEqual(c.cnvSequence("bal"), "ㄅㄚˋ");
  XCTAssertEqual(c.cnvSequence("bad"), "ㄅㄚ˙");
  XCTAssertEqual(c.cnvSequence("bo"), "ㄅㄛ");
  XCTAssertEqual(c.cnvSequence("bof"), "ㄅㄛˊ");
  XCTAssertEqual(c.cnvSequence("boj"), "ㄅㄛˇ");
  XCTAssertEqual(c.cnvSequence("bol"), "ㄅㄛˋ");
  XCTAssertEqual(c.cnvSequence("bod"), "ㄅㄛ˙");
  XCTAssertEqual(c.cnvSequence("bh"), "ㄅㄞ");
  XCTAssertEqual(c.cnvSequence("bhf"), "ㄅㄞˊ");
  XCTAssertEqual(c.cnvSequence("bhj"), "ㄅㄞˇ");
  XCTAssertEqual(c.cnvSequence("bhl"), "ㄅㄞˋ");
  XCTAssertEqual(c.cnvSequence("bhd"), "ㄅㄞ˙");
  XCTAssertEqual(c.cnvSequence("bk"), "ㄅㄟ");
  XCTAssertEqual(c.cnvSequence("bkj"), "ㄅㄟˇ");
  XCTAssertEqual(c.cnvSequence("bkl"), "ㄅㄟˋ");
  XCTAssertEqual(c.cnvSequence("bkd"), "ㄅㄟ˙");
  XCTAssertEqual(c.cnvSequence("bw"), "ㄅㄠ");
  XCTAssertEqual(c.cnvSequence("bwf"), "ㄅㄠˊ");
  XCTAssertEqual(c.cnvSequence("bwj"), "ㄅㄠˇ");
  XCTAssertEqual(c.cnvSequence("bwl"), "ㄅㄠˋ");
  XCTAssertEqual(c.cnvSequence("bb"), "ㄅㄢ");
  XCTAssertEqual(c.cnvSequence("bbj"), "ㄅㄢˇ");
  XCTAssertEqual(c.cnvSequence("bbl"), "ㄅㄢˋ");
  XCTAssertEqual(c.cnvSequence("bn"), "ㄅㄣ");
  XCTAssertEqual(c.cnvSequence("bnj"), "ㄅㄣˇ");
  XCTAssertEqual(c.cnvSequence("bnl"), "ㄅㄣˋ");
  XCTAssertEqual(c.cnvSequence("bg"), "ㄅㄤ");
  XCTAssertEqual(c.cnvSequence("bgj"), "ㄅㄤˇ");
  XCTAssertEqual(c.cnvSequence("bgl"), "ㄅㄤˋ");
  XCTAssertEqual(c.cnvSequence("bm"), "ㄅㄥ");
  XCTAssertEqual(c.cnvSequence("bmf"), "ㄅㄥˊ");
  XCTAssertEqual(c.cnvSequence("bmj"), "ㄅㄥˇ");
  XCTAssertEqual(c.cnvSequence("bml"), "ㄅㄥˋ");
  XCTAssertEqual(c.cnvSequence("bi"), "ㄅㄧ");
  XCTAssertEqual(c.cnvSequence("bif"), "ㄅㄧˊ");
  XCTAssertEqual(c.cnvSequence("bij"), "ㄅㄧˇ");
  XCTAssertEqual(c.cnvSequence("bil"), "ㄅㄧˋ");
  XCTAssertEqual(c.cnvSequence("bie"), "ㄅㄧㄝ");
  XCTAssertEqual(c.cnvSequence("bief"), "ㄅㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("biej"), "ㄅㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("biel"), "ㄅㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("biw"), "ㄅㄧㄠ");
  XCTAssertEqual(c.cnvSequence("biwj"), "ㄅㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("biwl"), "ㄅㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("bib"), "ㄅㄧㄢ");
  XCTAssertEqual(c.cnvSequence("bibf"), "ㄅㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("bibj"), "ㄅㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("bibl"), "ㄅㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("bin"), "ㄅㄧㄣ");
  XCTAssertEqual(c.cnvSequence("binj"), "ㄅㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("binl"), "ㄅㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("bim"), "ㄅㄧㄥ");
  XCTAssertEqual(c.cnvSequence("bimj"), "ㄅㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("biml"), "ㄅㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("bu"), "ㄅㄨ");
  XCTAssertEqual(c.cnvSequence("buf"), "ㄅㄨˊ");
  XCTAssertEqual(c.cnvSequence("buj"), "ㄅㄨˇ");
  XCTAssertEqual(c.cnvSequence("bul"), "ㄅㄨˋ");
  XCTAssertEqual(c.cnvSequence("pa"), "ㄆㄚ");
  XCTAssertEqual(c.cnvSequence("paf"), "ㄆㄚˊ");
  XCTAssertEqual(c.cnvSequence("paj"), "ㄆㄚˇ");
  XCTAssertEqual(c.cnvSequence("pal"), "ㄆㄚˋ");
  XCTAssertEqual(c.cnvSequence("pad"), "ㄆㄚ˙");
  XCTAssertEqual(c.cnvSequence("po"), "ㄆㄛ");
  XCTAssertEqual(c.cnvSequence("pof"), "ㄆㄛˊ");
  XCTAssertEqual(c.cnvSequence("poj"), "ㄆㄛˇ");
  XCTAssertEqual(c.cnvSequence("pol"), "ㄆㄛˋ");
  XCTAssertEqual(c.cnvSequence("ph"), "ㄆㄞ");
  XCTAssertEqual(c.cnvSequence("phf"), "ㄆㄞˊ");
  XCTAssertEqual(c.cnvSequence("phj"), "ㄆㄞˇ");
  XCTAssertEqual(c.cnvSequence("phl"), "ㄆㄞˋ");
  XCTAssertEqual(c.cnvSequence("pk"), "ㄆㄟ");
  XCTAssertEqual(c.cnvSequence("pkf"), "ㄆㄟˊ");
  XCTAssertEqual(c.cnvSequence("pkj"), "ㄆㄟˇ");
  XCTAssertEqual(c.cnvSequence("pkl"), "ㄆㄟˋ");
  XCTAssertEqual(c.cnvSequence("pw"), "ㄆㄠ");
  XCTAssertEqual(c.cnvSequence("pwf"), "ㄆㄠˊ");
  XCTAssertEqual(c.cnvSequence("pwj"), "ㄆㄠˇ");
  XCTAssertEqual(c.cnvSequence("pwl"), "ㄆㄠˋ");
  XCTAssertEqual(c.cnvSequence("pv"), "ㄆㄡ");
  XCTAssertEqual(c.cnvSequence("pvf"), "ㄆㄡˊ");
  XCTAssertEqual(c.cnvSequence("pvj"), "ㄆㄡˇ");
  XCTAssertEqual(c.cnvSequence("pvl"), "ㄆㄡˋ");
  XCTAssertEqual(c.cnvSequence("pb"), "ㄆㄢ");
  XCTAssertEqual(c.cnvSequence("pbf"), "ㄆㄢˊ");
  XCTAssertEqual(c.cnvSequence("pbj"), "ㄆㄢˇ");
  XCTAssertEqual(c.cnvSequence("pbl"), "ㄆㄢˋ");
  XCTAssertEqual(c.cnvSequence("pn"), "ㄆㄣ");
  XCTAssertEqual(c.cnvSequence("pnf"), "ㄆㄣˊ");
  XCTAssertEqual(c.cnvSequence("pnj"), "ㄆㄣˇ");
  XCTAssertEqual(c.cnvSequence("pnl"), "ㄆㄣˋ");
  XCTAssertEqual(c.cnvSequence("pg"), "ㄆㄤ");
  XCTAssertEqual(c.cnvSequence("pgf"), "ㄆㄤˊ");
  XCTAssertEqual(c.cnvSequence("pgj"), "ㄆㄤˇ");
  XCTAssertEqual(c.cnvSequence("pgl"), "ㄆㄤˋ");
  XCTAssertEqual(c.cnvSequence("pm"), "ㄆㄥ");
  XCTAssertEqual(c.cnvSequence("pmf"), "ㄆㄥˊ");
  XCTAssertEqual(c.cnvSequence("pmj"), "ㄆㄥˇ");
  XCTAssertEqual(c.cnvSequence("pml"), "ㄆㄥˋ");
  XCTAssertEqual(c.cnvSequence("pi"), "ㄆㄧ");
  XCTAssertEqual(c.cnvSequence("pif"), "ㄆㄧˊ");
  XCTAssertEqual(c.cnvSequence("pij"), "ㄆㄧˇ");
  XCTAssertEqual(c.cnvSequence("pil"), "ㄆㄧˋ");
  XCTAssertEqual(c.cnvSequence("pia"), "ㄆㄧㄚ");
  XCTAssertEqual(c.cnvSequence("pie"), "ㄆㄧㄝ");
  XCTAssertEqual(c.cnvSequence("piej"), "ㄆㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("piel"), "ㄆㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("piw"), "ㄆㄧㄠ");
  XCTAssertEqual(c.cnvSequence("piwf"), "ㄆㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("piwj"), "ㄆㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("piwl"), "ㄆㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("pib"), "ㄆㄧㄢ");
  XCTAssertEqual(c.cnvSequence("pibf"), "ㄆㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("pibj"), "ㄆㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("pibl"), "ㄆㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("pin"), "ㄆㄧㄣ");
  XCTAssertEqual(c.cnvSequence("pinf"), "ㄆㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("pinj"), "ㄆㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("pinl"), "ㄆㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("pim"), "ㄆㄧㄥ");
  XCTAssertEqual(c.cnvSequence("pimf"), "ㄆㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("pimj"), "ㄆㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("piml"), "ㄆㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("pu"), "ㄆㄨ");
  XCTAssertEqual(c.cnvSequence("puf"), "ㄆㄨˊ");
  XCTAssertEqual(c.cnvSequence("puj"), "ㄆㄨˇ");
  XCTAssertEqual(c.cnvSequence("pul"), "ㄆㄨˋ");
  XCTAssertEqual(c.cnvSequence("ma"), "ㄇㄚ");
  XCTAssertEqual(c.cnvSequence("maf"), "ㄇㄚˊ");
  XCTAssertEqual(c.cnvSequence("maj"), "ㄇㄚˇ");
  XCTAssertEqual(c.cnvSequence("mal"), "ㄇㄚˋ");
  XCTAssertEqual(c.cnvSequence("mad"), "ㄇㄚ˙");
  XCTAssertEqual(c.cnvSequence("mo"), "ㄇㄛ");
  XCTAssertEqual(c.cnvSequence("mof"), "ㄇㄛˊ");
  XCTAssertEqual(c.cnvSequence("moj"), "ㄇㄛˇ");
  XCTAssertEqual(c.cnvSequence("mol"), "ㄇㄛˋ");
  XCTAssertEqual(c.cnvSequence("mod"), "ㄇㄛ˙");
  XCTAssertEqual(c.cnvSequence("me"), "ㄇㄜ");
  XCTAssertEqual(c.cnvSequence("mel"), "ㄇㄜˋ");
  XCTAssertEqual(c.cnvSequence("med"), "ㄇㄜ˙");
  XCTAssertEqual(c.cnvSequence("mh"), "ㄇㄞ");
  XCTAssertEqual(c.cnvSequence("mhf"), "ㄇㄞˊ");
  XCTAssertEqual(c.cnvSequence("mhj"), "ㄇㄞˇ");
  XCTAssertEqual(c.cnvSequence("mhl"), "ㄇㄞˋ");
  XCTAssertEqual(c.cnvSequence("mkf"), "ㄇㄟˊ");
  XCTAssertEqual(c.cnvSequence("mkj"), "ㄇㄟˇ");
  XCTAssertEqual(c.cnvSequence("mkl"), "ㄇㄟˋ");
  XCTAssertEqual(c.cnvSequence("mw"), "ㄇㄠ");
  XCTAssertEqual(c.cnvSequence("mwf"), "ㄇㄠˊ");
  XCTAssertEqual(c.cnvSequence("mwj"), "ㄇㄠˇ");
  XCTAssertEqual(c.cnvSequence("mwl"), "ㄇㄠˋ");
  XCTAssertEqual(c.cnvSequence("mvf"), "ㄇㄡˊ");
  XCTAssertEqual(c.cnvSequence("mvj"), "ㄇㄡˇ");
  XCTAssertEqual(c.cnvSequence("mvl"), "ㄇㄡˋ");
  XCTAssertEqual(c.cnvSequence("mb"), "ㄇㄢ");
  XCTAssertEqual(c.cnvSequence("mbf"), "ㄇㄢˊ");
  XCTAssertEqual(c.cnvSequence("mbj"), "ㄇㄢˇ");
  XCTAssertEqual(c.cnvSequence("mbl"), "ㄇㄢˋ");
  XCTAssertEqual(c.cnvSequence("mn"), "ㄇㄣ");
  XCTAssertEqual(c.cnvSequence("mnf"), "ㄇㄣˊ");
  XCTAssertEqual(c.cnvSequence("mnj"), "ㄇㄣˇ");
  XCTAssertEqual(c.cnvSequence("mnl"), "ㄇㄣˋ");
  XCTAssertEqual(c.cnvSequence("mnd"), "ㄇㄣ˙");
  XCTAssertEqual(c.cnvSequence("mg"), "ㄇㄤ");
  XCTAssertEqual(c.cnvSequence("mgf"), "ㄇㄤˊ");
  XCTAssertEqual(c.cnvSequence("mgj"), "ㄇㄤˇ");
  XCTAssertEqual(c.cnvSequence("mgl"), "ㄇㄤˋ");
  XCTAssertEqual(c.cnvSequence("mm"), "ㄇㄥ");
  XCTAssertEqual(c.cnvSequence("mmf"), "ㄇㄥˊ");
  XCTAssertEqual(c.cnvSequence("mmj"), "ㄇㄥˇ");
  XCTAssertEqual(c.cnvSequence("mml"), "ㄇㄥˋ");
  XCTAssertEqual(c.cnvSequence("mi"), "ㄇㄧ");
  XCTAssertEqual(c.cnvSequence("mif"), "ㄇㄧˊ");
  XCTAssertEqual(c.cnvSequence("mij"), "ㄇㄧˇ");
  XCTAssertEqual(c.cnvSequence("mil"), "ㄇㄧˋ");
  XCTAssertEqual(c.cnvSequence("mie"), "ㄇㄧㄝ");
  XCTAssertEqual(c.cnvSequence("mief"), "ㄇㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("miel"), "ㄇㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("miw"), "ㄇㄧㄠ");
  XCTAssertEqual(c.cnvSequence("miwf"), "ㄇㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("miwj"), "ㄇㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("miwl"), "ㄇㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("mivf"), "ㄇㄧㄡˊ");
  XCTAssertEqual(c.cnvSequence("mivj"), "ㄇㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("mivl"), "ㄇㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("mib"), "ㄇㄧㄢ");
  XCTAssertEqual(c.cnvSequence("mibf"), "ㄇㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("mibj"), "ㄇㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("mibl"), "ㄇㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("min"), "ㄇㄧㄣ");
  XCTAssertEqual(c.cnvSequence("minf"), "ㄇㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("minj"), "ㄇㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("mimf"), "ㄇㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("mimj"), "ㄇㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("miml"), "ㄇㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("muf"), "ㄇㄨˊ");
  XCTAssertEqual(c.cnvSequence("muj"), "ㄇㄨˇ");
  XCTAssertEqual(c.cnvSequence("mul"), "ㄇㄨˋ");
  XCTAssertEqual(c.cnvSequence("fa"), "ㄈㄚ");
  XCTAssertEqual(c.cnvSequence("faf"), "ㄈㄚˊ");
  XCTAssertEqual(c.cnvSequence("faj"), "ㄈㄚˇ");
  XCTAssertEqual(c.cnvSequence("fal"), "ㄈㄚˋ");
  XCTAssertEqual(c.cnvSequence("fof"), "ㄈㄛˊ");
  XCTAssertEqual(c.cnvSequence("fk"), "ㄈㄟ");
  XCTAssertEqual(c.cnvSequence("fkf"), "ㄈㄟˊ");
  XCTAssertEqual(c.cnvSequence("fkj"), "ㄈㄟˇ");
  XCTAssertEqual(c.cnvSequence("fkl"), "ㄈㄟˋ");
  XCTAssertEqual(c.cnvSequence("fv"), "ㄈㄡ");
  XCTAssertEqual(c.cnvSequence("fvf"), "ㄈㄡˊ");
  XCTAssertEqual(c.cnvSequence("fvj"), "ㄈㄡˇ");
  XCTAssertEqual(c.cnvSequence("fvl"), "ㄈㄡˋ");
  XCTAssertEqual(c.cnvSequence("fb"), "ㄈㄢ");
  XCTAssertEqual(c.cnvSequence("fbf"), "ㄈㄢˊ");
  XCTAssertEqual(c.cnvSequence("fbj"), "ㄈㄢˇ");
  XCTAssertEqual(c.cnvSequence("fbl"), "ㄈㄢˋ");
  XCTAssertEqual(c.cnvSequence("fn"), "ㄈㄣ");
  XCTAssertEqual(c.cnvSequence("fnf"), "ㄈㄣˊ");
  XCTAssertEqual(c.cnvSequence("fnj"), "ㄈㄣˇ");
  XCTAssertEqual(c.cnvSequence("fnl"), "ㄈㄣˋ");
  XCTAssertEqual(c.cnvSequence("fnd"), "ㄈㄣ˙");
  XCTAssertEqual(c.cnvSequence("fg"), "ㄈㄤ");
  XCTAssertEqual(c.cnvSequence("fgf"), "ㄈㄤˊ");
  XCTAssertEqual(c.cnvSequence("fgj"), "ㄈㄤˇ");
  XCTAssertEqual(c.cnvSequence("fgl"), "ㄈㄤˋ");
  XCTAssertEqual(c.cnvSequence("fm"), "ㄈㄥ");
  XCTAssertEqual(c.cnvSequence("fmf"), "ㄈㄥˊ");
  XCTAssertEqual(c.cnvSequence("fmj"), "ㄈㄥˇ");
  XCTAssertEqual(c.cnvSequence("fml"), "ㄈㄥˋ");
  XCTAssertEqual(c.cnvSequence("fiwl"), "ㄈㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("fu"), "ㄈㄨ");
  XCTAssertEqual(c.cnvSequence("fuf"), "ㄈㄨˊ");
  XCTAssertEqual(c.cnvSequence("fuj"), "ㄈㄨˇ");
  XCTAssertEqual(c.cnvSequence("ful"), "ㄈㄨˋ");
  XCTAssertEqual(c.cnvSequence("da"), "ㄉㄚ");
  XCTAssertEqual(c.cnvSequence("daf"), "ㄉㄚˊ");
  XCTAssertEqual(c.cnvSequence("daj"), "ㄉㄚˇ");
  XCTAssertEqual(c.cnvSequence("dal"), "ㄉㄚˋ");
  XCTAssertEqual(c.cnvSequence("dad"), "ㄉㄚ˙");
  XCTAssertEqual(c.cnvSequence("de"), "ㄉㄜ");
  XCTAssertEqual(c.cnvSequence("def"), "ㄉㄜˊ");
  XCTAssertEqual(c.cnvSequence("ded"), "ㄉㄜ˙");
  XCTAssertEqual(c.cnvSequence("dh"), "ㄉㄞ");
  XCTAssertEqual(c.cnvSequence("dhj"), "ㄉㄞˇ");
  XCTAssertEqual(c.cnvSequence("dhl"), "ㄉㄞˋ");
  XCTAssertEqual(c.cnvSequence("dkj"), "ㄉㄟˇ");
  XCTAssertEqual(c.cnvSequence("dw"), "ㄉㄠ");
  XCTAssertEqual(c.cnvSequence("dwf"), "ㄉㄠˊ");
  XCTAssertEqual(c.cnvSequence("dwj"), "ㄉㄠˇ");
  XCTAssertEqual(c.cnvSequence("dwl"), "ㄉㄠˋ");
  XCTAssertEqual(c.cnvSequence("dv"), "ㄉㄡ");
  XCTAssertEqual(c.cnvSequence("dvf"), "ㄉㄡˊ");
  XCTAssertEqual(c.cnvSequence("dvj"), "ㄉㄡˇ");
  XCTAssertEqual(c.cnvSequence("dvl"), "ㄉㄡˋ");
  XCTAssertEqual(c.cnvSequence("db"), "ㄉㄢ");
  XCTAssertEqual(c.cnvSequence("dbj"), "ㄉㄢˇ");
  XCTAssertEqual(c.cnvSequence("dbl"), "ㄉㄢˋ");
  XCTAssertEqual(c.cnvSequence("dnl"), "ㄉㄣˋ");
  XCTAssertEqual(c.cnvSequence("dg"), "ㄉㄤ");
  XCTAssertEqual(c.cnvSequence("dgj"), "ㄉㄤˇ");
  XCTAssertEqual(c.cnvSequence("dgl"), "ㄉㄤˋ");
  XCTAssertEqual(c.cnvSequence("dm"), "ㄉㄥ");
  XCTAssertEqual(c.cnvSequence("dmj"), "ㄉㄥˇ");
  XCTAssertEqual(c.cnvSequence("dml"), "ㄉㄥˋ");
  XCTAssertEqual(c.cnvSequence("di"), "ㄉㄧ");
  XCTAssertEqual(c.cnvSequence("dif"), "ㄉㄧˊ");
  XCTAssertEqual(c.cnvSequence("dij"), "ㄉㄧˇ");
  XCTAssertEqual(c.cnvSequence("dil"), "ㄉㄧˋ");
  XCTAssertEqual(c.cnvSequence("diaj"), "ㄉㄧㄚˇ");
  XCTAssertEqual(c.cnvSequence("die"), "ㄉㄧㄝ");
  XCTAssertEqual(c.cnvSequence("dief"), "ㄉㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("diej"), "ㄉㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("diel"), "ㄉㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("diw"), "ㄉㄧㄠ");
  XCTAssertEqual(c.cnvSequence("diwj"), "ㄉㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("diwl"), "ㄉㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("div"), "ㄉㄧㄡ");
  XCTAssertEqual(c.cnvSequence("dib"), "ㄉㄧㄢ");
  XCTAssertEqual(c.cnvSequence("dibf"), "ㄉㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("dibj"), "ㄉㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("dibl"), "ㄉㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("dim"), "ㄉㄧㄥ");
  XCTAssertEqual(c.cnvSequence("dimf"), "ㄉㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("dimj"), "ㄉㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("diml"), "ㄉㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("du"), "ㄉㄨ");
  XCTAssertEqual(c.cnvSequence("duf"), "ㄉㄨˊ");
  XCTAssertEqual(c.cnvSequence("duj"), "ㄉㄨˇ");
  XCTAssertEqual(c.cnvSequence("dul"), "ㄉㄨˋ");
  XCTAssertEqual(c.cnvSequence("duo"), "ㄉㄨㄛ");
  XCTAssertEqual(c.cnvSequence("duof"), "ㄉㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("duoj"), "ㄉㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("duol"), "ㄉㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("duod"), "ㄉㄨㄛ˙");
  XCTAssertEqual(c.cnvSequence("duk"), "ㄉㄨㄟ");
  XCTAssertEqual(c.cnvSequence("dukj"), "ㄉㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("dukl"), "ㄉㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("dub"), "ㄉㄨㄢ");
  XCTAssertEqual(c.cnvSequence("dubj"), "ㄉㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("dubl"), "ㄉㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("dun"), "ㄉㄨㄣ");
  XCTAssertEqual(c.cnvSequence("dunj"), "ㄉㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("dunl"), "ㄉㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("dum"), "ㄉㄨㄥ");
  XCTAssertEqual(c.cnvSequence("dumj"), "ㄉㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("duml"), "ㄉㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("ta"), "ㄊㄚ");
  XCTAssertEqual(c.cnvSequence("taj"), "ㄊㄚˇ");
  XCTAssertEqual(c.cnvSequence("tal"), "ㄊㄚˋ");
  XCTAssertEqual(c.cnvSequence("tel"), "ㄊㄜˋ");
  XCTAssertEqual(c.cnvSequence("th"), "ㄊㄞ");
  XCTAssertEqual(c.cnvSequence("thf"), "ㄊㄞˊ");
  XCTAssertEqual(c.cnvSequence("thj"), "ㄊㄞˇ");
  XCTAssertEqual(c.cnvSequence("thl"), "ㄊㄞˋ");
  XCTAssertEqual(c.cnvSequence("thd"), "ㄊㄞ˙");
  XCTAssertEqual(c.cnvSequence("tw"), "ㄊㄠ");
  XCTAssertEqual(c.cnvSequence("twf"), "ㄊㄠˊ");
  XCTAssertEqual(c.cnvSequence("twj"), "ㄊㄠˇ");
  XCTAssertEqual(c.cnvSequence("twl"), "ㄊㄠˋ");
  XCTAssertEqual(c.cnvSequence("twd"), "ㄊㄠ˙");
  XCTAssertEqual(c.cnvSequence("tv"), "ㄊㄡ");
  XCTAssertEqual(c.cnvSequence("tvf"), "ㄊㄡˊ");
  XCTAssertEqual(c.cnvSequence("tvj"), "ㄊㄡˇ");
  XCTAssertEqual(c.cnvSequence("tvl"), "ㄊㄡˋ");
  XCTAssertEqual(c.cnvSequence("tvd"), "ㄊㄡ˙");
  XCTAssertEqual(c.cnvSequence("tb"), "ㄊㄢ");
  XCTAssertEqual(c.cnvSequence("tbf"), "ㄊㄢˊ");
  XCTAssertEqual(c.cnvSequence("tbj"), "ㄊㄢˇ");
  XCTAssertEqual(c.cnvSequence("tbl"), "ㄊㄢˋ");
  XCTAssertEqual(c.cnvSequence("tg"), "ㄊㄤ");
  XCTAssertEqual(c.cnvSequence("tgf"), "ㄊㄤˊ");
  XCTAssertEqual(c.cnvSequence("tgj"), "ㄊㄤˇ");
  XCTAssertEqual(c.cnvSequence("tgl"), "ㄊㄤˋ");
  XCTAssertEqual(c.cnvSequence("tm"), "ㄊㄥ");
  XCTAssertEqual(c.cnvSequence("tmf"), "ㄊㄥˊ");
  XCTAssertEqual(c.cnvSequence("tml"), "ㄊㄥˋ");
  XCTAssertEqual(c.cnvSequence("ti"), "ㄊㄧ");
  XCTAssertEqual(c.cnvSequence("tif"), "ㄊㄧˊ");
  XCTAssertEqual(c.cnvSequence("tij"), "ㄊㄧˇ");
  XCTAssertEqual(c.cnvSequence("til"), "ㄊㄧˋ");
  XCTAssertEqual(c.cnvSequence("tie"), "ㄊㄧㄝ");
  XCTAssertEqual(c.cnvSequence("tief"), "ㄊㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("tiej"), "ㄊㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("tiel"), "ㄊㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("tiw"), "ㄊㄧㄠ");
  XCTAssertEqual(c.cnvSequence("tiwf"), "ㄊㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("tiwj"), "ㄊㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("tiwl"), "ㄊㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("tib"), "ㄊㄧㄢ");
  XCTAssertEqual(c.cnvSequence("tibf"), "ㄊㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("tibj"), "ㄊㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("tibl"), "ㄊㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("tim"), "ㄊㄧㄥ");
  XCTAssertEqual(c.cnvSequence("timf"), "ㄊㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("timj"), "ㄊㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("timl"), "ㄊㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("tu"), "ㄊㄨ");
  XCTAssertEqual(c.cnvSequence("tuf"), "ㄊㄨˊ");
  XCTAssertEqual(c.cnvSequence("tuj"), "ㄊㄨˇ");
  XCTAssertEqual(c.cnvSequence("tul"), "ㄊㄨˋ");
  XCTAssertEqual(c.cnvSequence("tuo"), "ㄊㄨㄛ");
  XCTAssertEqual(c.cnvSequence("tuof"), "ㄊㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("tuoj"), "ㄊㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("tuol"), "ㄊㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("tuk"), "ㄊㄨㄟ");
  XCTAssertEqual(c.cnvSequence("tukf"), "ㄊㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("tukj"), "ㄊㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("tukl"), "ㄊㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("tub"), "ㄊㄨㄢ");
  XCTAssertEqual(c.cnvSequence("tubf"), "ㄊㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("tubj"), "ㄊㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("tubl"), "ㄊㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("tun"), "ㄊㄨㄣ");
  XCTAssertEqual(c.cnvSequence("tunf"), "ㄊㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("tunj"), "ㄊㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("tunl"), "ㄊㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("tum"), "ㄊㄨㄥ");
  XCTAssertEqual(c.cnvSequence("tumf"), "ㄊㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("tumj"), "ㄊㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("tuml"), "ㄊㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("na"), "ㄋㄚ");
  XCTAssertEqual(c.cnvSequence("naf"), "ㄋㄚˊ");
  XCTAssertEqual(c.cnvSequence("naj"), "ㄋㄚˇ");
  XCTAssertEqual(c.cnvSequence("nal"), "ㄋㄚˋ");
  XCTAssertEqual(c.cnvSequence("nad"), "ㄋㄚ˙");
  XCTAssertEqual(c.cnvSequence("nel"), "ㄋㄜˋ");
  XCTAssertEqual(c.cnvSequence("ned"), "ㄋㄜ˙");
  XCTAssertEqual(c.cnvSequence("nhf"), "ㄋㄞˊ");
  XCTAssertEqual(c.cnvSequence("nhj"), "ㄋㄞˇ");
  XCTAssertEqual(c.cnvSequence("nhl"), "ㄋㄞˋ");
  XCTAssertEqual(c.cnvSequence("nkf"), "ㄋㄟˊ");
  XCTAssertEqual(c.cnvSequence("nkj"), "ㄋㄟˇ");
  XCTAssertEqual(c.cnvSequence("nkl"), "ㄋㄟˋ");
  XCTAssertEqual(c.cnvSequence("nw"), "ㄋㄠ");
  XCTAssertEqual(c.cnvSequence("nwf"), "ㄋㄠˊ");
  XCTAssertEqual(c.cnvSequence("nwj"), "ㄋㄠˇ");
  XCTAssertEqual(c.cnvSequence("nwl"), "ㄋㄠˋ");
  XCTAssertEqual(c.cnvSequence("nvf"), "ㄋㄡˊ");
  XCTAssertEqual(c.cnvSequence("nvj"), "ㄋㄡˇ");
  XCTAssertEqual(c.cnvSequence("nvl"), "ㄋㄡˋ");
  XCTAssertEqual(c.cnvSequence("nb"), "ㄋㄢ");
  XCTAssertEqual(c.cnvSequence("nbf"), "ㄋㄢˊ");
  XCTAssertEqual(c.cnvSequence("nbj"), "ㄋㄢˇ");
  XCTAssertEqual(c.cnvSequence("nbl"), "ㄋㄢˋ");
  XCTAssertEqual(c.cnvSequence("nnj"), "ㄋㄣˇ");
  XCTAssertEqual(c.cnvSequence("nnl"), "ㄋㄣˋ");
  XCTAssertEqual(c.cnvSequence("ng"), "ㄋㄤ");
  XCTAssertEqual(c.cnvSequence("ngf"), "ㄋㄤˊ");
  XCTAssertEqual(c.cnvSequence("ngj"), "ㄋㄤˇ");
  XCTAssertEqual(c.cnvSequence("ngl"), "ㄋㄤˋ");
  XCTAssertEqual(c.cnvSequence("ngd"), "ㄋㄤ˙");
  XCTAssertEqual(c.cnvSequence("nmf"), "ㄋㄥˊ");
  XCTAssertEqual(c.cnvSequence("nmj"), "ㄋㄥˇ");
  XCTAssertEqual(c.cnvSequence("ni"), "ㄋㄧ");
  XCTAssertEqual(c.cnvSequence("nif"), "ㄋㄧˊ");
  XCTAssertEqual(c.cnvSequence("nij"), "ㄋㄧˇ");
  XCTAssertEqual(c.cnvSequence("nil"), "ㄋㄧˋ");
  XCTAssertEqual(c.cnvSequence("nie"), "ㄋㄧㄝ");
  XCTAssertEqual(c.cnvSequence("nief"), "ㄋㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("niel"), "ㄋㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("niwj"), "ㄋㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("niwl"), "ㄋㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("niv"), "ㄋㄧㄡ");
  XCTAssertEqual(c.cnvSequence("nivf"), "ㄋㄧㄡˊ");
  XCTAssertEqual(c.cnvSequence("nivj"), "ㄋㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("nivl"), "ㄋㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("nib"), "ㄋㄧㄢ");
  XCTAssertEqual(c.cnvSequence("nibf"), "ㄋㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("nibj"), "ㄋㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("nibl"), "ㄋㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("nin"), "ㄋㄧㄣ");
  XCTAssertEqual(c.cnvSequence("ninf"), "ㄋㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("ninj"), "ㄋㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("ninl"), "ㄋㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("nigf"), "ㄋㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("nigj"), "ㄋㄧㄤˇ");
  XCTAssertEqual(c.cnvSequence("nigl"), "ㄋㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("nimf"), "ㄋㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("nimj"), "ㄋㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("niml"), "ㄋㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("nuf"), "ㄋㄨˊ");
  XCTAssertEqual(c.cnvSequence("nuj"), "ㄋㄨˇ");
  XCTAssertEqual(c.cnvSequence("nul"), "ㄋㄨˋ");
  XCTAssertEqual(c.cnvSequence("nuof"), "ㄋㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("nuoj"), "ㄋㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("nuol"), "ㄋㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("nukf"), "ㄋㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("nubf"), "ㄋㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("nubj"), "ㄋㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("nubl"), "ㄋㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("nunf"), "ㄋㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("numf"), "ㄋㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("numj"), "ㄋㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("numl"), "ㄋㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("nyf"), "ㄋㄩˊ");
  XCTAssertEqual(c.cnvSequence("nyj"), "ㄋㄩˇ");
  XCTAssertEqual(c.cnvSequence("nyl"), "ㄋㄩˋ");
  XCTAssertEqual(c.cnvSequence("nyel"), "ㄋㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("la"), "ㄌㄚ");
  XCTAssertEqual(c.cnvSequence("laf"), "ㄌㄚˊ");
  XCTAssertEqual(c.cnvSequence("laj"), "ㄌㄚˇ");
  XCTAssertEqual(c.cnvSequence("lal"), "ㄌㄚˋ");
  XCTAssertEqual(c.cnvSequence("lad"), "ㄌㄚ˙");
  XCTAssertEqual(c.cnvSequence("lo"), "ㄌㄛ");
  XCTAssertEqual(c.cnvSequence("lod"), "ㄌㄛ˙");
  XCTAssertEqual(c.cnvSequence("le"), "ㄌㄜ");
  XCTAssertEqual(c.cnvSequence("lef"), "ㄌㄜˊ");
  XCTAssertEqual(c.cnvSequence("lel"), "ㄌㄜˋ");
  XCTAssertEqual(c.cnvSequence("led"), "ㄌㄜ˙");
  XCTAssertEqual(c.cnvSequence("lhf"), "ㄌㄞˊ");
  XCTAssertEqual(c.cnvSequence("lhj"), "ㄌㄞˇ");
  XCTAssertEqual(c.cnvSequence("lhl"), "ㄌㄞˋ");
  XCTAssertEqual(c.cnvSequence("lk"), "ㄌㄟ");
  XCTAssertEqual(c.cnvSequence("lkf"), "ㄌㄟˊ");
  XCTAssertEqual(c.cnvSequence("lkj"), "ㄌㄟˇ");
  XCTAssertEqual(c.cnvSequence("lkl"), "ㄌㄟˋ");
  XCTAssertEqual(c.cnvSequence("lkd"), "ㄌㄟ˙");
  XCTAssertEqual(c.cnvSequence("lw"), "ㄌㄠ");
  XCTAssertEqual(c.cnvSequence("lwf"), "ㄌㄠˊ");
  XCTAssertEqual(c.cnvSequence("lwj"), "ㄌㄠˇ");
  XCTAssertEqual(c.cnvSequence("lwl"), "ㄌㄠˋ");
  XCTAssertEqual(c.cnvSequence("lv"), "ㄌㄡ");
  XCTAssertEqual(c.cnvSequence("lvf"), "ㄌㄡˊ");
  XCTAssertEqual(c.cnvSequence("lvj"), "ㄌㄡˇ");
  XCTAssertEqual(c.cnvSequence("lvl"), "ㄌㄡˋ");
  XCTAssertEqual(c.cnvSequence("lvd"), "ㄌㄡ˙");
  XCTAssertEqual(c.cnvSequence("lbf"), "ㄌㄢˊ");
  XCTAssertEqual(c.cnvSequence("lbj"), "ㄌㄢˇ");
  XCTAssertEqual(c.cnvSequence("lbl"), "ㄌㄢˋ");
  XCTAssertEqual(c.cnvSequence("lg"), "ㄌㄤ");
  XCTAssertEqual(c.cnvSequence("lgf"), "ㄌㄤˊ");
  XCTAssertEqual(c.cnvSequence("lgj"), "ㄌㄤˇ");
  XCTAssertEqual(c.cnvSequence("lgl"), "ㄌㄤˋ");
  XCTAssertEqual(c.cnvSequence("lm"), "ㄌㄥ");
  XCTAssertEqual(c.cnvSequence("lmf"), "ㄌㄥˊ");
  XCTAssertEqual(c.cnvSequence("lmj"), "ㄌㄥˇ");
  XCTAssertEqual(c.cnvSequence("lml"), "ㄌㄥˋ");
  XCTAssertEqual(c.cnvSequence("li"), "ㄌㄧ");
  XCTAssertEqual(c.cnvSequence("lif"), "ㄌㄧˊ");
  XCTAssertEqual(c.cnvSequence("lij"), "ㄌㄧˇ");
  XCTAssertEqual(c.cnvSequence("lil"), "ㄌㄧˋ");
  XCTAssertEqual(c.cnvSequence("lid"), "ㄌㄧ˙");
  XCTAssertEqual(c.cnvSequence("liaj"), "ㄌㄧㄚˇ");
  XCTAssertEqual(c.cnvSequence("lie"), "ㄌㄧㄝ");
  XCTAssertEqual(c.cnvSequence("lief"), "ㄌㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("liej"), "ㄌㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("liel"), "ㄌㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("liw"), "ㄌㄧㄠ");
  XCTAssertEqual(c.cnvSequence("liwf"), "ㄌㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("liwj"), "ㄌㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("liwl"), "ㄌㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("liv"), "ㄌㄧㄡ");
  XCTAssertEqual(c.cnvSequence("livf"), "ㄌㄧㄡˊ");
  XCTAssertEqual(c.cnvSequence("livj"), "ㄌㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("livl"), "ㄌㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("lib"), "ㄌㄧㄢ");
  XCTAssertEqual(c.cnvSequence("libf"), "ㄌㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("libj"), "ㄌㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("libl"), "ㄌㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("linf"), "ㄌㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("linj"), "ㄌㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("linl"), "ㄌㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("ligf"), "ㄌㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("ligj"), "ㄌㄧㄤˇ");
  XCTAssertEqual(c.cnvSequence("ligl"), "ㄌㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("lim"), "ㄌㄧㄥ");
  XCTAssertEqual(c.cnvSequence("limf"), "ㄌㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("limj"), "ㄌㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("liml"), "ㄌㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("lu"), "ㄌㄨ");
  XCTAssertEqual(c.cnvSequence("luf"), "ㄌㄨˊ");
  XCTAssertEqual(c.cnvSequence("luj"), "ㄌㄨˇ");
  XCTAssertEqual(c.cnvSequence("lul"), "ㄌㄨˋ");
  XCTAssertEqual(c.cnvSequence("luo"), "ㄌㄨㄛ");
  XCTAssertEqual(c.cnvSequence("luof"), "ㄌㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("luoj"), "ㄌㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("luol"), "ㄌㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("luod"), "ㄌㄨㄛ˙");
  XCTAssertEqual(c.cnvSequence("lubf"), "ㄌㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("lubj"), "ㄌㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("lubl"), "ㄌㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("lun"), "ㄌㄨㄣ");
  XCTAssertEqual(c.cnvSequence("lunf"), "ㄌㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("lunj"), "ㄌㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("lunl"), "ㄌㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("lum"), "ㄌㄨㄥ");
  XCTAssertEqual(c.cnvSequence("lumf"), "ㄌㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("lumj"), "ㄌㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("luml"), "ㄌㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("ly"), "ㄌㄩ");
  XCTAssertEqual(c.cnvSequence("lyf"), "ㄌㄩˊ");
  XCTAssertEqual(c.cnvSequence("lyj"), "ㄌㄩˇ");
  XCTAssertEqual(c.cnvSequence("lyl"), "ㄌㄩˋ");
  XCTAssertEqual(c.cnvSequence("lye"), "ㄌㄩㄝ");
  XCTAssertEqual(c.cnvSequence("lyej"), "ㄌㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("lyel"), "ㄌㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("lybf"), "ㄌㄩㄢˊ");
  XCTAssertEqual(c.cnvSequence("lybj"), "ㄌㄩㄢˇ");
  XCTAssertEqual(c.cnvSequence("ga"), "ㄍㄚ");
  XCTAssertEqual(c.cnvSequence("gaf"), "ㄍㄚˊ");
  XCTAssertEqual(c.cnvSequence("gaj"), "ㄍㄚˇ");
  XCTAssertEqual(c.cnvSequence("gal"), "ㄍㄚˋ");
  XCTAssertEqual(c.cnvSequence("gad"), "ㄍㄚ˙");
  XCTAssertEqual(c.cnvSequence("ge"), "ㄍㄜ");
  XCTAssertEqual(c.cnvSequence("gef"), "ㄍㄜˊ");
  XCTAssertEqual(c.cnvSequence("gej"), "ㄍㄜˇ");
  XCTAssertEqual(c.cnvSequence("gel"), "ㄍㄜˋ");
  XCTAssertEqual(c.cnvSequence("ged"), "ㄍㄜ˙");
  XCTAssertEqual(c.cnvSequence("gh"), "ㄍㄞ");
  XCTAssertEqual(c.cnvSequence("ghj"), "ㄍㄞˇ");
  XCTAssertEqual(c.cnvSequence("ghl"), "ㄍㄞˋ");
  XCTAssertEqual(c.cnvSequence("gkj"), "ㄍㄟˇ");
  XCTAssertEqual(c.cnvSequence("gw"), "ㄍㄠ");
  XCTAssertEqual(c.cnvSequence("gwj"), "ㄍㄠˇ");
  XCTAssertEqual(c.cnvSequence("gwl"), "ㄍㄠˋ");
  XCTAssertEqual(c.cnvSequence("gv"), "ㄍㄡ");
  XCTAssertEqual(c.cnvSequence("gvj"), "ㄍㄡˇ");
  XCTAssertEqual(c.cnvSequence("gvl"), "ㄍㄡˋ");
  XCTAssertEqual(c.cnvSequence("gb"), "ㄍㄢ");
  XCTAssertEqual(c.cnvSequence("gbj"), "ㄍㄢˇ");
  XCTAssertEqual(c.cnvSequence("gbl"), "ㄍㄢˋ");
  XCTAssertEqual(c.cnvSequence("gn"), "ㄍㄣ");
  XCTAssertEqual(c.cnvSequence("gnf"), "ㄍㄣˊ");
  XCTAssertEqual(c.cnvSequence("gnj"), "ㄍㄣˇ");
  XCTAssertEqual(c.cnvSequence("gnl"), "ㄍㄣˋ");
  XCTAssertEqual(c.cnvSequence("gg"), "ㄍㄤ");
  XCTAssertEqual(c.cnvSequence("ggj"), "ㄍㄤˇ");
  XCTAssertEqual(c.cnvSequence("ggl"), "ㄍㄤˋ");
  XCTAssertEqual(c.cnvSequence("gm"), "ㄍㄥ");
  XCTAssertEqual(c.cnvSequence("gmj"), "ㄍㄥˇ");
  XCTAssertEqual(c.cnvSequence("gml"), "ㄍㄥˋ");
  XCTAssertEqual(c.cnvSequence("gu"), "ㄍㄨ");
  XCTAssertEqual(c.cnvSequence("guf"), "ㄍㄨˊ");
  XCTAssertEqual(c.cnvSequence("guj"), "ㄍㄨˇ");
  XCTAssertEqual(c.cnvSequence("gul"), "ㄍㄨˋ");
  XCTAssertEqual(c.cnvSequence("gua"), "ㄍㄨㄚ");
  XCTAssertEqual(c.cnvSequence("guaf"), "ㄍㄨㄚˊ");
  XCTAssertEqual(c.cnvSequence("guaj"), "ㄍㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("gual"), "ㄍㄨㄚˋ");
  XCTAssertEqual(c.cnvSequence("guo"), "ㄍㄨㄛ");
  XCTAssertEqual(c.cnvSequence("guof"), "ㄍㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("guoj"), "ㄍㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("guol"), "ㄍㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("guh"), "ㄍㄨㄞ");
  XCTAssertEqual(c.cnvSequence("guhj"), "ㄍㄨㄞˇ");
  XCTAssertEqual(c.cnvSequence("guhl"), "ㄍㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("guk"), "ㄍㄨㄟ");
  XCTAssertEqual(c.cnvSequence("gukj"), "ㄍㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("gukl"), "ㄍㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("gub"), "ㄍㄨㄢ");
  XCTAssertEqual(c.cnvSequence("gubj"), "ㄍㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("gubl"), "ㄍㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("gun"), "ㄍㄨㄣ");
  XCTAssertEqual(c.cnvSequence("gunj"), "ㄍㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("gunl"), "ㄍㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("gug"), "ㄍㄨㄤ");
  XCTAssertEqual(c.cnvSequence("gugj"), "ㄍㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("gugl"), "ㄍㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("gum"), "ㄍㄨㄥ");
  XCTAssertEqual(c.cnvSequence("gumf"), "ㄍㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("gumj"), "ㄍㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("guml"), "ㄍㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("ka"), "ㄎㄚ");
  XCTAssertEqual(c.cnvSequence("kaj"), "ㄎㄚˇ");
  XCTAssertEqual(c.cnvSequence("kal"), "ㄎㄚˋ");
  XCTAssertEqual(c.cnvSequence("ke"), "ㄎㄜ");
  XCTAssertEqual(c.cnvSequence("kef"), "ㄎㄜˊ");
  XCTAssertEqual(c.cnvSequence("kej"), "ㄎㄜˇ");
  XCTAssertEqual(c.cnvSequence("kel"), "ㄎㄜˋ");
  XCTAssertEqual(c.cnvSequence("kh"), "ㄎㄞ");
  XCTAssertEqual(c.cnvSequence("khj"), "ㄎㄞˇ");
  XCTAssertEqual(c.cnvSequence("khl"), "ㄎㄞˋ");
  XCTAssertEqual(c.cnvSequence("kw"), "ㄎㄠ");
  XCTAssertEqual(c.cnvSequence("kwj"), "ㄎㄠˇ");
  XCTAssertEqual(c.cnvSequence("kwl"), "ㄎㄠˋ");
  XCTAssertEqual(c.cnvSequence("kv"), "ㄎㄡ");
  XCTAssertEqual(c.cnvSequence("kvj"), "ㄎㄡˇ");
  XCTAssertEqual(c.cnvSequence("kvl"), "ㄎㄡˋ");
  XCTAssertEqual(c.cnvSequence("kb"), "ㄎㄢ");
  XCTAssertEqual(c.cnvSequence("kbj"), "ㄎㄢˇ");
  XCTAssertEqual(c.cnvSequence("kbl"), "ㄎㄢˋ");
  XCTAssertEqual(c.cnvSequence("kn"), "ㄎㄣ");
  XCTAssertEqual(c.cnvSequence("knj"), "ㄎㄣˇ");
  XCTAssertEqual(c.cnvSequence("knl"), "ㄎㄣˋ");
  XCTAssertEqual(c.cnvSequence("kg"), "ㄎㄤ");
  XCTAssertEqual(c.cnvSequence("kgf"), "ㄎㄤˊ");
  XCTAssertEqual(c.cnvSequence("kgj"), "ㄎㄤˇ");
  XCTAssertEqual(c.cnvSequence("kgl"), "ㄎㄤˋ");
  XCTAssertEqual(c.cnvSequence("km"), "ㄎㄥ");
  XCTAssertEqual(c.cnvSequence("kmj"), "ㄎㄥˇ");
  XCTAssertEqual(c.cnvSequence("ku"), "ㄎㄨ");
  XCTAssertEqual(c.cnvSequence("kuf"), "ㄎㄨˊ");
  XCTAssertEqual(c.cnvSequence("kuj"), "ㄎㄨˇ");
  XCTAssertEqual(c.cnvSequence("kul"), "ㄎㄨˋ");
  XCTAssertEqual(c.cnvSequence("kua"), "ㄎㄨㄚ");
  XCTAssertEqual(c.cnvSequence("kuaj"), "ㄎㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("kual"), "ㄎㄨㄚˋ");
  XCTAssertEqual(c.cnvSequence("kuol"), "ㄎㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("kuh"), "ㄎㄨㄞ");
  XCTAssertEqual(c.cnvSequence("kuhj"), "ㄎㄨㄞˇ");
  XCTAssertEqual(c.cnvSequence("kuhl"), "ㄎㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("kuk"), "ㄎㄨㄟ");
  XCTAssertEqual(c.cnvSequence("kukf"), "ㄎㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("kukj"), "ㄎㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("kukl"), "ㄎㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("kub"), "ㄎㄨㄢ");
  XCTAssertEqual(c.cnvSequence("kubj"), "ㄎㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("kubl"), "ㄎㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("kun"), "ㄎㄨㄣ");
  XCTAssertEqual(c.cnvSequence("kunj"), "ㄎㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("kunl"), "ㄎㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("kug"), "ㄎㄨㄤ");
  XCTAssertEqual(c.cnvSequence("kugf"), "ㄎㄨㄤˊ");
  XCTAssertEqual(c.cnvSequence("kugj"), "ㄎㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("kugl"), "ㄎㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("kum"), "ㄎㄨㄥ");
  XCTAssertEqual(c.cnvSequence("kumj"), "ㄎㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("kuml"), "ㄎㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("ha"), "ㄏㄚ");
  XCTAssertEqual(c.cnvSequence("haf"), "ㄏㄚˊ");
  XCTAssertEqual(c.cnvSequence("haj"), "ㄏㄚˇ");
  XCTAssertEqual(c.cnvSequence("he"), "ㄏㄜ");
  XCTAssertEqual(c.cnvSequence("hef"), "ㄏㄜˊ");
  XCTAssertEqual(c.cnvSequence("hej"), "ㄏㄜˇ");
  XCTAssertEqual(c.cnvSequence("hel"), "ㄏㄜˋ");
  XCTAssertEqual(c.cnvSequence("hh"), "ㄏㄞ");
  XCTAssertEqual(c.cnvSequence("hhf"), "ㄏㄞˊ");
  XCTAssertEqual(c.cnvSequence("hhj"), "ㄏㄞˇ");
  XCTAssertEqual(c.cnvSequence("hhl"), "ㄏㄞˋ");
  XCTAssertEqual(c.cnvSequence("hk"), "ㄏㄟ");
  XCTAssertEqual(c.cnvSequence("hkj"), "ㄏㄟˇ");
  XCTAssertEqual(c.cnvSequence("hw"), "ㄏㄠ");
  XCTAssertEqual(c.cnvSequence("hwf"), "ㄏㄠˊ");
  XCTAssertEqual(c.cnvSequence("hwj"), "ㄏㄠˇ");
  XCTAssertEqual(c.cnvSequence("hwl"), "ㄏㄠˋ");
  XCTAssertEqual(c.cnvSequence("hv"), "ㄏㄡ");
  XCTAssertEqual(c.cnvSequence("hvf"), "ㄏㄡˊ");
  XCTAssertEqual(c.cnvSequence("hvj"), "ㄏㄡˇ");
  XCTAssertEqual(c.cnvSequence("hvl"), "ㄏㄡˋ");
  XCTAssertEqual(c.cnvSequence("hb"), "ㄏㄢ");
  XCTAssertEqual(c.cnvSequence("hbf"), "ㄏㄢˊ");
  XCTAssertEqual(c.cnvSequence("hbj"), "ㄏㄢˇ");
  XCTAssertEqual(c.cnvSequence("hbl"), "ㄏㄢˋ");
  XCTAssertEqual(c.cnvSequence("hn"), "ㄏㄣ");
  XCTAssertEqual(c.cnvSequence("hnf"), "ㄏㄣˊ");
  XCTAssertEqual(c.cnvSequence("hnj"), "ㄏㄣˇ");
  XCTAssertEqual(c.cnvSequence("hnl"), "ㄏㄣˋ");
  XCTAssertEqual(c.cnvSequence("hg"), "ㄏㄤ");
  XCTAssertEqual(c.cnvSequence("hgf"), "ㄏㄤˊ");
  XCTAssertEqual(c.cnvSequence("hgj"), "ㄏㄤˇ");
  XCTAssertEqual(c.cnvSequence("hgl"), "ㄏㄤˋ");
  XCTAssertEqual(c.cnvSequence("hm"), "ㄏㄥ");
  XCTAssertEqual(c.cnvSequence("hmf"), "ㄏㄥˊ");
  XCTAssertEqual(c.cnvSequence("hml"), "ㄏㄥˋ");
  XCTAssertEqual(c.cnvSequence("hu"), "ㄏㄨ");
  XCTAssertEqual(c.cnvSequence("huf"), "ㄏㄨˊ");
  XCTAssertEqual(c.cnvSequence("huj"), "ㄏㄨˇ");
  XCTAssertEqual(c.cnvSequence("hul"), "ㄏㄨˋ");
  XCTAssertEqual(c.cnvSequence("hua"), "ㄏㄨㄚ");
  XCTAssertEqual(c.cnvSequence("huaf"), "ㄏㄨㄚˊ");
  XCTAssertEqual(c.cnvSequence("huaj"), "ㄏㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("hual"), "ㄏㄨㄚˋ");
  XCTAssertEqual(c.cnvSequence("huo"), "ㄏㄨㄛ");
  XCTAssertEqual(c.cnvSequence("huof"), "ㄏㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("huoj"), "ㄏㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("huol"), "ㄏㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("huod"), "ㄏㄨㄛ˙");
  XCTAssertEqual(c.cnvSequence("huhf"), "ㄏㄨㄞˊ");
  XCTAssertEqual(c.cnvSequence("huhl"), "ㄏㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("huk"), "ㄏㄨㄟ");
  XCTAssertEqual(c.cnvSequence("hukf"), "ㄏㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("hukj"), "ㄏㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("hukl"), "ㄏㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("hub"), "ㄏㄨㄢ");
  XCTAssertEqual(c.cnvSequence("hubf"), "ㄏㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("hubj"), "ㄏㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("hubl"), "ㄏㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("hun"), "ㄏㄨㄣ");
  XCTAssertEqual(c.cnvSequence("hunf"), "ㄏㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("hunj"), "ㄏㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("hunl"), "ㄏㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("hug"), "ㄏㄨㄤ");
  XCTAssertEqual(c.cnvSequence("hugf"), "ㄏㄨㄤˊ");
  XCTAssertEqual(c.cnvSequence("hugj"), "ㄏㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("hugl"), "ㄏㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("hugd"), "ㄏㄨㄤ˙");
  XCTAssertEqual(c.cnvSequence("hum"), "ㄏㄨㄥ");
  XCTAssertEqual(c.cnvSequence("humf"), "ㄏㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("humj"), "ㄏㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("huml"), "ㄏㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("ji"), "ㄐㄧ");
  XCTAssertEqual(c.cnvSequence("jif"), "ㄐㄧˊ");
  XCTAssertEqual(c.cnvSequence("jij"), "ㄐㄧˇ");
  XCTAssertEqual(c.cnvSequence("jil"), "ㄐㄧˋ");
  XCTAssertEqual(c.cnvSequence("jia"), "ㄐㄧㄚ");
  XCTAssertEqual(c.cnvSequence("jiaf"), "ㄐㄧㄚˊ");
  XCTAssertEqual(c.cnvSequence("jiaj"), "ㄐㄧㄚˇ");
  XCTAssertEqual(c.cnvSequence("jial"), "ㄐㄧㄚˋ");
  XCTAssertEqual(c.cnvSequence("jie"), "ㄐㄧㄝ");
  XCTAssertEqual(c.cnvSequence("jief"), "ㄐㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("jiej"), "ㄐㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("jiel"), "ㄐㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("jied"), "ㄐㄧㄝ˙");
  XCTAssertEqual(c.cnvSequence("jiw"), "ㄐㄧㄠ");
  XCTAssertEqual(c.cnvSequence("jiwf"), "ㄐㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("jiwj"), "ㄐㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("jiwl"), "ㄐㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("jiv"), "ㄐㄧㄡ");
  XCTAssertEqual(c.cnvSequence("jivj"), "ㄐㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("jivl"), "ㄐㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("jib"), "ㄐㄧㄢ");
  XCTAssertEqual(c.cnvSequence("jibj"), "ㄐㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("jibl"), "ㄐㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("jin"), "ㄐㄧㄣ");
  XCTAssertEqual(c.cnvSequence("jinj"), "ㄐㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("jinl"), "ㄐㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("jig"), "ㄐㄧㄤ");
  XCTAssertEqual(c.cnvSequence("jigf"), "ㄐㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("jigj"), "ㄐㄧㄤˇ");
  XCTAssertEqual(c.cnvSequence("jigl"), "ㄐㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("jim"), "ㄐㄧㄥ");
  XCTAssertEqual(c.cnvSequence("jimj"), "ㄐㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("jiml"), "ㄐㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("jy"), "ㄐㄩ");
  XCTAssertEqual(c.cnvSequence("jyf"), "ㄐㄩˊ");
  XCTAssertEqual(c.cnvSequence("jyj"), "ㄐㄩˇ");
  XCTAssertEqual(c.cnvSequence("jyl"), "ㄐㄩˋ");
  XCTAssertEqual(c.cnvSequence("jye"), "ㄐㄩㄝ");
  XCTAssertEqual(c.cnvSequence("jyef"), "ㄐㄩㄝˊ");
  XCTAssertEqual(c.cnvSequence("jyej"), "ㄐㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("jyel"), "ㄐㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("jyb"), "ㄐㄩㄢ");
  XCTAssertEqual(c.cnvSequence("jybj"), "ㄐㄩㄢˇ");
  XCTAssertEqual(c.cnvSequence("jybl"), "ㄐㄩㄢˋ");
  XCTAssertEqual(c.cnvSequence("jyn"), "ㄐㄩㄣ");
  XCTAssertEqual(c.cnvSequence("jynf"), "ㄐㄩㄣˊ");
  XCTAssertEqual(c.cnvSequence("jynj"), "ㄐㄩㄣˇ");
  XCTAssertEqual(c.cnvSequence("jynl"), "ㄐㄩㄣˋ");
  XCTAssertEqual(c.cnvSequence("jym"), "ㄐㄩㄥ");
  XCTAssertEqual(c.cnvSequence("jymj"), "ㄐㄩㄥˇ");
  XCTAssertEqual(c.cnvSequence("jyml"), "ㄐㄩㄥˋ");
  // XCTAssertEqual(c.cnvSequence("qd"), "ㄑ˙");
  XCTAssertEqual(c.cnvSequence("qi"), "ㄑㄧ");
  XCTAssertEqual(c.cnvSequence("qif"), "ㄑㄧˊ");
  XCTAssertEqual(c.cnvSequence("qij"), "ㄑㄧˇ");
  XCTAssertEqual(c.cnvSequence("qil"), "ㄑㄧˋ");
  XCTAssertEqual(c.cnvSequence("qia"), "ㄑㄧㄚ");
  XCTAssertEqual(c.cnvSequence("qiaf"), "ㄑㄧㄚˊ");
  XCTAssertEqual(c.cnvSequence("qiaj"), "ㄑㄧㄚˇ");
  XCTAssertEqual(c.cnvSequence("qial"), "ㄑㄧㄚˋ");
  XCTAssertEqual(c.cnvSequence("qie"), "ㄑㄧㄝ");
  XCTAssertEqual(c.cnvSequence("qief"), "ㄑㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("qiej"), "ㄑㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("qiel"), "ㄑㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("qiw"), "ㄑㄧㄠ");
  XCTAssertEqual(c.cnvSequence("qiwf"), "ㄑㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("qiwj"), "ㄑㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("qiwl"), "ㄑㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("qiv"), "ㄑㄧㄡ");
  XCTAssertEqual(c.cnvSequence("qivf"), "ㄑㄧㄡˊ");
  XCTAssertEqual(c.cnvSequence("qivj"), "ㄑㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("qivl"), "ㄑㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("qib"), "ㄑㄧㄢ");
  XCTAssertEqual(c.cnvSequence("qibf"), "ㄑㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("qibj"), "ㄑㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("qibl"), "ㄑㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("qin"), "ㄑㄧㄣ");
  XCTAssertEqual(c.cnvSequence("qinf"), "ㄑㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("qinj"), "ㄑㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("qinl"), "ㄑㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("qig"), "ㄑㄧㄤ");
  XCTAssertEqual(c.cnvSequence("qigf"), "ㄑㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("qigj"), "ㄑㄧㄤˇ");
  XCTAssertEqual(c.cnvSequence("qigl"), "ㄑㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("qim"), "ㄑㄧㄥ");
  XCTAssertEqual(c.cnvSequence("qimf"), "ㄑㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("qimj"), "ㄑㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("qiml"), "ㄑㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("qy"), "ㄑㄩ");
  XCTAssertEqual(c.cnvSequence("qyf"), "ㄑㄩˊ");
  XCTAssertEqual(c.cnvSequence("qyj"), "ㄑㄩˇ");
  XCTAssertEqual(c.cnvSequence("qyl"), "ㄑㄩˋ");
  XCTAssertEqual(c.cnvSequence("qye"), "ㄑㄩㄝ");
  XCTAssertEqual(c.cnvSequence("qyef"), "ㄑㄩㄝˊ");
  XCTAssertEqual(c.cnvSequence("qyel"), "ㄑㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("qyb"), "ㄑㄩㄢ");
  XCTAssertEqual(c.cnvSequence("qybf"), "ㄑㄩㄢˊ");
  XCTAssertEqual(c.cnvSequence("qybj"), "ㄑㄩㄢˇ");
  XCTAssertEqual(c.cnvSequence("qybl"), "ㄑㄩㄢˋ");
  XCTAssertEqual(c.cnvSequence("qyn"), "ㄑㄩㄣ");
  XCTAssertEqual(c.cnvSequence("qynf"), "ㄑㄩㄣˊ");
  XCTAssertEqual(c.cnvSequence("qynj"), "ㄑㄩㄣˇ");
  XCTAssertEqual(c.cnvSequence("qynl"), "ㄑㄩㄣˋ");
  XCTAssertEqual(c.cnvSequence("qym"), "ㄑㄩㄥ");
  XCTAssertEqual(c.cnvSequence("qymf"), "ㄑㄩㄥˊ");
  XCTAssertEqual(c.cnvSequence("qymj"), "ㄑㄩㄥˇ");
  XCTAssertEqual(c.cnvSequence("qyml"), "ㄑㄩㄥˋ");
  XCTAssertEqual(c.cnvSequence("xi"), "ㄒㄧ");
  XCTAssertEqual(c.cnvSequence("xif"), "ㄒㄧˊ");
  XCTAssertEqual(c.cnvSequence("xij"), "ㄒㄧˇ");
  XCTAssertEqual(c.cnvSequence("xil"), "ㄒㄧˋ");
  XCTAssertEqual(c.cnvSequence("xia"), "ㄒㄧㄚ");
  XCTAssertEqual(c.cnvSequence("xiaf"), "ㄒㄧㄚˊ");
  XCTAssertEqual(c.cnvSequence("xiaj"), "ㄒㄧㄚˇ");
  XCTAssertEqual(c.cnvSequence("xial"), "ㄒㄧㄚˋ");
  XCTAssertEqual(c.cnvSequence("xie"), "ㄒㄧㄝ");
  XCTAssertEqual(c.cnvSequence("xief"), "ㄒㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("xiej"), "ㄒㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("xiel"), "ㄒㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("xiw"), "ㄒㄧㄠ");
  XCTAssertEqual(c.cnvSequence("xiwf"), "ㄒㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("xiwj"), "ㄒㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("xiwl"), "ㄒㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("xiv"), "ㄒㄧㄡ");
  XCTAssertEqual(c.cnvSequence("xivf"), "ㄒㄧㄡˊ");
  XCTAssertEqual(c.cnvSequence("xivj"), "ㄒㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("xivl"), "ㄒㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("xib"), "ㄒㄧㄢ");
  XCTAssertEqual(c.cnvSequence("xibf"), "ㄒㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("xibj"), "ㄒㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("xibl"), "ㄒㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("xin"), "ㄒㄧㄣ");
  XCTAssertEqual(c.cnvSequence("xinf"), "ㄒㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("xinj"), "ㄒㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("xinl"), "ㄒㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("xig"), "ㄒㄧㄤ");
  XCTAssertEqual(c.cnvSequence("xigf"), "ㄒㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("xigj"), "ㄒㄧㄤˇ");
  XCTAssertEqual(c.cnvSequence("xigl"), "ㄒㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("xim"), "ㄒㄧㄥ");
  XCTAssertEqual(c.cnvSequence("ximf"), "ㄒㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("ximj"), "ㄒㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("ximl"), "ㄒㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("xy"), "ㄒㄩ");
  XCTAssertEqual(c.cnvSequence("xyf"), "ㄒㄩˊ");
  XCTAssertEqual(c.cnvSequence("xyj"), "ㄒㄩˇ");
  XCTAssertEqual(c.cnvSequence("xyl"), "ㄒㄩˋ");
  XCTAssertEqual(c.cnvSequence("xye"), "ㄒㄩㄝ");
  XCTAssertEqual(c.cnvSequence("xyef"), "ㄒㄩㄝˊ");
  XCTAssertEqual(c.cnvSequence("xyej"), "ㄒㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("xyel"), "ㄒㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("xyb"), "ㄒㄩㄢ");
  XCTAssertEqual(c.cnvSequence("xybf"), "ㄒㄩㄢˊ");
  XCTAssertEqual(c.cnvSequence("xybj"), "ㄒㄩㄢˇ");
  XCTAssertEqual(c.cnvSequence("xybl"), "ㄒㄩㄢˋ");
  XCTAssertEqual(c.cnvSequence("xyn"), "ㄒㄩㄣ");
  XCTAssertEqual(c.cnvSequence("xynf"), "ㄒㄩㄣˊ");
  XCTAssertEqual(c.cnvSequence("xynl"), "ㄒㄩㄣˋ");
  XCTAssertEqual(c.cnvSequence("xym"), "ㄒㄩㄥ");
  XCTAssertEqual(c.cnvSequence("xymf"), "ㄒㄩㄥˊ");
  XCTAssertEqual(c.cnvSequence("xymj"), "ㄒㄩㄥˇ");
  XCTAssertEqual(c.cnvSequence("xyml"), "ㄒㄩㄥˋ");
  XCTAssertEqual(c.cnvSequence("j"), "ㄓ");
  XCTAssertEqual(c.cnvSequence("jf"), "ㄓˊ");
  XCTAssertEqual(c.cnvSequence("jj"), "ㄓˇ");
  XCTAssertEqual(c.cnvSequence("jl"), "ㄓˋ");
  XCTAssertEqual(c.cnvSequence("ja"), "ㄓㄚ");
  XCTAssertEqual(c.cnvSequence("jaf"), "ㄓㄚˊ");
  XCTAssertEqual(c.cnvSequence("jaj"), "ㄓㄚˇ");
  XCTAssertEqual(c.cnvSequence("jal"), "ㄓㄚˋ");
  XCTAssertEqual(c.cnvSequence("je"), "ㄓㄜ");
  XCTAssertEqual(c.cnvSequence("jef"), "ㄓㄜˊ");
  XCTAssertEqual(c.cnvSequence("jej"), "ㄓㄜˇ");
  XCTAssertEqual(c.cnvSequence("jel"), "ㄓㄜˋ");
  XCTAssertEqual(c.cnvSequence("jed"), "ㄓㄜ˙");
  XCTAssertEqual(c.cnvSequence("jh"), "ㄓㄞ");
  XCTAssertEqual(c.cnvSequence("jhf"), "ㄓㄞˊ");
  XCTAssertEqual(c.cnvSequence("jhj"), "ㄓㄞˇ");
  XCTAssertEqual(c.cnvSequence("jhl"), "ㄓㄞˋ");
  XCTAssertEqual(c.cnvSequence("jkl"), "ㄓㄟˋ");
  XCTAssertEqual(c.cnvSequence("jw"), "ㄓㄠ");
  XCTAssertEqual(c.cnvSequence("jwf"), "ㄓㄠˊ");
  XCTAssertEqual(c.cnvSequence("jwj"), "ㄓㄠˇ");
  XCTAssertEqual(c.cnvSequence("jwl"), "ㄓㄠˋ");
  XCTAssertEqual(c.cnvSequence("jv"), "ㄓㄡ");
  XCTAssertEqual(c.cnvSequence("jvf"), "ㄓㄡˊ");
  XCTAssertEqual(c.cnvSequence("jvj"), "ㄓㄡˇ");
  XCTAssertEqual(c.cnvSequence("jvl"), "ㄓㄡˋ");
  XCTAssertEqual(c.cnvSequence("jb"), "ㄓㄢ");
  XCTAssertEqual(c.cnvSequence("jbj"), "ㄓㄢˇ");
  XCTAssertEqual(c.cnvSequence("jbl"), "ㄓㄢˋ");
  XCTAssertEqual(c.cnvSequence("jn"), "ㄓㄣ");
  XCTAssertEqual(c.cnvSequence("jnf"), "ㄓㄣˊ");
  XCTAssertEqual(c.cnvSequence("jnj"), "ㄓㄣˇ");
  XCTAssertEqual(c.cnvSequence("jnl"), "ㄓㄣˋ");
  XCTAssertEqual(c.cnvSequence("jg"), "ㄓㄤ");
  XCTAssertEqual(c.cnvSequence("jgj"), "ㄓㄤˇ");
  XCTAssertEqual(c.cnvSequence("jgl"), "ㄓㄤˋ");
  XCTAssertEqual(c.cnvSequence("jm"), "ㄓㄥ");
  XCTAssertEqual(c.cnvSequence("jmj"), "ㄓㄥˇ");
  XCTAssertEqual(c.cnvSequence("jml"), "ㄓㄥˋ");
  XCTAssertEqual(c.cnvSequence("ju"), "ㄓㄨ");
  XCTAssertEqual(c.cnvSequence("juf"), "ㄓㄨˊ");
  XCTAssertEqual(c.cnvSequence("juj"), "ㄓㄨˇ");
  XCTAssertEqual(c.cnvSequence("jul"), "ㄓㄨˋ");
  XCTAssertEqual(c.cnvSequence("jua"), "ㄓㄨㄚ");
  XCTAssertEqual(c.cnvSequence("juaj"), "ㄓㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("juo"), "ㄓㄨㄛ");
  XCTAssertEqual(c.cnvSequence("juof"), "ㄓㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("juol"), "ㄓㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("juh"), "ㄓㄨㄞ");
  XCTAssertEqual(c.cnvSequence("juhj"), "ㄓㄨㄞˇ");
  XCTAssertEqual(c.cnvSequence("juhl"), "ㄓㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("juk"), "ㄓㄨㄟ");
  XCTAssertEqual(c.cnvSequence("jukj"), "ㄓㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("jukl"), "ㄓㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("jub"), "ㄓㄨㄢ");
  XCTAssertEqual(c.cnvSequence("jubj"), "ㄓㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("jubl"), "ㄓㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("jun"), "ㄓㄨㄣ");
  XCTAssertEqual(c.cnvSequence("junj"), "ㄓㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("junl"), "ㄓㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("jug"), "ㄓㄨㄤ");
  XCTAssertEqual(c.cnvSequence("jugj"), "ㄓㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("jugl"), "ㄓㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("jum"), "ㄓㄨㄥ");
  XCTAssertEqual(c.cnvSequence("jumj"), "ㄓㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("juml"), "ㄓㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("q "), "ㄔ ");
  XCTAssertEqual(c.cnvSequence("qf"), "ㄔˊ");
  XCTAssertEqual(c.cnvSequence("qj"), "ㄔˇ");
  XCTAssertEqual(c.cnvSequence("ql"), "ㄔˋ");
  XCTAssertEqual(c.cnvSequence("qa"), "ㄔㄚ");
  XCTAssertEqual(c.cnvSequence("qaf"), "ㄔㄚˊ");
  XCTAssertEqual(c.cnvSequence("qaj"), "ㄔㄚˇ");
  XCTAssertEqual(c.cnvSequence("qal"), "ㄔㄚˋ");
  XCTAssertEqual(c.cnvSequence("qe"), "ㄔㄜ");
  XCTAssertEqual(c.cnvSequence("qej"), "ㄔㄜˇ");
  XCTAssertEqual(c.cnvSequence("qel"), "ㄔㄜˋ");
  XCTAssertEqual(c.cnvSequence("qh"), "ㄔㄞ");
  XCTAssertEqual(c.cnvSequence("qhf"), "ㄔㄞˊ");
  XCTAssertEqual(c.cnvSequence("qhj"), "ㄔㄞˇ");
  XCTAssertEqual(c.cnvSequence("qhl"), "ㄔㄞˋ");
  XCTAssertEqual(c.cnvSequence("qw"), "ㄔㄠ");
  XCTAssertEqual(c.cnvSequence("qwf"), "ㄔㄠˊ");
  XCTAssertEqual(c.cnvSequence("qwj"), "ㄔㄠˇ");
  XCTAssertEqual(c.cnvSequence("qwl"), "ㄔㄠˋ");
  XCTAssertEqual(c.cnvSequence("qv"), "ㄔㄡ");
  XCTAssertEqual(c.cnvSequence("qvf"), "ㄔㄡˊ");
  XCTAssertEqual(c.cnvSequence("qvj"), "ㄔㄡˇ");
  XCTAssertEqual(c.cnvSequence("qvl"), "ㄔㄡˋ");
  XCTAssertEqual(c.cnvSequence("qb"), "ㄔㄢ");
  XCTAssertEqual(c.cnvSequence("qbf"), "ㄔㄢˊ");
  XCTAssertEqual(c.cnvSequence("qbj"), "ㄔㄢˇ");
  XCTAssertEqual(c.cnvSequence("qbl"), "ㄔㄢˋ");
  XCTAssertEqual(c.cnvSequence("qn"), "ㄔㄣ");
  XCTAssertEqual(c.cnvSequence("qnf"), "ㄔㄣˊ");
  XCTAssertEqual(c.cnvSequence("qnj"), "ㄔㄣˇ");
  XCTAssertEqual(c.cnvSequence("qnl"), "ㄔㄣˋ");
  XCTAssertEqual(c.cnvSequence("qnd"), "ㄔㄣ˙");
  XCTAssertEqual(c.cnvSequence("qg"), "ㄔㄤ");
  XCTAssertEqual(c.cnvSequence("qgf"), "ㄔㄤˊ");
  XCTAssertEqual(c.cnvSequence("qgj"), "ㄔㄤˇ");
  XCTAssertEqual(c.cnvSequence("qgl"), "ㄔㄤˋ");
  XCTAssertEqual(c.cnvSequence("qm"), "ㄔㄥ");
  XCTAssertEqual(c.cnvSequence("qmf"), "ㄔㄥˊ");
  XCTAssertEqual(c.cnvSequence("qmj"), "ㄔㄥˇ");
  XCTAssertEqual(c.cnvSequence("qml"), "ㄔㄥˋ");
  XCTAssertEqual(c.cnvSequence("qu"), "ㄔㄨ");
  XCTAssertEqual(c.cnvSequence("quf"), "ㄔㄨˊ");
  XCTAssertEqual(c.cnvSequence("quj"), "ㄔㄨˇ");
  XCTAssertEqual(c.cnvSequence("qul"), "ㄔㄨˋ");
  XCTAssertEqual(c.cnvSequence("qua"), "ㄔㄨㄚ");
  XCTAssertEqual(c.cnvSequence("quaj"), "ㄔㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("qual"), "ㄔㄨㄚˋ");
  XCTAssertEqual(c.cnvSequence("quo"), "ㄔㄨㄛ");
  XCTAssertEqual(c.cnvSequence("quol"), "ㄔㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("quh"), "ㄔㄨㄞ");
  XCTAssertEqual(c.cnvSequence("quhf"), "ㄔㄨㄞˊ");
  XCTAssertEqual(c.cnvSequence("quhj"), "ㄔㄨㄞˇ");
  XCTAssertEqual(c.cnvSequence("quhl"), "ㄔㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("quk"), "ㄔㄨㄟ");
  XCTAssertEqual(c.cnvSequence("qukf"), "ㄔㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("qukj"), "ㄔㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("qukl"), "ㄔㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("qub"), "ㄔㄨㄢ");
  XCTAssertEqual(c.cnvSequence("qubf"), "ㄔㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("qubj"), "ㄔㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("qubl"), "ㄔㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("qun"), "ㄔㄨㄣ");
  XCTAssertEqual(c.cnvSequence("qunf"), "ㄔㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("qunj"), "ㄔㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("qug"), "ㄔㄨㄤ");
  XCTAssertEqual(c.cnvSequence("qugf"), "ㄔㄨㄤˊ");
  XCTAssertEqual(c.cnvSequence("qugj"), "ㄔㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("qugl"), "ㄔㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("qum"), "ㄔㄨㄥ");
  XCTAssertEqual(c.cnvSequence("qumf"), "ㄔㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("qumj"), "ㄔㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("quml"), "ㄔㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("x "), "ㄕ ");
  XCTAssertEqual(c.cnvSequence("xf"), "ㄕˊ");
  XCTAssertEqual(c.cnvSequence("xj"), "ㄕˇ");
  XCTAssertEqual(c.cnvSequence("xl"), "ㄕˋ");
  XCTAssertEqual(c.cnvSequence("xd"), "ㄕ˙");
  XCTAssertEqual(c.cnvSequence("xa"), "ㄕㄚ");
  XCTAssertEqual(c.cnvSequence("xaf"), "ㄕㄚˊ");
  XCTAssertEqual(c.cnvSequence("xaj"), "ㄕㄚˇ");
  XCTAssertEqual(c.cnvSequence("xal"), "ㄕㄚˋ");
  XCTAssertEqual(c.cnvSequence("xad"), "ㄕㄚ˙");
  XCTAssertEqual(c.cnvSequence("xe"), "ㄕㄜ");
  XCTAssertEqual(c.cnvSequence("xef"), "ㄕㄜˊ");
  XCTAssertEqual(c.cnvSequence("xej"), "ㄕㄜˇ");
  XCTAssertEqual(c.cnvSequence("xel"), "ㄕㄜˋ");
  XCTAssertEqual(c.cnvSequence("xh"), "ㄕㄞ");
  XCTAssertEqual(c.cnvSequence("xhj"), "ㄕㄞˇ");
  XCTAssertEqual(c.cnvSequence("xhl"), "ㄕㄞˋ");
  XCTAssertEqual(c.cnvSequence("xkf"), "ㄕㄟˊ");
  XCTAssertEqual(c.cnvSequence("xw"), "ㄕㄠ");
  XCTAssertEqual(c.cnvSequence("xwf"), "ㄕㄠˊ");
  XCTAssertEqual(c.cnvSequence("xwj"), "ㄕㄠˇ");
  XCTAssertEqual(c.cnvSequence("xwl"), "ㄕㄠˋ");
  XCTAssertEqual(c.cnvSequence("xv"), "ㄕㄡ");
  XCTAssertEqual(c.cnvSequence("xvf"), "ㄕㄡˊ");
  XCTAssertEqual(c.cnvSequence("xvj"), "ㄕㄡˇ");
  XCTAssertEqual(c.cnvSequence("xvl"), "ㄕㄡˋ");
  XCTAssertEqual(c.cnvSequence("xb"), "ㄕㄢ");
  XCTAssertEqual(c.cnvSequence("xbf"), "ㄕㄢˊ");
  XCTAssertEqual(c.cnvSequence("xbj"), "ㄕㄢˇ");
  XCTAssertEqual(c.cnvSequence("xbl"), "ㄕㄢˋ");
  XCTAssertEqual(c.cnvSequence("xn"), "ㄕㄣ");
  XCTAssertEqual(c.cnvSequence("xnf"), "ㄕㄣˊ");
  XCTAssertEqual(c.cnvSequence("xnj"), "ㄕㄣˇ");
  XCTAssertEqual(c.cnvSequence("xnl"), "ㄕㄣˋ");
  XCTAssertEqual(c.cnvSequence("xg"), "ㄕㄤ");
  XCTAssertEqual(c.cnvSequence("xgj"), "ㄕㄤˇ");
  XCTAssertEqual(c.cnvSequence("xgl"), "ㄕㄤˋ");
  XCTAssertEqual(c.cnvSequence("xgd"), "ㄕㄤ˙");
  XCTAssertEqual(c.cnvSequence("xm"), "ㄕㄥ");
  XCTAssertEqual(c.cnvSequence("xmf"), "ㄕㄥˊ");
  XCTAssertEqual(c.cnvSequence("xmj"), "ㄕㄥˇ");
  XCTAssertEqual(c.cnvSequence("xml"), "ㄕㄥˋ");
  XCTAssertEqual(c.cnvSequence("xu"), "ㄕㄨ");
  XCTAssertEqual(c.cnvSequence("xuf"), "ㄕㄨˊ");
  XCTAssertEqual(c.cnvSequence("xuj"), "ㄕㄨˇ");
  XCTAssertEqual(c.cnvSequence("xul"), "ㄕㄨˋ");
  XCTAssertEqual(c.cnvSequence("xua"), "ㄕㄨㄚ");
  XCTAssertEqual(c.cnvSequence("xuaj"), "ㄕㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("xual"), "ㄕㄨㄚˋ");
  XCTAssertEqual(c.cnvSequence("xuo"), "ㄕㄨㄛ");
  XCTAssertEqual(c.cnvSequence("xuol"), "ㄕㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("xuh"), "ㄕㄨㄞ");
  XCTAssertEqual(c.cnvSequence("xuhj"), "ㄕㄨㄞˇ");
  XCTAssertEqual(c.cnvSequence("xuhl"), "ㄕㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("xuk"), "ㄕㄨㄟ");
  XCTAssertEqual(c.cnvSequence("xukf"), "ㄕㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("xukj"), "ㄕㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("xukl"), "ㄕㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("xub"), "ㄕㄨㄢ");
  XCTAssertEqual(c.cnvSequence("xubl"), "ㄕㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("xunj"), "ㄕㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("xunl"), "ㄕㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("xug"), "ㄕㄨㄤ");
  XCTAssertEqual(c.cnvSequence("xugf"), "ㄕㄨㄤˊ");
  XCTAssertEqual(c.cnvSequence("xugj"), "ㄕㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("xugl"), "ㄕㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("rl"), "ㄖˋ");
  XCTAssertEqual(c.cnvSequence("rej"), "ㄖㄜˇ");
  XCTAssertEqual(c.cnvSequence("rel"), "ㄖㄜˋ");
  XCTAssertEqual(c.cnvSequence("rwf"), "ㄖㄠˊ");
  XCTAssertEqual(c.cnvSequence("rwj"), "ㄖㄠˇ");
  XCTAssertEqual(c.cnvSequence("rwl"), "ㄖㄠˋ");
  XCTAssertEqual(c.cnvSequence("rvf"), "ㄖㄡˊ");
  XCTAssertEqual(c.cnvSequence("rvj"), "ㄖㄡˇ");
  XCTAssertEqual(c.cnvSequence("rvl"), "ㄖㄡˋ");
  XCTAssertEqual(c.cnvSequence("rbf"), "ㄖㄢˊ");
  XCTAssertEqual(c.cnvSequence("rbj"), "ㄖㄢˇ");
  XCTAssertEqual(c.cnvSequence("rbl"), "ㄖㄢˋ");
  XCTAssertEqual(c.cnvSequence("rnf"), "ㄖㄣˊ");
  XCTAssertEqual(c.cnvSequence("rnj"), "ㄖㄣˇ");
  XCTAssertEqual(c.cnvSequence("rnl"), "ㄖㄣˋ");
  XCTAssertEqual(c.cnvSequence("rg"), "ㄖㄤ");
  XCTAssertEqual(c.cnvSequence("rgf"), "ㄖㄤˊ");
  XCTAssertEqual(c.cnvSequence("rgj"), "ㄖㄤˇ");
  XCTAssertEqual(c.cnvSequence("rgl"), "ㄖㄤˋ");
  XCTAssertEqual(c.cnvSequence("rm"), "ㄖㄥ");
  XCTAssertEqual(c.cnvSequence("rmf"), "ㄖㄥˊ");
  XCTAssertEqual(c.cnvSequence("rmj"), "ㄖㄥˇ");
  XCTAssertEqual(c.cnvSequence("rml"), "ㄖㄥˋ");
  XCTAssertEqual(c.cnvSequence("ruf"), "ㄖㄨˊ");
  XCTAssertEqual(c.cnvSequence("ruj"), "ㄖㄨˇ");
  XCTAssertEqual(c.cnvSequence("rul"), "ㄖㄨˋ");
  XCTAssertEqual(c.cnvSequence("ruof"), "ㄖㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("ruol"), "ㄖㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("rukf"), "ㄖㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("rukj"), "ㄖㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("rukl"), "ㄖㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("rubf"), "ㄖㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("rubj"), "ㄖㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("rubl"), "ㄖㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("runf"), "ㄖㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("runj"), "ㄖㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("runl"), "ㄖㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("rumf"), "ㄖㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("rumj"), "ㄖㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("ruml"), "ㄖㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("z"), "ㄗ");
  XCTAssertEqual(c.cnvSequence("zf"), "ㄗˊ");
  XCTAssertEqual(c.cnvSequence("zj"), "ㄗˇ");
  XCTAssertEqual(c.cnvSequence("zl"), "ㄗˋ");
  XCTAssertEqual(c.cnvSequence("zd"), "ㄗ˙");
  XCTAssertEqual(c.cnvSequence("za"), "ㄗㄚ");
  XCTAssertEqual(c.cnvSequence("zaf"), "ㄗㄚˊ");
  XCTAssertEqual(c.cnvSequence("zaj"), "ㄗㄚˇ");
  XCTAssertEqual(c.cnvSequence("zef"), "ㄗㄜˊ");
  XCTAssertEqual(c.cnvSequence("zej"), "ㄗㄜˇ");
  XCTAssertEqual(c.cnvSequence("zel"), "ㄗㄜˋ");
  XCTAssertEqual(c.cnvSequence("zh"), "ㄗㄞ");
  XCTAssertEqual(c.cnvSequence("zhj"), "ㄗㄞˇ");
  XCTAssertEqual(c.cnvSequence("zhl"), "ㄗㄞˋ");
  XCTAssertEqual(c.cnvSequence("zkf"), "ㄗㄟˊ");
  XCTAssertEqual(c.cnvSequence("zw"), "ㄗㄠ");
  XCTAssertEqual(c.cnvSequence("zwf"), "ㄗㄠˊ");
  XCTAssertEqual(c.cnvSequence("zwj"), "ㄗㄠˇ");
  XCTAssertEqual(c.cnvSequence("zwl"), "ㄗㄠˋ");
  XCTAssertEqual(c.cnvSequence("zv"), "ㄗㄡ");
  XCTAssertEqual(c.cnvSequence("zvj"), "ㄗㄡˇ");
  XCTAssertEqual(c.cnvSequence("zvl"), "ㄗㄡˋ");
  XCTAssertEqual(c.cnvSequence("zb"), "ㄗㄢ");
  XCTAssertEqual(c.cnvSequence("zbf"), "ㄗㄢˊ");
  XCTAssertEqual(c.cnvSequence("zbj"), "ㄗㄢˇ");
  XCTAssertEqual(c.cnvSequence("zbl"), "ㄗㄢˋ");
  XCTAssertEqual(c.cnvSequence("zn"), "ㄗㄣ");
  XCTAssertEqual(c.cnvSequence("znj"), "ㄗㄣˇ");
  XCTAssertEqual(c.cnvSequence("znl"), "ㄗㄣˋ");
  XCTAssertEqual(c.cnvSequence("zg"), "ㄗㄤ");
  XCTAssertEqual(c.cnvSequence("zgj"), "ㄗㄤˇ");
  XCTAssertEqual(c.cnvSequence("zgl"), "ㄗㄤˋ");
  XCTAssertEqual(c.cnvSequence("zm"), "ㄗㄥ");
  XCTAssertEqual(c.cnvSequence("zmj"), "ㄗㄥˇ");
  XCTAssertEqual(c.cnvSequence("zml"), "ㄗㄥˋ");
  XCTAssertEqual(c.cnvSequence("zu"), "ㄗㄨ");
  XCTAssertEqual(c.cnvSequence("zuf"), "ㄗㄨˊ");
  XCTAssertEqual(c.cnvSequence("zuj"), "ㄗㄨˇ");
  XCTAssertEqual(c.cnvSequence("zul"), "ㄗㄨˋ");
  XCTAssertEqual(c.cnvSequence("zuo"), "ㄗㄨㄛ");
  XCTAssertEqual(c.cnvSequence("zuof"), "ㄗㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("zuoj"), "ㄗㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("zuol"), "ㄗㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("zuod"), "ㄗㄨㄛ˙");
  XCTAssertEqual(c.cnvSequence("zuk"), "ㄗㄨㄟ");
  XCTAssertEqual(c.cnvSequence("zukj"), "ㄗㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("zukl"), "ㄗㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("zub"), "ㄗㄨㄢ");
  XCTAssertEqual(c.cnvSequence("zubj"), "ㄗㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("zubl"), "ㄗㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("zun"), "ㄗㄨㄣ");
  XCTAssertEqual(c.cnvSequence("zunj"), "ㄗㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("zunl"), "ㄗㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("zum"), "ㄗㄨㄥ");
  XCTAssertEqual(c.cnvSequence("zumj"), "ㄗㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("zuml"), "ㄗㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("c"), "ㄘ");
  XCTAssertEqual(c.cnvSequence("cf"), "ㄘˊ");
  XCTAssertEqual(c.cnvSequence("cj"), "ㄘˇ");
  XCTAssertEqual(c.cnvSequence("cl"), "ㄘˋ");
  XCTAssertEqual(c.cnvSequence("ca"), "ㄘㄚ");
  XCTAssertEqual(c.cnvSequence("caj"), "ㄘㄚˇ");
  XCTAssertEqual(c.cnvSequence("cal"), "ㄘㄚˋ");
  XCTAssertEqual(c.cnvSequence("cel"), "ㄘㄜˋ");
  XCTAssertEqual(c.cnvSequence("ch"), "ㄘㄞ");
  XCTAssertEqual(c.cnvSequence("chf"), "ㄘㄞˊ");
  XCTAssertEqual(c.cnvSequence("chj"), "ㄘㄞˇ");
  XCTAssertEqual(c.cnvSequence("chl"), "ㄘㄞˋ");
  XCTAssertEqual(c.cnvSequence("cw"), "ㄘㄠ");
  XCTAssertEqual(c.cnvSequence("cwf"), "ㄘㄠˊ");
  XCTAssertEqual(c.cnvSequence("cwj"), "ㄘㄠˇ");
  XCTAssertEqual(c.cnvSequence("cwl"), "ㄘㄠˋ");
  XCTAssertEqual(c.cnvSequence("cv"), "ㄘㄡ");
  XCTAssertEqual(c.cnvSequence("cvf"), "ㄘㄡˊ");
  XCTAssertEqual(c.cnvSequence("cvj"), "ㄘㄡˇ");
  XCTAssertEqual(c.cnvSequence("cvl"), "ㄘㄡˋ");
  XCTAssertEqual(c.cnvSequence("cb"), "ㄘㄢ");
  XCTAssertEqual(c.cnvSequence("cbf"), "ㄘㄢˊ");
  XCTAssertEqual(c.cnvSequence("cbj"), "ㄘㄢˇ");
  XCTAssertEqual(c.cnvSequence("cbl"), "ㄘㄢˋ");
  XCTAssertEqual(c.cnvSequence("cn"), "ㄘㄣ");
  XCTAssertEqual(c.cnvSequence("cnf"), "ㄘㄣˊ");
  XCTAssertEqual(c.cnvSequence("cg"), "ㄘㄤ");
  XCTAssertEqual(c.cnvSequence("cgf"), "ㄘㄤˊ");
  XCTAssertEqual(c.cnvSequence("cgj"), "ㄘㄤˇ");
  XCTAssertEqual(c.cnvSequence("cgl"), "ㄘㄤˋ");
  XCTAssertEqual(c.cnvSequence("cm"), "ㄘㄥ");
  XCTAssertEqual(c.cnvSequence("cmf"), "ㄘㄥˊ");
  XCTAssertEqual(c.cnvSequence("cmj"), "ㄘㄥˇ");
  XCTAssertEqual(c.cnvSequence("cml"), "ㄘㄥˋ");
  XCTAssertEqual(c.cnvSequence("cu"), "ㄘㄨ");
  XCTAssertEqual(c.cnvSequence("cuf"), "ㄘㄨˊ");
  XCTAssertEqual(c.cnvSequence("cuj"), "ㄘㄨˇ");
  XCTAssertEqual(c.cnvSequence("cul"), "ㄘㄨˋ");
  XCTAssertEqual(c.cnvSequence("cuo"), "ㄘㄨㄛ");
  XCTAssertEqual(c.cnvSequence("cuof"), "ㄘㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("cuoj"), "ㄘㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("cuol"), "ㄘㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("cuk"), "ㄘㄨㄟ");
  XCTAssertEqual(c.cnvSequence("cukj"), "ㄘㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("cukl"), "ㄘㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("cub"), "ㄘㄨㄢ");
  XCTAssertEqual(c.cnvSequence("cubf"), "ㄘㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("cubj"), "ㄘㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("cubl"), "ㄘㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("cun"), "ㄘㄨㄣ");
  XCTAssertEqual(c.cnvSequence("cunf"), "ㄘㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("cunj"), "ㄘㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("cunl"), "ㄘㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("cum"), "ㄘㄨㄥ");
  XCTAssertEqual(c.cnvSequence("cumf"), "ㄘㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("cumj"), "ㄘㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("cuml"), "ㄘㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("s"), "ㄙ");
  XCTAssertEqual(c.cnvSequence("sj"), "ㄙˇ");
  XCTAssertEqual(c.cnvSequence("sl"), "ㄙˋ");
  XCTAssertEqual(c.cnvSequence("sa"), "ㄙㄚ");
  XCTAssertEqual(c.cnvSequence("saj"), "ㄙㄚˇ");
  XCTAssertEqual(c.cnvSequence("sal"), "ㄙㄚˋ");
  XCTAssertEqual(c.cnvSequence("sad"), "ㄙㄚ˙");
  XCTAssertEqual(c.cnvSequence("se"), "ㄙㄜ");
  XCTAssertEqual(c.cnvSequence("sel"), "ㄙㄜˋ");
  XCTAssertEqual(c.cnvSequence("sh"), "ㄙㄞ");
  XCTAssertEqual(c.cnvSequence("shf"), "ㄙㄞˊ");
  XCTAssertEqual(c.cnvSequence("shj"), "ㄙㄞˇ");
  XCTAssertEqual(c.cnvSequence("shl"), "ㄙㄞˋ");
  XCTAssertEqual(c.cnvSequence("sk"), "ㄙㄟ");
  XCTAssertEqual(c.cnvSequence("sw"), "ㄙㄠ");
  XCTAssertEqual(c.cnvSequence("swj"), "ㄙㄠˇ");
  XCTAssertEqual(c.cnvSequence("swl"), "ㄙㄠˋ");
  XCTAssertEqual(c.cnvSequence("sv"), "ㄙㄡ");
  XCTAssertEqual(c.cnvSequence("svj"), "ㄙㄡˇ");
  XCTAssertEqual(c.cnvSequence("svl"), "ㄙㄡˋ");
  XCTAssertEqual(c.cnvSequence("sb"), "ㄙㄢ");
  XCTAssertEqual(c.cnvSequence("sbj"), "ㄙㄢˇ");
  XCTAssertEqual(c.cnvSequence("sbl"), "ㄙㄢˋ");
  XCTAssertEqual(c.cnvSequence("sn"), "ㄙㄣ");
  XCTAssertEqual(c.cnvSequence("snj"), "ㄙㄣˇ");
  XCTAssertEqual(c.cnvSequence("sg"), "ㄙㄤ");
  XCTAssertEqual(c.cnvSequence("sgj"), "ㄙㄤˇ");
  XCTAssertEqual(c.cnvSequence("sgl"), "ㄙㄤˋ");
  XCTAssertEqual(c.cnvSequence("sm"), "ㄙㄥ");
  XCTAssertEqual(c.cnvSequence("sml"), "ㄙㄥˋ");
  XCTAssertEqual(c.cnvSequence("su"), "ㄙㄨ");
  XCTAssertEqual(c.cnvSequence("suf"), "ㄙㄨˊ");
  XCTAssertEqual(c.cnvSequence("suj"), "ㄙㄨˇ");
  XCTAssertEqual(c.cnvSequence("sul"), "ㄙㄨˋ");
  XCTAssertEqual(c.cnvSequence("suo"), "ㄙㄨㄛ");
  XCTAssertEqual(c.cnvSequence("suof"), "ㄙㄨㄛˊ");
  XCTAssertEqual(c.cnvSequence("suoj"), "ㄙㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("suol"), "ㄙㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("suk"), "ㄙㄨㄟ");
  XCTAssertEqual(c.cnvSequence("sukf"), "ㄙㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("sukj"), "ㄙㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("sukl"), "ㄙㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("sub"), "ㄙㄨㄢ");
  XCTAssertEqual(c.cnvSequence("subj"), "ㄙㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("subl"), "ㄙㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("sun"), "ㄙㄨㄣ");
  XCTAssertEqual(c.cnvSequence("sunj"), "ㄙㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("sunl"), "ㄙㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("sum"), "ㄙㄨㄥ");
  XCTAssertEqual(c.cnvSequence("sumf"), "ㄙㄨㄥˊ");
  XCTAssertEqual(c.cnvSequence("sumj"), "ㄙㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("suml"), "ㄙㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("a"), "ㄚ");
  XCTAssertEqual(c.cnvSequence("af"), "ㄚˊ");
  XCTAssertEqual(c.cnvSequence("al"), "ㄚˋ");
  XCTAssertEqual(c.cnvSequence("ad"), "ㄚ˙");
  XCTAssertEqual(c.cnvSequence("o"), "ㄛ");
  XCTAssertEqual(c.cnvSequence("of"), "ㄛˊ");
  XCTAssertEqual(c.cnvSequence("oj"), "ㄛˇ");
  XCTAssertEqual(c.cnvSequence("ol"), "ㄛˋ");
  XCTAssertEqual(c.cnvSequence("e"), "ㄜ");
  XCTAssertEqual(c.cnvSequence("ef"), "ㄜˊ");
  XCTAssertEqual(c.cnvSequence("ej"), "ㄜˇ");
  XCTAssertEqual(c.cnvSequence("el"), "ㄜˋ");
  // XCTAssertEqual(c.cnvSequence("ef"), "ㄝˊ");
  // XCTAssertEqual(c.cnvSequence("ej"), "ㄝˇ");
  // XCTAssertEqual(c.cnvSequence("el"), "ㄝˋ");
  // XCTAssertEqual(c.cnvSequence("ed"), "ㄝ˙");
  // XCTAssertEqual(c.cnvSequence("h"), "ㄞ");
  XCTAssertEqual(c.cnvSequence("hf"), "ㄞˊ");
  XCTAssertEqual(c.cnvSequence("hj"), "ㄞˇ");
  XCTAssertEqual(c.cnvSequence("hl"), "ㄞˋ");
  XCTAssertEqual(c.cnvSequence("kl"), "ㄟˋ");
  XCTAssertEqual(c.cnvSequence("w"), "ㄠ");
  XCTAssertEqual(c.cnvSequence("wf"), "ㄠˊ");
  XCTAssertEqual(c.cnvSequence("wj"), "ㄠˇ");
  XCTAssertEqual(c.cnvSequence("wl"), "ㄠˋ");
  XCTAssertEqual(c.cnvSequence("v"), "ㄡ");
  XCTAssertEqual(c.cnvSequence("vf"), "ㄡˊ");
  XCTAssertEqual(c.cnvSequence("vj"), "ㄡˇ");
  XCTAssertEqual(c.cnvSequence("vl"), "ㄡˋ");
  XCTAssertEqual(c.cnvSequence("vd"), "ㄡ˙");
  XCTAssertEqual(c.cnvSequence("b "), "ㄢ ");
  XCTAssertEqual(c.cnvSequence("bf"), "ㄢˊ");
  XCTAssertEqual(c.cnvSequence("bj"), "ㄢˇ");
  XCTAssertEqual(c.cnvSequence("bl"), "ㄢˋ");
  XCTAssertEqual(c.cnvSequence("n "), "ㄣ ");
  XCTAssertEqual(c.cnvSequence("nf"), "ㄣˊ");
  XCTAssertEqual(c.cnvSequence("nj"), "ㄣˇ");
  XCTAssertEqual(c.cnvSequence("nl"), "ㄣˋ");
  XCTAssertEqual(c.cnvSequence("nd"), "ㄣ˙");
  XCTAssertEqual(c.cnvSequence("g "), "ㄤ ");
  XCTAssertEqual(c.cnvSequence("gf"), "ㄤˊ");
  XCTAssertEqual(c.cnvSequence("gj"), "ㄤˇ");
  XCTAssertEqual(c.cnvSequence("gl"), "ㄤˋ");
  XCTAssertEqual(c.cnvSequence("m "), "ㄥ ");
  XCTAssertEqual(c.cnvSequence("ml"), "ㄥˋ");
  XCTAssertEqual(c.cnvSequence("l "), "ㄦ ");
  XCTAssertEqual(c.cnvSequence("lf"), "ㄦˊ");
  XCTAssertEqual(c.cnvSequence("lj"), "ㄦˇ");
  XCTAssertEqual(c.cnvSequence("ll"), "ㄦˋ");
  XCTAssertEqual(c.cnvSequence("ld"), "ㄦ˙");
  XCTAssertEqual(c.cnvSequence("i"), "ㄧ");
  XCTAssertEqual(c.cnvSequence("if"), "ㄧˊ");
  XCTAssertEqual(c.cnvSequence("ij"), "ㄧˇ");
  XCTAssertEqual(c.cnvSequence("il"), "ㄧˋ");
  XCTAssertEqual(c.cnvSequence("ia"), "ㄧㄚ");
  XCTAssertEqual(c.cnvSequence("iaf"), "ㄧㄚˊ");
  XCTAssertEqual(c.cnvSequence("iaj"), "ㄧㄚˇ");
  XCTAssertEqual(c.cnvSequence("ial"), "ㄧㄚˋ");
  XCTAssertEqual(c.cnvSequence("iad"), "ㄧㄚ˙");
  XCTAssertEqual(c.cnvSequence("io"), "ㄧㄛ");
  XCTAssertEqual(c.cnvSequence("iod"), "ㄧㄛ˙");
  XCTAssertEqual(c.cnvSequence("ie"), "ㄧㄝ");
  XCTAssertEqual(c.cnvSequence("ief"), "ㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("iej"), "ㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("iel"), "ㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("ied"), "ㄧㄝ˙");
  XCTAssertEqual(c.cnvSequence("ihf"), "ㄧㄞˊ");
  XCTAssertEqual(c.cnvSequence("iw"), "ㄧㄠ");
  XCTAssertEqual(c.cnvSequence("iwf"), "ㄧㄠˊ");
  XCTAssertEqual(c.cnvSequence("iwj"), "ㄧㄠˇ");
  XCTAssertEqual(c.cnvSequence("iwl"), "ㄧㄠˋ");
  XCTAssertEqual(c.cnvSequence("iv"), "ㄧㄡ");
  XCTAssertEqual(c.cnvSequence("ivf"), "ㄧㄡˊ");
  XCTAssertEqual(c.cnvSequence("ivj"), "ㄧㄡˇ");
  XCTAssertEqual(c.cnvSequence("ivl"), "ㄧㄡˋ");
  XCTAssertEqual(c.cnvSequence("ib"), "ㄧㄢ");
  XCTAssertEqual(c.cnvSequence("ibf"), "ㄧㄢˊ");
  XCTAssertEqual(c.cnvSequence("ibj"), "ㄧㄢˇ");
  XCTAssertEqual(c.cnvSequence("ibl"), "ㄧㄢˋ");
  XCTAssertEqual(c.cnvSequence("in"), "ㄧㄣ");
  XCTAssertEqual(c.cnvSequence("inf"), "ㄧㄣˊ");
  XCTAssertEqual(c.cnvSequence("inj"), "ㄧㄣˇ");
  XCTAssertEqual(c.cnvSequence("inl"), "ㄧㄣˋ");
  XCTAssertEqual(c.cnvSequence("ig"), "ㄧㄤ");
  XCTAssertEqual(c.cnvSequence("igf"), "ㄧㄤˊ");
  XCTAssertEqual(c.cnvSequence("igj"), "ㄧㄤˇ");
  XCTAssertEqual(c.cnvSequence("igl"), "ㄧㄤˋ");
  XCTAssertEqual(c.cnvSequence("im"), "ㄧㄥ");
  XCTAssertEqual(c.cnvSequence("imf"), "ㄧㄥˊ");
  XCTAssertEqual(c.cnvSequence("imj"), "ㄧㄥˇ");
  XCTAssertEqual(c.cnvSequence("iml"), "ㄧㄥˋ");
  XCTAssertEqual(c.cnvSequence("u"), "ㄨ");
  XCTAssertEqual(c.cnvSequence("uf"), "ㄨˊ");
  XCTAssertEqual(c.cnvSequence("uj"), "ㄨˇ");
  XCTAssertEqual(c.cnvSequence("ul"), "ㄨˋ");
  XCTAssertEqual(c.cnvSequence("ua"), "ㄨㄚ");
  XCTAssertEqual(c.cnvSequence("uaf"), "ㄨㄚˊ");
  XCTAssertEqual(c.cnvSequence("uaj"), "ㄨㄚˇ");
  XCTAssertEqual(c.cnvSequence("ual"), "ㄨㄚˋ");
  XCTAssertEqual(c.cnvSequence("uad"), "ㄨㄚ˙");
  XCTAssertEqual(c.cnvSequence("uo"), "ㄨㄛ");
  XCTAssertEqual(c.cnvSequence("uoj"), "ㄨㄛˇ");
  XCTAssertEqual(c.cnvSequence("uol"), "ㄨㄛˋ");
  XCTAssertEqual(c.cnvSequence("uh"), "ㄨㄞ");
  XCTAssertEqual(c.cnvSequence("uhj"), "ㄨㄞˇ");
  XCTAssertEqual(c.cnvSequence("uhl"), "ㄨㄞˋ");
  XCTAssertEqual(c.cnvSequence("uk"), "ㄨㄟ");
  XCTAssertEqual(c.cnvSequence("ukf"), "ㄨㄟˊ");
  XCTAssertEqual(c.cnvSequence("ukj"), "ㄨㄟˇ");
  XCTAssertEqual(c.cnvSequence("ukl"), "ㄨㄟˋ");
  XCTAssertEqual(c.cnvSequence("ub"), "ㄨㄢ");
  XCTAssertEqual(c.cnvSequence("ubf"), "ㄨㄢˊ");
  XCTAssertEqual(c.cnvSequence("ubj"), "ㄨㄢˇ");
  XCTAssertEqual(c.cnvSequence("ubl"), "ㄨㄢˋ");
  XCTAssertEqual(c.cnvSequence("un"), "ㄨㄣ");
  XCTAssertEqual(c.cnvSequence("unf"), "ㄨㄣˊ");
  XCTAssertEqual(c.cnvSequence("unj"), "ㄨㄣˇ");
  XCTAssertEqual(c.cnvSequence("unl"), "ㄨㄣˋ");
  XCTAssertEqual(c.cnvSequence("ug"), "ㄨㄤ");
  XCTAssertEqual(c.cnvSequence("ugf"), "ㄨㄤˊ");
  XCTAssertEqual(c.cnvSequence("ugj"), "ㄨㄤˇ");
  XCTAssertEqual(c.cnvSequence("ugl"), "ㄨㄤˋ");
  XCTAssertEqual(c.cnvSequence("um"), "ㄨㄥ");
  XCTAssertEqual(c.cnvSequence("umj"), "ㄨㄥˇ");
  XCTAssertEqual(c.cnvSequence("uml"), "ㄨㄥˋ");
  XCTAssertEqual(c.cnvSequence("y"), "ㄩ");
  XCTAssertEqual(c.cnvSequence("yf"), "ㄩˊ");
  XCTAssertEqual(c.cnvSequence("yj"), "ㄩˇ");
  XCTAssertEqual(c.cnvSequence("yl"), "ㄩˋ");
  XCTAssertEqual(c.cnvSequence("ye"), "ㄩㄝ");
  XCTAssertEqual(c.cnvSequence("yej"), "ㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("yel"), "ㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("yb"), "ㄩㄢ");
  XCTAssertEqual(c.cnvSequence("ybf"), "ㄩㄢˊ");
  XCTAssertEqual(c.cnvSequence("ybj"), "ㄩㄢˇ");
  XCTAssertEqual(c.cnvSequence("ybl"), "ㄩㄢˋ");
  XCTAssertEqual(c.cnvSequence("yn"), "ㄩㄣ");
  XCTAssertEqual(c.cnvSequence("ynf"), "ㄩㄣˊ");
  XCTAssertEqual(c.cnvSequence("ynj"), "ㄩㄣˇ");
  XCTAssertEqual(c.cnvSequence("ynl"), "ㄩㄣˋ");
  XCTAssertEqual(c.cnvSequence("ym"), "ㄩㄥ");
  XCTAssertEqual(c.cnvSequence("ymf"), "ㄩㄥˊ");
  XCTAssertEqual(c.cnvSequence("ymj"), "ㄩㄥˇ");
  XCTAssertEqual(c.cnvSequence("yml"), "ㄩㄥˋ");
  XCTAssertEqual(c.cnvSequence("bic"), "ㄅㄧㄝ");
  XCTAssertEqual(c.cnvSequence("bicf"), "ㄅㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("bicj"), "ㄅㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("bicl"), "ㄅㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("pic"), "ㄆㄧㄝ");
  XCTAssertEqual(c.cnvSequence("picj"), "ㄆㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("picl"), "ㄆㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("mic"), "ㄇㄧㄝ");
  XCTAssertEqual(c.cnvSequence("micf"), "ㄇㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("micl"), "ㄇㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("dic"), "ㄉㄧㄝ");
  XCTAssertEqual(c.cnvSequence("dicf"), "ㄉㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("dicj"), "ㄉㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("dicl"), "ㄉㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("tic"), "ㄊㄧㄝ");
  XCTAssertEqual(c.cnvSequence("ticf"), "ㄊㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("ticj"), "ㄊㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("ticl"), "ㄊㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("nic"), "ㄋㄧㄝ");
  XCTAssertEqual(c.cnvSequence("nicf"), "ㄋㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("nicl"), "ㄋㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("nycl"), "ㄋㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("lic"), "ㄌㄧㄝ");
  XCTAssertEqual(c.cnvSequence("licf"), "ㄌㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("licj"), "ㄌㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("licl"), "ㄌㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("lyc"), "ㄌㄩㄝ");
  XCTAssertEqual(c.cnvSequence("lycj"), "ㄌㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("lycl"), "ㄌㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("jic"), "ㄐㄧㄝ");
  XCTAssertEqual(c.cnvSequence("jicf"), "ㄐㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("jicj"), "ㄐㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("jicl"), "ㄐㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("jicd"), "ㄐㄧㄝ˙");
  XCTAssertEqual(c.cnvSequence("jyc"), "ㄐㄩㄝ");
  XCTAssertEqual(c.cnvSequence("jycf"), "ㄐㄩㄝˊ");
  XCTAssertEqual(c.cnvSequence("jycj"), "ㄐㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("jycl"), "ㄐㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("qic"), "ㄑㄧㄝ");
  XCTAssertEqual(c.cnvSequence("qicf"), "ㄑㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("qicj"), "ㄑㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("qicl"), "ㄑㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("qyc"), "ㄑㄩㄝ");
  XCTAssertEqual(c.cnvSequence("qycf"), "ㄑㄩㄝˊ");
  XCTAssertEqual(c.cnvSequence("qycl"), "ㄑㄩㄝˋ");
  XCTAssertEqual(c.cnvSequence("xic"), "ㄒㄧㄝ");
  XCTAssertEqual(c.cnvSequence("xicf"), "ㄒㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("xicj"), "ㄒㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("xicl"), "ㄒㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("xyc"), "ㄒㄩㄝ");
  XCTAssertEqual(c.cnvSequence("xycf"), "ㄒㄩㄝˊ");
  XCTAssertEqual(c.cnvSequence("xycj"), "ㄒㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("xycl"), "ㄒㄩㄝˋ");
  // XCTAssertEqual(c.cnvSequence("cf"), "ㄝˊ");
  // XCTAssertEqual(c.cnvSequence("cj"), "ㄝˇ");
  // XCTAssertEqual(c.cnvSequence("cl"), "ㄝˋ");
  // XCTAssertEqual(c.cnvSequence("cd"), "ㄝ˙");
  XCTAssertEqual(c.cnvSequence("h "), "ㄞ ");
  XCTAssertEqual(c.cnvSequence("t "), "ㄦ ");
  XCTAssertEqual(c.cnvSequence("tf"), "ㄦˊ");
  XCTAssertEqual(c.cnvSequence("tj"), "ㄦˇ");
  XCTAssertEqual(c.cnvSequence("tl"), "ㄦˋ");
  XCTAssertEqual(c.cnvSequence("td"), "ㄦ˙");
  XCTAssertEqual(c.cnvSequence("ic"), "ㄧㄝ");
  XCTAssertEqual(c.cnvSequence("icf"), "ㄧㄝˊ");
  XCTAssertEqual(c.cnvSequence("icj"), "ㄧㄝˇ");
  XCTAssertEqual(c.cnvSequence("icl"), "ㄧㄝˋ");
  XCTAssertEqual(c.cnvSequence("icd"), "ㄧㄝ˙");
  XCTAssertEqual(c.cnvSequence("yc"), "ㄩㄝ");
  XCTAssertEqual(c.cnvSequence("ycj"), "ㄩㄝˇ");
  XCTAssertEqual(c.cnvSequence("ycl"), "ㄩㄝˋ");
}
@end

// (c) 2022 and onwards The vChewing Project (MIT-NTL License).
/*
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

1. The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

2. No trademark license is granted to use the trade names, trademarks, service
marks, or product names of Contributor, except as required to fulfill notice
requirements above.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// ADVICE: Save as UTF8 without BOM signature!!!

#import <XCTest/XCTest.h>

#import "Tekkon.hh"

using namespace Tekkon;

@interface TekkonCCTests_Basic : XCTestCase

@end

@implementation TekkonCCTests_Basic

- (void)test_Basic_InitializingPhonabet {
  Phonabet thePhonabetNull = Phonabet("0");
  Phonabet thePhonabetA = Phonabet("ㄉ");
  Phonabet thePhonabetB = Phonabet("ㄧ");
  Phonabet thePhonabetC = Phonabet("ㄠ");
  Phonabet thePhonabetD = Phonabet("ˇ");
  XCTAssertEqual(thePhonabetNull.type, PhoneType::null);
  XCTAssertEqual(thePhonabetA.type, PhoneType::consonant);
  XCTAssertEqual(thePhonabetB.type, PhoneType::semivowel);
  XCTAssertEqual(thePhonabetC.type, PhoneType::vowel);
  XCTAssertEqual(thePhonabetD.type, PhoneType::intonation);
}

- (void)test_Basic_IsValidKeyWithKeys {
  bool result;
  Tekkon::Composer composer = Composer("", ofDachen);

  /// Testing Failed Key
  result = composer.inputValidityCheck(0x0024);
  XCTAssertFalse(result);

  // Testing Correct Qwerty Dachen Key
  composer.ensureParser(ofDachen);
  result = composer.inputValidityCheck(0x002F);
  XCTAssertTrue(result);

  // Testing Correct Eten26 Key
  composer.ensureParser(ofEten26);
  result = composer.inputValidityCheck(0x0062);
  XCTAssertTrue(result);

  // Testing Correct Hanyu-Pinyin Key
  composer.ensureParser(ofHanyuPinyin);
  result = composer.inputValidityCheck(0x0062);
  XCTAssertTrue(result);
}

// =========== PHONABET TYPINNG HANDLING TESTS (BASIC) ===========

- (void)test_Basic_PhonabetKeyReceivingAndCompositions {
  Composer composer = Composer("", ofDachen);
  bool toneMarkerIndicator;

  // Test Key Receiving;
  composer.receiveKey(0x0032);  // 2, ㄉ
  composer.receiveKey("j");     // ㄨ
  composer.receiveKey("u");     // ㄧ
  composer.receiveKey("l");     // ㄠ

  // Testing missing tone markers;
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(!toneMarkerIndicator);

  composer.receiveKey("3");  // 上聲
  XCTAssertEqual(composer.value(), "ㄉㄧㄠˇ");
  composer.doBackSpace();
  composer.receiveKey(" ");  // 陰平
  XCTAssertEqual(composer.value(),
                 "ㄉㄧㄠ ");  // 這裡回傳的結果的陰平是空格

  // Test Getting Displayed Composition
  XCTAssertEqual(composer.getComposition(), "ㄉㄧㄠ");
  XCTAssertEqual(composer.getComposition(true, false),
                 "diao1");  // 中階測試項目
  XCTAssertEqual(composer.getComposition(true, true),
                 "diāo");  // 中階測試項目
  XCTAssertEqual(composer.getInlineCompositionForIMK(true),
                 "diao1");  // 中階測試項目

  // Test Tone 5
  composer.receiveKey("7");  // 輕聲
  XCTAssertEqual(composer.getComposition(), "ㄉㄧㄠ˙");
  XCTAssertEqual(composer.getComposition(false, true),
                 "˙ㄉㄧㄠ");  // 中階測試項目

  // Testing having tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(toneMarkerIndicator);

  // Testing having not-only tone markers
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(!toneMarkerIndicator);

  // Testing having only tone markers
  composer.clear();
  composer.receiveKey("3");  // 上聲
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(toneMarkerIndicator);
}

@end

@interface TekkonCCTests_Intermediate : XCTestCase

@end

@implementation TekkonCCTests_Intermediate

// =========== PINYIN TYPINNG HANDLING TESTS ===========

- (void)test_Pinyin_HanyuinyinKeyReceivingAndCompositions {
  Composer composer = Composer("", ofHanyuPinyin);
  bool toneMarkerIndicator;

  // Test Key Receiving
  composer.receiveKey(100);  // d
  composer.receiveKey("i");
  composer.receiveKey("a");
  composer.receiveKey("o");
  XCTAssertEqual(composer.consonant.value(), "ㄉ");
  XCTAssertEqual(composer.semivowel.value(), "ㄧ");
  XCTAssertEqual(composer.vowel.value(), "ㄠ");

  // Testing missing tone markers;
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(!toneMarkerIndicator);

  composer.receiveKey("3");  // 上聲
  XCTAssertEqual(composer.value(), "ㄉㄧㄠˇ");
  composer.doBackSpace();
  composer.receiveKey(" ");  // 陰平
  XCTAssertEqual(composer.value(),
                 "ㄉㄧㄠ ");  // 這裡回傳的結果的陰平是空格

  // Test Getting Displayed Composition;
  XCTAssertEqual(composer.getComposition(), "ㄉㄧㄠ");
  XCTAssertEqual(composer.getComposition(true, false), "diao1");
  XCTAssertEqual(composer.getComposition(true, true), "diāo");
  XCTAssertEqual(composer.getInlineCompositionForIMK(true), "diao1");

  // Test Tone 5
  composer.receiveKey("7");  // 輕聲
  XCTAssertEqual(composer.getComposition(), "ㄉㄧㄠ˙");
  XCTAssertEqual(composer.getComposition(false, true), "˙ㄉㄧㄠ");

  // Testing having tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(toneMarkerIndicator);

  // Testing having not-only tone markers
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(!toneMarkerIndicator);

  // Testing having only tone markers
  composer.clear();
  composer.receiveKey("3");  // 上聲
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(toneMarkerIndicator);
}

- (void)test_Pinyin_SecondaryPinyinKeyReceivingAndCompositions {
  Composer composer = Composer("", ofSecondaryPinyin);
  bool toneMarkerIndicator;

  // Test Key Receiving
  composer.receiveKey(99);  // c
  composer.receiveKey("h");
  composer.receiveKey("i");
  composer.receiveKey("u");
  composer.receiveKey("n");
  composer.receiveKey("g");
  XCTAssertEqual(composer.consonant.value(), "ㄑ");
  XCTAssertEqual(composer.semivowel.value(), "ㄩ");
  XCTAssertEqual(composer.vowel.value(), "ㄥ");

  // Testing missing tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(!toneMarkerIndicator);

  composer.receiveKey("2");  // 陽平
  XCTAssertEqual(composer.value(), "ㄑㄩㄥˊ");
  composer.doBackSpace();
  composer.receiveKey(" ");  // 陰平
  XCTAssertEqual(composer.value(),
                 "ㄑㄩㄥ ");  // 這裡回傳的結果的陰平是空格

  // Test Getting Displayed Composition;
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ");
  XCTAssertEqual(composer.getComposition(true, false), "qiong1");
  XCTAssertEqual(composer.getComposition(true, true), "qiōng");
  XCTAssertEqual(composer.getInlineCompositionForIMK(true), "chiung1");

  // Test Tone 5
  composer.receiveKey("7");  // 輕聲
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ˙");
  XCTAssertEqual(composer.getComposition(false, true), "˙ㄑㄩㄥ");

  // Testing having tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(toneMarkerIndicator);

  // Testing having not-only tone markers
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(!toneMarkerIndicator);

  // Testing having only tone markers
  composer.clear();
  composer.receiveKey("3");  // 上聲
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(toneMarkerIndicator);
}

- (void)test_Pinyin_YalePinyinKeyReceivingAndCompositions {
  Composer composer = Composer("", ofYalePinyin);
  bool toneMarkerIndicator;

  // Test Key Receiving
  composer.receiveKey(99);  // c
  composer.receiveKey("h");
  composer.receiveKey("y");
  composer.receiveKey("u");
  composer.receiveKey("n");
  composer.receiveKey("g");
  XCTAssertEqual(composer.consonant.value(), "ㄑ");
  XCTAssertEqual(composer.semivowel.value(), "ㄩ");
  XCTAssertEqual(composer.vowel.value(), "ㄥ");

  // Testing missing tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(!toneMarkerIndicator);

  composer.receiveKey("2");  // 陽平
  XCTAssertEqual(composer.value(), "ㄑㄩㄥˊ");
  composer.doBackSpace();
  composer.receiveKey(" ");  // 陰平
  XCTAssertEqual(composer.value(),
                 "ㄑㄩㄥ ");  // 這裡回傳的結果的陰平是空格

  // Test Getting Displayed Composition;
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ");
  XCTAssertEqual(composer.getComposition(true, false), "qiong1");
  XCTAssertEqual(composer.getComposition(true, true), "qiōng");
  XCTAssertEqual(composer.getInlineCompositionForIMK(true), "chyung1");

  // Test Tone 5
  composer.receiveKey("7");  // 輕聲
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ˙");
  XCTAssertEqual(composer.getComposition(false, true), "˙ㄑㄩㄥ");

  // Testing having tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(toneMarkerIndicator);

  // Testing having not-only tone markers
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(!toneMarkerIndicator);

  // Testing having only tone markers
  composer.clear();
  composer.receiveKey("3");  // 上聲
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(toneMarkerIndicator);
}

- (void)test_Pinyin_HualuoPinyinKeyReceivingAndCompositions {
  Composer composer = Composer("", ofHualuoPinyin);
  bool toneMarkerIndicator;

  // Test Key Receiving
  composer.receiveKey(99);  // c
  composer.receiveKey("h");
  composer.receiveKey("y");
  composer.receiveKey("o");
  composer.receiveKey("n");
  composer.receiveKey("g");
  XCTAssertEqual(composer.consonant.value(), "ㄑ");
  XCTAssertEqual(composer.semivowel.value(), "ㄩ");
  XCTAssertEqual(composer.vowel.value(), "ㄥ");

  // Testing missing tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(!toneMarkerIndicator);

  composer.receiveKey("2");  // 陽平
  XCTAssertEqual(composer.value(), "ㄑㄩㄥˊ");
  composer.doBackSpace();
  composer.receiveKey(" ");  // 陰平
  XCTAssertEqual(composer.value(),
                 "ㄑㄩㄥ ");  // 這裡回傳的結果的陰平是空格

  // Test Getting Displayed Composition
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ");
  XCTAssertEqual(composer.getComposition(true, false), "qiong1");
  XCTAssertEqual(composer.getComposition(true, true), "qiōng");
  XCTAssertEqual(composer.getInlineCompositionForIMK(true), "chyong1");

  // Test Tone 5
  composer.receiveKey("7");  // 輕聲
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ˙");
  XCTAssertEqual(composer.getComposition(false, true), "˙ㄑㄩㄥ");

  // Testing having tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(toneMarkerIndicator);

  // Testing having not-only tone markers
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(!toneMarkerIndicator);

  // Testing having only tone markers
  composer.clear();
  composer.receiveKey("3");  // 上聲
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(toneMarkerIndicator);
}

- (void)test_Pinyin_UniversalPinyinKeyReceivingAndCompositions {
  Composer composer = Composer("", ofUniversalPinyin);
  bool toneMarkerIndicator;

  // Test Key Receiving
  composer.receiveKey(99);  // c
  composer.receiveKey("y");
  composer.receiveKey("o");
  composer.receiveKey("n");
  composer.receiveKey("g");
  XCTAssertEqual(composer.consonant.value(), "ㄑ");
  XCTAssertEqual(composer.semivowel.value(), "ㄩ");
  XCTAssertEqual(composer.vowel.value(), "ㄥ");

  // Testing missing tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(!toneMarkerIndicator);

  composer.receiveKey("2");  // 陽平
  XCTAssertEqual(composer.value(), "ㄑㄩㄥˊ");
  composer.doBackSpace();
  composer.receiveKey(" ");  // 陰平
  XCTAssertEqual(composer.value(),
                 "ㄑㄩㄥ ");  // 這裡回傳的結果的陰平是空格

  // Test Getting Displayed Composition
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ");
  XCTAssertEqual(composer.getComposition(true, false), "qiong1");
  XCTAssertEqual(composer.getComposition(true, true), "qiōng");
  XCTAssertEqual(composer.getInlineCompositionForIMK(true), "cyong1");

  // Test Tone 5
  composer.receiveKey("7");  // 輕聲
  XCTAssertEqual(composer.getComposition(), "ㄑㄩㄥ˙");
  XCTAssertEqual(composer.getComposition(false, true), "˙ㄑㄩㄥ");

  // Testing having tone markers
  toneMarkerIndicator = composer.hasToneMarker();
  XCTAssertTrue(toneMarkerIndicator);

  // Testing having not-only tone markers
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(!toneMarkerIndicator);

  // Testing having only tone markers
  composer.clear();
  composer.receiveKey("3");  // 上聲
  toneMarkerIndicator = composer.hasToneMarker(true);
  XCTAssertTrue(toneMarkerIndicator);
}

@end

@interface TekkonCCTests_Advanced : XCTestCase

@end

@implementation TekkonCCTests_Advanced

// =========== PHONABET TYPINNG HANDLING TESTS (ADVANCED) ===========

- (void)test_Zhuyin_QwertyDachenKeys {
  // Testing Dachen Traditional Mapping (QWERTY);
  Composer composer = Composer("", ofDachen);
  XCTAssertEqual(composer.cnvSequence("18 "), "ㄅㄚ ");
  XCTAssertEqual(composer.cnvSequence("m,4"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("5j/ "), "ㄓㄨㄥ ");
  XCTAssertEqual(composer.cnvSequence("fu."), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("g0 "), "ㄕㄢ ");
  XCTAssertEqual(composer.cnvSequence("xup6"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xu;6"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("z/"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("tjo "), "ㄔㄨㄟ ");
  XCTAssertEqual(composer.cnvSequence("284"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("2u4"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("hl3"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("5 "), "ㄓ ");
  XCTAssertEqual(composer.cnvSequence("193"), "ㄅㄞˇ");
}

- (void)test_Zhuyin_Dachen26Keys {
  // Testing handleDachen26();
  Composer composer = Composer("", ofDachen26);
  XCTAssertEqual(composer.cnvSequence("qquu "), "ㄅㄚ ");
  XCTAssertEqual(composer.cnvSequence("mbbd"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ttjnn "), "ㄓㄨㄥ ");
  XCTAssertEqual(composer.cnvSequence("fum"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("goo "), "ㄕㄢ ");
  XCTAssertEqual(composer.cnvSequence("xupe"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xulle"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("zn"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("tjo "), "ㄔㄨㄟ ");
  XCTAssertEqual(composer.cnvSequence("wwuud"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("wwud"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("hlr"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tt "), "ㄓ ");
  XCTAssertEqual(composer.cnvSequence("qqiir"), "ㄅㄞˇ");
}

- (void)test_Zhuyin_Eten26Keys {
  // Testing handleEten26();
  Composer composer = Composer("", ofEten26);
  XCTAssertEqual(composer.cnvSequence("ket"), "ㄎㄧㄤ");
  // AreEqual(Composer.cnvSequence("vezf"), "ㄍㄧㄠˊ");
  // AreEqual(Composer.cnvSequence("ven"), "ㄍㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("betf"), "ㄅㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("betk"), "ㄅㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dxt"), "ㄉㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("ba"), "ㄅㄚ");
  XCTAssertEqual(composer.cnvSequence("baf"), "ㄅㄚˊ");
  XCTAssertEqual(composer.cnvSequence("baj"), "ㄅㄚˇ");
  XCTAssertEqual(composer.cnvSequence("bak"), "ㄅㄚˋ");
  XCTAssertEqual(composer.cnvSequence("bad"), "ㄅㄚ˙");
  XCTAssertEqual(composer.cnvSequence("bo"), "ㄅㄛ");
  XCTAssertEqual(composer.cnvSequence("bof"), "ㄅㄛˊ");
  XCTAssertEqual(composer.cnvSequence("boj"), "ㄅㄛˇ");
  XCTAssertEqual(composer.cnvSequence("bok"), "ㄅㄛˋ");
  XCTAssertEqual(composer.cnvSequence("bod"), "ㄅㄛ˙");
  XCTAssertEqual(composer.cnvSequence("bi"), "ㄅㄞ");
  XCTAssertEqual(composer.cnvSequence("bif"), "ㄅㄞˊ");
  XCTAssertEqual(composer.cnvSequence("bij"), "ㄅㄞˇ");
  XCTAssertEqual(composer.cnvSequence("bik"), "ㄅㄞˋ");
  XCTAssertEqual(composer.cnvSequence("bid"), "ㄅㄞ˙");
  XCTAssertEqual(composer.cnvSequence("bq"), "ㄅㄟ");
  XCTAssertEqual(composer.cnvSequence("bqj"), "ㄅㄟˇ");
  XCTAssertEqual(composer.cnvSequence("bqk"), "ㄅㄟˋ");
  XCTAssertEqual(composer.cnvSequence("bqd"), "ㄅㄟ˙");
  XCTAssertEqual(composer.cnvSequence("bz"), "ㄅㄠ");
  XCTAssertEqual(composer.cnvSequence("bzf"), "ㄅㄠˊ");
  XCTAssertEqual(composer.cnvSequence("bzj"), "ㄅㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bzk"), "ㄅㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bm"), "ㄅㄢ");
  XCTAssertEqual(composer.cnvSequence("bmj"), "ㄅㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bmk"), "ㄅㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bn"), "ㄅㄣ");
  XCTAssertEqual(composer.cnvSequence("bnj"), "ㄅㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bnk"), "ㄅㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bt"), "ㄅㄤ");
  XCTAssertEqual(composer.cnvSequence("btj"), "ㄅㄤˇ");
  XCTAssertEqual(composer.cnvSequence("btk"), "ㄅㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bl"), "ㄅㄥ");
  XCTAssertEqual(composer.cnvSequence("blf"), "ㄅㄥˊ");
  XCTAssertEqual(composer.cnvSequence("blj"), "ㄅㄥˇ");
  XCTAssertEqual(composer.cnvSequence("blk"), "ㄅㄥˋ");
  XCTAssertEqual(composer.cnvSequence("be"), "ㄅㄧ");
  XCTAssertEqual(composer.cnvSequence("bef"), "ㄅㄧˊ");
  XCTAssertEqual(composer.cnvSequence("bej"), "ㄅㄧˇ");
  XCTAssertEqual(composer.cnvSequence("bek"), "ㄅㄧˋ");
  XCTAssertEqual(composer.cnvSequence("bew"), "ㄅㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("bewf"), "ㄅㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("bewj"), "ㄅㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("bewk"), "ㄅㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("bez"), "ㄅㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("bezj"), "ㄅㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bezk"), "ㄅㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bem"), "ㄅㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("bemf"), "ㄅㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("bemj"), "ㄅㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bemk"), "ㄅㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ben"), "ㄅㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("benj"), "ㄅㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("benk"), "ㄅㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bel"), "ㄅㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("belj"), "ㄅㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("belk"), "ㄅㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bx"), "ㄅㄨ");
  XCTAssertEqual(composer.cnvSequence("bxf"), "ㄅㄨˊ");
  XCTAssertEqual(composer.cnvSequence("bxj"), "ㄅㄨˇ");
  XCTAssertEqual(composer.cnvSequence("bxk"), "ㄅㄨˋ");
  XCTAssertEqual(composer.cnvSequence("pa"), "ㄆㄚ");
  XCTAssertEqual(composer.cnvSequence("paf"), "ㄆㄚˊ");
  XCTAssertEqual(composer.cnvSequence("paj"), "ㄆㄚˇ");
  XCTAssertEqual(composer.cnvSequence("pak"), "ㄆㄚˋ");
  XCTAssertEqual(composer.cnvSequence("pad"), "ㄆㄚ˙");
  XCTAssertEqual(composer.cnvSequence("po"), "ㄆㄛ");
  XCTAssertEqual(composer.cnvSequence("pof"), "ㄆㄛˊ");
  XCTAssertEqual(composer.cnvSequence("poj"), "ㄆㄛˇ");
  XCTAssertEqual(composer.cnvSequence("pok"), "ㄆㄛˋ");
  XCTAssertEqual(composer.cnvSequence("pi"), "ㄆㄞ");
  XCTAssertEqual(composer.cnvSequence("pif"), "ㄆㄞˊ");
  XCTAssertEqual(composer.cnvSequence("pij"), "ㄆㄞˇ");
  XCTAssertEqual(composer.cnvSequence("pik"), "ㄆㄞˋ");
  XCTAssertEqual(composer.cnvSequence("pq"), "ㄆㄟ");
  XCTAssertEqual(composer.cnvSequence("pqf"), "ㄆㄟˊ");
  XCTAssertEqual(composer.cnvSequence("pqj"), "ㄆㄟˇ");
  XCTAssertEqual(composer.cnvSequence("pqk"), "ㄆㄟˋ");
  XCTAssertEqual(composer.cnvSequence("pz"), "ㄆㄠ");
  XCTAssertEqual(composer.cnvSequence("pzf"), "ㄆㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pzj"), "ㄆㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pzk"), "ㄆㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pp"), "ㄆㄡ");
  XCTAssertEqual(composer.cnvSequence("ppf"), "ㄆㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ppj"), "ㄆㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ppk"), "ㄆㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pm"), "ㄆㄢ");
  XCTAssertEqual(composer.cnvSequence("pmf"), "ㄆㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pmj"), "ㄆㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pmk"), "ㄆㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pn"), "ㄆㄣ");
  XCTAssertEqual(composer.cnvSequence("pnf"), "ㄆㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pnj"), "ㄆㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pnk"), "ㄆㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pt"), "ㄆㄤ");
  XCTAssertEqual(composer.cnvSequence("ptf"), "ㄆㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ptj"), "ㄆㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ptk"), "ㄆㄤˋ");
  XCTAssertEqual(composer.cnvSequence("pl"), "ㄆㄥ");
  XCTAssertEqual(composer.cnvSequence("plf"), "ㄆㄥˊ");
  XCTAssertEqual(composer.cnvSequence("plj"), "ㄆㄥˇ");
  XCTAssertEqual(composer.cnvSequence("plk"), "ㄆㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pe"), "ㄆㄧ");
  XCTAssertEqual(composer.cnvSequence("pef"), "ㄆㄧˊ");
  XCTAssertEqual(composer.cnvSequence("pej"), "ㄆㄧˇ");
  XCTAssertEqual(composer.cnvSequence("pek"), "ㄆㄧˋ");
  XCTAssertEqual(composer.cnvSequence("pea"), "ㄆㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("pew"), "ㄆㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("pewj"), "ㄆㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("pewk"), "ㄆㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("pez"), "ㄆㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("pezf"), "ㄆㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pezj"), "ㄆㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pezk"), "ㄆㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pem"), "ㄆㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("pemf"), "ㄆㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pemj"), "ㄆㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pemk"), "ㄆㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pen"), "ㄆㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("penf"), "ㄆㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("penj"), "ㄆㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("penk"), "ㄆㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pel"), "ㄆㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("pelf"), "ㄆㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("pelj"), "ㄆㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("pelk"), "ㄆㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("px"), "ㄆㄨ");
  XCTAssertEqual(composer.cnvSequence("pxf"), "ㄆㄨˊ");
  XCTAssertEqual(composer.cnvSequence("pxj"), "ㄆㄨˇ");
  XCTAssertEqual(composer.cnvSequence("pxk"), "ㄆㄨˋ");
  XCTAssertEqual(composer.cnvSequence("ma"), "ㄇㄚ");
  XCTAssertEqual(composer.cnvSequence("maf"), "ㄇㄚˊ");
  XCTAssertEqual(composer.cnvSequence("maj"), "ㄇㄚˇ");
  XCTAssertEqual(composer.cnvSequence("mak"), "ㄇㄚˋ");
  XCTAssertEqual(composer.cnvSequence("mad"), "ㄇㄚ˙");
  XCTAssertEqual(composer.cnvSequence("mo"), "ㄇㄛ");
  XCTAssertEqual(composer.cnvSequence("mof"), "ㄇㄛˊ");
  XCTAssertEqual(composer.cnvSequence("moj"), "ㄇㄛˇ");
  XCTAssertEqual(composer.cnvSequence("mok"), "ㄇㄛˋ");
  XCTAssertEqual(composer.cnvSequence("mod"), "ㄇㄛ˙");
  XCTAssertEqual(composer.cnvSequence("mr"), "ㄇㄜ");
  XCTAssertEqual(composer.cnvSequence("mrk"), "ㄇㄜˋ");
  XCTAssertEqual(composer.cnvSequence("mrd"), "ㄇㄜ˙");
  XCTAssertEqual(composer.cnvSequence("mi"), "ㄇㄞ");
  XCTAssertEqual(composer.cnvSequence("mif"), "ㄇㄞˊ");
  XCTAssertEqual(composer.cnvSequence("mij"), "ㄇㄞˇ");
  XCTAssertEqual(composer.cnvSequence("mik"), "ㄇㄞˋ");
  XCTAssertEqual(composer.cnvSequence("mqf"), "ㄇㄟˊ");
  XCTAssertEqual(composer.cnvSequence("mqj"), "ㄇㄟˇ");
  XCTAssertEqual(composer.cnvSequence("mqk"), "ㄇㄟˋ");
  XCTAssertEqual(composer.cnvSequence("mz"), "ㄇㄠ");
  XCTAssertEqual(composer.cnvSequence("mzf"), "ㄇㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mzj"), "ㄇㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mzk"), "ㄇㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mpf"), "ㄇㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mpj"), "ㄇㄡˇ");
  XCTAssertEqual(composer.cnvSequence("mpk"), "ㄇㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mm"), "ㄇㄢ");
  XCTAssertEqual(composer.cnvSequence("mmf"), "ㄇㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mmj"), "ㄇㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mmk"), "ㄇㄢˋ");
  XCTAssertEqual(composer.cnvSequence("mn"), "ㄇㄣ");
  XCTAssertEqual(composer.cnvSequence("mnf"), "ㄇㄣˊ");
  XCTAssertEqual(composer.cnvSequence("mnj"), "ㄇㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mnk"), "ㄇㄣˋ");
  XCTAssertEqual(composer.cnvSequence("mnd"), "ㄇㄣ˙");
  XCTAssertEqual(composer.cnvSequence("mt"), "ㄇㄤ");
  XCTAssertEqual(composer.cnvSequence("mtf"), "ㄇㄤˊ");
  XCTAssertEqual(composer.cnvSequence("mtj"), "ㄇㄤˇ");
  XCTAssertEqual(composer.cnvSequence("mtk"), "ㄇㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ml"), "ㄇㄥ");
  XCTAssertEqual(composer.cnvSequence("mlf"), "ㄇㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mlj"), "ㄇㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mlk"), "ㄇㄥˋ");
  XCTAssertEqual(composer.cnvSequence("me"), "ㄇㄧ");
  XCTAssertEqual(composer.cnvSequence("mef"), "ㄇㄧˊ");
  XCTAssertEqual(composer.cnvSequence("mej"), "ㄇㄧˇ");
  XCTAssertEqual(composer.cnvSequence("mek"), "ㄇㄧˋ");
  XCTAssertEqual(composer.cnvSequence("mew"), "ㄇㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("mewf"), "ㄇㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("mewk"), "ㄇㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("mez"), "ㄇㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("mezf"), "ㄇㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mezj"), "ㄇㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mezk"), "ㄇㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mepf"), "ㄇㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mepj"), "ㄇㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("mepk"), "ㄇㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mem"), "ㄇㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("memf"), "ㄇㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("memj"), "ㄇㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("memk"), "ㄇㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("men"), "ㄇㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("menf"), "ㄇㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("menj"), "ㄇㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("melf"), "ㄇㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("melj"), "ㄇㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("melk"), "ㄇㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mxf"), "ㄇㄨˊ");
  XCTAssertEqual(composer.cnvSequence("mxj"), "ㄇㄨˇ");
  XCTAssertEqual(composer.cnvSequence("mxk"), "ㄇㄨˋ");
  XCTAssertEqual(composer.cnvSequence("fa"), "ㄈㄚ");
  XCTAssertEqual(composer.cnvSequence("faf"), "ㄈㄚˊ");
  XCTAssertEqual(composer.cnvSequence("faj"), "ㄈㄚˇ");
  XCTAssertEqual(composer.cnvSequence("fak"), "ㄈㄚˋ");
  XCTAssertEqual(composer.cnvSequence("fof"), "ㄈㄛˊ");
  XCTAssertEqual(composer.cnvSequence("fq"), "ㄈㄟ");
  XCTAssertEqual(composer.cnvSequence("fqf"), "ㄈㄟˊ");
  XCTAssertEqual(composer.cnvSequence("fqj"), "ㄈㄟˇ");
  XCTAssertEqual(composer.cnvSequence("fqk"), "ㄈㄟˋ");
  XCTAssertEqual(composer.cnvSequence("fp"), "ㄈㄡ");
  XCTAssertEqual(composer.cnvSequence("fpf"), "ㄈㄡˊ");
  XCTAssertEqual(composer.cnvSequence("fpj"), "ㄈㄡˇ");
  XCTAssertEqual(composer.cnvSequence("fpk"), "ㄈㄡˋ");
  XCTAssertEqual(composer.cnvSequence("fm"), "ㄈㄢ");
  XCTAssertEqual(composer.cnvSequence("fmf"), "ㄈㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fmj"), "ㄈㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fmk"), "ㄈㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fn"), "ㄈㄣ");
  XCTAssertEqual(composer.cnvSequence("fnf"), "ㄈㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fnj"), "ㄈㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fnk"), "ㄈㄣˋ");
  XCTAssertEqual(composer.cnvSequence("fnd"), "ㄈㄣ˙");
  XCTAssertEqual(composer.cnvSequence("ft"), "ㄈㄤ");
  XCTAssertEqual(composer.cnvSequence("ftf"), "ㄈㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ftj"), "ㄈㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ftk"), "ㄈㄤˋ");
  XCTAssertEqual(composer.cnvSequence("fl"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("flf"), "ㄈㄥˊ");
  XCTAssertEqual(composer.cnvSequence("flj"), "ㄈㄥˇ");
  XCTAssertEqual(composer.cnvSequence("flk"), "ㄈㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fezk"), "ㄈㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("fx"), "ㄈㄨ");
  XCTAssertEqual(composer.cnvSequence("fxf"), "ㄈㄨˊ");
  XCTAssertEqual(composer.cnvSequence("fxj"), "ㄈㄨˇ");
  XCTAssertEqual(composer.cnvSequence("fxk"), "ㄈㄨˋ");
  XCTAssertEqual(composer.cnvSequence("da"), "ㄉㄚ");
  XCTAssertEqual(composer.cnvSequence("daf"), "ㄉㄚˊ");
  XCTAssertEqual(composer.cnvSequence("daj"), "ㄉㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dak"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("dad"), "ㄉㄚ˙");
  XCTAssertEqual(composer.cnvSequence("dr"), "ㄉㄜ");
  XCTAssertEqual(composer.cnvSequence("drf"), "ㄉㄜˊ");
  XCTAssertEqual(composer.cnvSequence("drd"), "ㄉㄜ˙");
  XCTAssertEqual(composer.cnvSequence("di"), "ㄉㄞ");
  XCTAssertEqual(composer.cnvSequence("dij"), "ㄉㄞˇ");
  XCTAssertEqual(composer.cnvSequence("dik"), "ㄉㄞˋ");
  XCTAssertEqual(composer.cnvSequence("dqj"), "ㄉㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dz"), "ㄉㄠ");
  XCTAssertEqual(composer.cnvSequence("dzf"), "ㄉㄠˊ");
  XCTAssertEqual(composer.cnvSequence("dzj"), "ㄉㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dzk"), "ㄉㄠˋ");
  XCTAssertEqual(composer.cnvSequence("dp"), "ㄉㄡ");
  XCTAssertEqual(composer.cnvSequence("dpf"), "ㄉㄡˊ");
  XCTAssertEqual(composer.cnvSequence("dpj"), "ㄉㄡˇ");
  XCTAssertEqual(composer.cnvSequence("dpk"), "ㄉㄡˋ");
  XCTAssertEqual(composer.cnvSequence("dm"), "ㄉㄢ");
  XCTAssertEqual(composer.cnvSequence("dmj"), "ㄉㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dmk"), "ㄉㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dnk"), "ㄉㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dt"), "ㄉㄤ");
  XCTAssertEqual(composer.cnvSequence("dtj"), "ㄉㄤˇ");
  XCTAssertEqual(composer.cnvSequence("dtk"), "ㄉㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dl"), "ㄉㄥ");
  XCTAssertEqual(composer.cnvSequence("dlj"), "ㄉㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dlk"), "ㄉㄥˋ");
  XCTAssertEqual(composer.cnvSequence("de"), "ㄉㄧ");
  XCTAssertEqual(composer.cnvSequence("def"), "ㄉㄧˊ");
  XCTAssertEqual(composer.cnvSequence("dej"), "ㄉㄧˇ");
  XCTAssertEqual(composer.cnvSequence("dek"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("deaj"), "ㄉㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dew"), "ㄉㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("dewf"), "ㄉㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("dewj"), "ㄉㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("dewk"), "ㄉㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("dez"), "ㄉㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("dezj"), "ㄉㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dezk"), "ㄉㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("dep"), "ㄉㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("dem"), "ㄉㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("demf"), "ㄉㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("demj"), "ㄉㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("demk"), "ㄉㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("del"), "ㄉㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("delf"), "ㄉㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("delj"), "ㄉㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("delk"), "ㄉㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("dx"), "ㄉㄨ");
  XCTAssertEqual(composer.cnvSequence("dxf"), "ㄉㄨˊ");
  XCTAssertEqual(composer.cnvSequence("dxj"), "ㄉㄨˇ");
  XCTAssertEqual(composer.cnvSequence("dxk"), "ㄉㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dxo"), "ㄉㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("dxof"), "ㄉㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("dxoj"), "ㄉㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("dxok"), "ㄉㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("dxod"), "ㄉㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("dxq"), "ㄉㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("dxqj"), "ㄉㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dxqk"), "ㄉㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("dxm"), "ㄉㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("dxmj"), "ㄉㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dxmk"), "ㄉㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dxn"), "ㄉㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("dxnj"), "ㄉㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("dxnk"), "ㄉㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dxl"), "ㄉㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("dxlj"), "ㄉㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dxlk"), "ㄉㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ta"), "ㄊㄚ");
  XCTAssertEqual(composer.cnvSequence("taj"), "ㄊㄚˇ");
  XCTAssertEqual(composer.cnvSequence("tak"), "ㄊㄚˋ");
  XCTAssertEqual(composer.cnvSequence("trk"), "ㄊㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ti"), "ㄊㄞ");
  XCTAssertEqual(composer.cnvSequence("tif"), "ㄊㄞˊ");
  XCTAssertEqual(composer.cnvSequence("tij"), "ㄊㄞˇ");
  XCTAssertEqual(composer.cnvSequence("tik"), "ㄊㄞˋ");
  XCTAssertEqual(composer.cnvSequence("tid"), "ㄊㄞ˙");
  XCTAssertEqual(composer.cnvSequence("tz"), "ㄊㄠ");
  XCTAssertEqual(composer.cnvSequence("tzf"), "ㄊㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tzj"), "ㄊㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tzk"), "ㄊㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tzd"), "ㄊㄠ˙");
  XCTAssertEqual(composer.cnvSequence("tp"), "ㄊㄡ");
  XCTAssertEqual(composer.cnvSequence("tpf"), "ㄊㄡˊ");
  XCTAssertEqual(composer.cnvSequence("tpj"), "ㄊㄡˇ");
  XCTAssertEqual(composer.cnvSequence("tpk"), "ㄊㄡˋ");
  XCTAssertEqual(composer.cnvSequence("tpd"), "ㄊㄡ˙");
  XCTAssertEqual(composer.cnvSequence("tm"), "ㄊㄢ");
  XCTAssertEqual(composer.cnvSequence("tmf"), "ㄊㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tmj"), "ㄊㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tmk"), "ㄊㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tt"), "ㄊㄤ");
  XCTAssertEqual(composer.cnvSequence("ttf"), "ㄊㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ttj"), "ㄊㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ttk"), "ㄊㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tl"), "ㄊㄥ");
  XCTAssertEqual(composer.cnvSequence("tlf"), "ㄊㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tlk"), "ㄊㄥˋ");
  XCTAssertEqual(composer.cnvSequence("te"), "ㄊㄧ");
  XCTAssertEqual(composer.cnvSequence("tef"), "ㄊㄧˊ");
  XCTAssertEqual(composer.cnvSequence("tej"), "ㄊㄧˇ");
  XCTAssertEqual(composer.cnvSequence("tek"), "ㄊㄧˋ");
  XCTAssertEqual(composer.cnvSequence("tew"), "ㄊㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("tewf"), "ㄊㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("tewj"), "ㄊㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("tewk"), "ㄊㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("tez"), "ㄊㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("tezf"), "ㄊㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tezj"), "ㄊㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tezk"), "ㄊㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tem"), "ㄊㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("temf"), "ㄊㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("temj"), "ㄊㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("temk"), "ㄊㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tel"), "ㄊㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("telf"), "ㄊㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("telj"), "ㄊㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("telk"), "ㄊㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tx"), "ㄊㄨ");
  XCTAssertEqual(composer.cnvSequence("txf"), "ㄊㄨˊ");
  XCTAssertEqual(composer.cnvSequence("txj"), "ㄊㄨˇ");
  XCTAssertEqual(composer.cnvSequence("txk"), "ㄊㄨˋ");
  XCTAssertEqual(composer.cnvSequence("txo"), "ㄊㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("txof"), "ㄊㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("txoj"), "ㄊㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("txok"), "ㄊㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("txq"), "ㄊㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("txqf"), "ㄊㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("txqj"), "ㄊㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("txqk"), "ㄊㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("txm"), "ㄊㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("txmf"), "ㄊㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("txmj"), "ㄊㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("txmk"), "ㄊㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("txn"), "ㄊㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("txnf"), "ㄊㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("txnj"), "ㄊㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("txnk"), "ㄊㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("txl"), "ㄊㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("txlf"), "ㄊㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("txlj"), "ㄊㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("txlk"), "ㄊㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("na"), "ㄋㄚ");
  XCTAssertEqual(composer.cnvSequence("naf"), "ㄋㄚˊ");
  XCTAssertEqual(composer.cnvSequence("naj"), "ㄋㄚˇ");
  XCTAssertEqual(composer.cnvSequence("nak"), "ㄋㄚˋ");
  XCTAssertEqual(composer.cnvSequence("nad"), "ㄋㄚ˙");
  XCTAssertEqual(composer.cnvSequence("nrk"), "ㄋㄜˋ");
  XCTAssertEqual(composer.cnvSequence("nrd"), "ㄋㄜ˙");
  XCTAssertEqual(composer.cnvSequence("nif"), "ㄋㄞˊ");
  XCTAssertEqual(composer.cnvSequence("nij"), "ㄋㄞˇ");
  XCTAssertEqual(composer.cnvSequence("nik"), "ㄋㄞˋ");
  XCTAssertEqual(composer.cnvSequence("nqf"), "ㄋㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nqj"), "ㄋㄟˇ");
  XCTAssertEqual(composer.cnvSequence("nqk"), "ㄋㄟˋ");
  XCTAssertEqual(composer.cnvSequence("nz"), "ㄋㄠ");
  XCTAssertEqual(composer.cnvSequence("nzf"), "ㄋㄠˊ");
  XCTAssertEqual(composer.cnvSequence("nzj"), "ㄋㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nzk"), "ㄋㄠˋ");
  XCTAssertEqual(composer.cnvSequence("npf"), "ㄋㄡˊ");
  XCTAssertEqual(composer.cnvSequence("npj"), "ㄋㄡˇ");
  XCTAssertEqual(composer.cnvSequence("npk"), "ㄋㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nm"), "ㄋㄢ");
  XCTAssertEqual(composer.cnvSequence("nmf"), "ㄋㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nmj"), "ㄋㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nmk"), "ㄋㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nnj"), "ㄋㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nnk"), "ㄋㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nt"), "ㄋㄤ");
  XCTAssertEqual(composer.cnvSequence("ntf"), "ㄋㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ntj"), "ㄋㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ntk"), "ㄋㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ntd"), "ㄋㄤ˙");
  XCTAssertEqual(composer.cnvSequence("nlf"), "ㄋㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nlj"), "ㄋㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ne"), "ㄋㄧ");
  XCTAssertEqual(composer.cnvSequence("nef"), "ㄋㄧˊ");
  XCTAssertEqual(composer.cnvSequence("nej"), "ㄋㄧˇ");
  XCTAssertEqual(composer.cnvSequence("nek"), "ㄋㄧˋ");
  XCTAssertEqual(composer.cnvSequence("new"), "ㄋㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("newf"), "ㄋㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("newk"), "ㄋㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("nezj"), "ㄋㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nezk"), "ㄋㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("nep"), "ㄋㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("nepf"), "ㄋㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("nepj"), "ㄋㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("nepk"), "ㄋㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nem"), "ㄋㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("nemf"), "ㄋㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nemj"), "ㄋㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nemk"), "ㄋㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nen"), "ㄋㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("nenf"), "ㄋㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nenj"), "ㄋㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nenk"), "ㄋㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("netf"), "ㄋㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("netj"), "ㄋㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("netk"), "ㄋㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nelf"), "ㄋㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nelj"), "ㄋㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nelk"), "ㄋㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nxf"), "ㄋㄨˊ");
  XCTAssertEqual(composer.cnvSequence("nxj"), "ㄋㄨˇ");
  XCTAssertEqual(composer.cnvSequence("nxk"), "ㄋㄨˋ");
  XCTAssertEqual(composer.cnvSequence("nxof"), "ㄋㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("nxoj"), "ㄋㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("nxok"), "ㄋㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("nxqf"), "ㄋㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nxmf"), "ㄋㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nxmj"), "ㄋㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nxmk"), "ㄋㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nxnf"), "ㄋㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nxlf"), "ㄋㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nxlj"), "ㄋㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nxlk"), "ㄋㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nuf"), "ㄋㄩˊ");
  XCTAssertEqual(composer.cnvSequence("nuj"), "ㄋㄩˇ");
  XCTAssertEqual(composer.cnvSequence("nuk"), "ㄋㄩˋ");
  XCTAssertEqual(composer.cnvSequence("nuwk"), "ㄋㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("la"), "ㄌㄚ");
  XCTAssertEqual(composer.cnvSequence("laf"), "ㄌㄚˊ");
  XCTAssertEqual(composer.cnvSequence("laj"), "ㄌㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lak"), "ㄌㄚˋ");
  XCTAssertEqual(composer.cnvSequence("lad"), "ㄌㄚ˙");
  XCTAssertEqual(composer.cnvSequence("lo"), "ㄌㄛ");
  XCTAssertEqual(composer.cnvSequence("lod"), "ㄌㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lr"), "ㄌㄜ");
  XCTAssertEqual(composer.cnvSequence("lrf"), "ㄌㄜˊ");
  XCTAssertEqual(composer.cnvSequence("lrk"), "ㄌㄜˋ");
  XCTAssertEqual(composer.cnvSequence("lrd"), "ㄌㄜ˙");
  XCTAssertEqual(composer.cnvSequence("lif"), "ㄌㄞˊ");
  XCTAssertEqual(composer.cnvSequence("lij"), "ㄌㄞˇ");
  XCTAssertEqual(composer.cnvSequence("lik"), "ㄌㄞˋ");
  XCTAssertEqual(composer.cnvSequence("lq"), "ㄌㄟ");
  XCTAssertEqual(composer.cnvSequence("lqf"), "ㄌㄟˊ");
  XCTAssertEqual(composer.cnvSequence("lqj"), "ㄌㄟˇ");
  XCTAssertEqual(composer.cnvSequence("lqk"), "ㄌㄟˋ");
  XCTAssertEqual(composer.cnvSequence("lqd"), "ㄌㄟ˙");
  XCTAssertEqual(composer.cnvSequence("lz"), "ㄌㄠ");
  XCTAssertEqual(composer.cnvSequence("lzf"), "ㄌㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lzj"), "ㄌㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lzk"), "ㄌㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lp"), "ㄌㄡ");
  XCTAssertEqual(composer.cnvSequence("lpf"), "ㄌㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lpj"), "ㄌㄡˇ");
  XCTAssertEqual(composer.cnvSequence("lpk"), "ㄌㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lpd"), "ㄌㄡ˙");
  XCTAssertEqual(composer.cnvSequence("lmf"), "ㄌㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lmj"), "ㄌㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lmk"), "ㄌㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lt"), "ㄌㄤ");
  XCTAssertEqual(composer.cnvSequence("ltf"), "ㄌㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ltj"), "ㄌㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ltk"), "ㄌㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ll"), "ㄌㄥ");
  XCTAssertEqual(composer.cnvSequence("llf"), "ㄌㄥˊ");
  XCTAssertEqual(composer.cnvSequence("llj"), "ㄌㄥˇ");
  XCTAssertEqual(composer.cnvSequence("llk"), "ㄌㄥˋ");
  XCTAssertEqual(composer.cnvSequence("le"), "ㄌㄧ");
  XCTAssertEqual(composer.cnvSequence("lef"), "ㄌㄧˊ");
  XCTAssertEqual(composer.cnvSequence("lej"), "ㄌㄧˇ");
  XCTAssertEqual(composer.cnvSequence("lek"), "ㄌㄧˋ");
  XCTAssertEqual(composer.cnvSequence("led"), "ㄌㄧ˙");
  XCTAssertEqual(composer.cnvSequence("leaj"), "ㄌㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lew"), "ㄌㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("lewf"), "ㄌㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("lewj"), "ㄌㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("lewk"), "ㄌㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lez"), "ㄌㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("lezf"), "ㄌㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lezj"), "ㄌㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lezk"), "ㄌㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lep"), "ㄌㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("lepf"), "ㄌㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lepj"), "ㄌㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("lepk"), "ㄌㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lem"), "ㄌㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("lemf"), "ㄌㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lemj"), "ㄌㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lemk"), "ㄌㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lenf"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lenj"), "ㄌㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lenk"), "ㄌㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("letf"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("letj"), "ㄌㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("letk"), "ㄌㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("lel"), "ㄌㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("lelf"), "ㄌㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lelj"), "ㄌㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lelk"), "ㄌㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lx"), "ㄌㄨ");
  XCTAssertEqual(composer.cnvSequence("lxf"), "ㄌㄨˊ");
  XCTAssertEqual(composer.cnvSequence("lxj"), "ㄌㄨˇ");
  XCTAssertEqual(composer.cnvSequence("lxk"), "ㄌㄨˋ");
  XCTAssertEqual(composer.cnvSequence("lxo"), "ㄌㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("lxof"), "ㄌㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("lxoj"), "ㄌㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("lxok"), "ㄌㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("lxod"), "ㄌㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lxmf"), "ㄌㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lxmj"), "ㄌㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lxmk"), "ㄌㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lxn"), "ㄌㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("lxnf"), "ㄌㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lxnj"), "ㄌㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lxnk"), "ㄌㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lxl"), "ㄌㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("lxlf"), "ㄌㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lxlj"), "ㄌㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lxlk"), "ㄌㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lu"), "ㄌㄩ");
  XCTAssertEqual(composer.cnvSequence("luf"), "ㄌㄩˊ");
  XCTAssertEqual(composer.cnvSequence("luj"), "ㄌㄩˇ");
  XCTAssertEqual(composer.cnvSequence("luk"), "ㄌㄩˋ");
  XCTAssertEqual(composer.cnvSequence("luw"), "ㄌㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("luwj"), "ㄌㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("luwk"), "ㄌㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lumf"), "ㄌㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lumj"), "ㄌㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("va"), "ㄍㄚ");
  XCTAssertEqual(composer.cnvSequence("vaf"), "ㄍㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vaj"), "ㄍㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vak"), "ㄍㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vad"), "ㄍㄚ˙");
  XCTAssertEqual(composer.cnvSequence("vr"), "ㄍㄜ");
  XCTAssertEqual(composer.cnvSequence("vrf"), "ㄍㄜˊ");
  XCTAssertEqual(composer.cnvSequence("vrj"), "ㄍㄜˇ");
  XCTAssertEqual(composer.cnvSequence("vrk"), "ㄍㄜˋ");
  XCTAssertEqual(composer.cnvSequence("vrd"), "ㄍㄜ˙");
  XCTAssertEqual(composer.cnvSequence("vi"), "ㄍㄞ");
  XCTAssertEqual(composer.cnvSequence("vij"), "ㄍㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vik"), "ㄍㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vqj"), "ㄍㄟˇ");
  XCTAssertEqual(composer.cnvSequence("vz"), "ㄍㄠ");
  XCTAssertEqual(composer.cnvSequence("vzj"), "ㄍㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vzk"), "ㄍㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vp"), "ㄍㄡ");
  XCTAssertEqual(composer.cnvSequence("vpj"), "ㄍㄡˇ");
  XCTAssertEqual(composer.cnvSequence("vpk"), "ㄍㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vm"), "ㄍㄢ");
  XCTAssertEqual(composer.cnvSequence("vmj"), "ㄍㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vmk"), "ㄍㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vn"), "ㄍㄣ");
  XCTAssertEqual(composer.cnvSequence("vnf"), "ㄍㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vnj"), "ㄍㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vnk"), "ㄍㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vt"), "ㄍㄤ");
  XCTAssertEqual(composer.cnvSequence("vtj"), "ㄍㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vtk"), "ㄍㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vl"), "ㄍㄥ");
  XCTAssertEqual(composer.cnvSequence("vlj"), "ㄍㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vlk"), "ㄍㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vx"), "ㄍㄨ");
  XCTAssertEqual(composer.cnvSequence("vxf"), "ㄍㄨˊ");
  XCTAssertEqual(composer.cnvSequence("vxj"), "ㄍㄨˇ");
  XCTAssertEqual(composer.cnvSequence("vxk"), "ㄍㄨˋ");
  XCTAssertEqual(composer.cnvSequence("vxa"), "ㄍㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("vxaf"), "ㄍㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vxaj"), "ㄍㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vxak"), "ㄍㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vxo"), "ㄍㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("vxof"), "ㄍㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("vxoj"), "ㄍㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("vxok"), "ㄍㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("vxrf"), "ㄍㄨㄜˊ");
  XCTAssertEqual(composer.cnvSequence("vxi"), "ㄍㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("vxij"), "ㄍㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vxik"), "ㄍㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vxq"), "ㄍㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("vxqj"), "ㄍㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("vxqk"), "ㄍㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("vxm"), "ㄍㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("vxmj"), "ㄍㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vxmk"), "ㄍㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vxn"), "ㄍㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("vxnj"), "ㄍㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vxnk"), "ㄍㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vxt"), "ㄍㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("vxtj"), "ㄍㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vxtk"), "ㄍㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vxl"), "ㄍㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("vxlf"), "ㄍㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vxlj"), "ㄍㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vxlk"), "ㄍㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ka"), "ㄎㄚ");
  XCTAssertEqual(composer.cnvSequence("kaj"), "ㄎㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kak"), "ㄎㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kr"), "ㄎㄜ");
  XCTAssertEqual(composer.cnvSequence("krf"), "ㄎㄜˊ");
  XCTAssertEqual(composer.cnvSequence("krj"), "ㄎㄜˇ");
  XCTAssertEqual(composer.cnvSequence("krk"), "ㄎㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ki"), "ㄎㄞ");
  XCTAssertEqual(composer.cnvSequence("kij"), "ㄎㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kik"), "ㄎㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kz"), "ㄎㄠ");
  XCTAssertEqual(composer.cnvSequence("kzj"), "ㄎㄠˇ");
  XCTAssertEqual(composer.cnvSequence("kzk"), "ㄎㄠˋ");
  XCTAssertEqual(composer.cnvSequence("kp"), "ㄎㄡ");
  XCTAssertEqual(composer.cnvSequence("kpj"), "ㄎㄡˇ");
  XCTAssertEqual(composer.cnvSequence("kpk"), "ㄎㄡˋ");
  XCTAssertEqual(composer.cnvSequence("km"), "ㄎㄢ");
  XCTAssertEqual(composer.cnvSequence("kmj"), "ㄎㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kmk"), "ㄎㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kn"), "ㄎㄣ");
  XCTAssertEqual(composer.cnvSequence("knj"), "ㄎㄣˇ");
  XCTAssertEqual(composer.cnvSequence("knk"), "ㄎㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kt"), "ㄎㄤ");
  XCTAssertEqual(composer.cnvSequence("ktf"), "ㄎㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ktj"), "ㄎㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ktk"), "ㄎㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kl"), "ㄎㄥ");
  XCTAssertEqual(composer.cnvSequence("klj"), "ㄎㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kx"), "ㄎㄨ");
  XCTAssertEqual(composer.cnvSequence("kxf"), "ㄎㄨˊ");
  XCTAssertEqual(composer.cnvSequence("kxj"), "ㄎㄨˇ");
  XCTAssertEqual(composer.cnvSequence("kxk"), "ㄎㄨˋ");
  XCTAssertEqual(composer.cnvSequence("kxa"), "ㄎㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("kxaj"), "ㄎㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kxak"), "ㄎㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kxok"), "ㄎㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("kxi"), "ㄎㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("kxij"), "ㄎㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kxik"), "ㄎㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kxq"), "ㄎㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("kxqf"), "ㄎㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("kxqj"), "ㄎㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("kxqk"), "ㄎㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("kxm"), "ㄎㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("kxmj"), "ㄎㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kxmk"), "ㄎㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kxn"), "ㄎㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("kxnj"), "ㄎㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("kxnk"), "ㄎㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kxt"), "ㄎㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("kxtf"), "ㄎㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kxtj"), "ㄎㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kxtk"), "ㄎㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kxl"), "ㄎㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("kxlj"), "ㄎㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kxlk"), "ㄎㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ha"), "ㄏㄚ");
  XCTAssertEqual(composer.cnvSequence("haf"), "ㄏㄚˊ");
  XCTAssertEqual(composer.cnvSequence("haj"), "ㄏㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hr"), "ㄏㄜ");
  XCTAssertEqual(composer.cnvSequence("hrf"), "ㄏㄜˊ");
  XCTAssertEqual(composer.cnvSequence("hrj"), "ㄏㄜˇ");
  XCTAssertEqual(composer.cnvSequence("hrk"), "ㄏㄜˋ");
  XCTAssertEqual(composer.cnvSequence("hi"), "ㄏㄞ");
  XCTAssertEqual(composer.cnvSequence("hif"), "ㄏㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hij"), "ㄏㄞˇ");
  XCTAssertEqual(composer.cnvSequence("hik"), "ㄏㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hq"), "ㄏㄟ");
  XCTAssertEqual(composer.cnvSequence("hqj"), "ㄏㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hz"), "ㄏㄠ");
  XCTAssertEqual(composer.cnvSequence("hzf"), "ㄏㄠˊ");
  XCTAssertEqual(composer.cnvSequence("hzj"), "ㄏㄠˇ");
  XCTAssertEqual(composer.cnvSequence("hzk"), "ㄏㄠˋ");
  XCTAssertEqual(composer.cnvSequence("hp"), "ㄏㄡ");
  XCTAssertEqual(composer.cnvSequence("hpf"), "ㄏㄡˊ");
  XCTAssertEqual(composer.cnvSequence("hpj"), "ㄏㄡˇ");
  XCTAssertEqual(composer.cnvSequence("hpk"), "ㄏㄡˋ");
  XCTAssertEqual(composer.cnvSequence("hm"), "ㄏㄢ");
  XCTAssertEqual(composer.cnvSequence("hmf"), "ㄏㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hmj"), "ㄏㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hmk"), "ㄏㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hn"), "ㄏㄣ");
  XCTAssertEqual(composer.cnvSequence("hnf"), "ㄏㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hnj"), "ㄏㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hnk"), "ㄏㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ht"), "ㄏㄤ");
  XCTAssertEqual(composer.cnvSequence("htf"), "ㄏㄤˊ");
  XCTAssertEqual(composer.cnvSequence("htj"), "ㄏㄤˇ");
  XCTAssertEqual(composer.cnvSequence("htk"), "ㄏㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hl"), "ㄏㄥ");
  XCTAssertEqual(composer.cnvSequence("hlf"), "ㄏㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hlk"), "ㄏㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hx"), "ㄏㄨ");
  XCTAssertEqual(composer.cnvSequence("hxf"), "ㄏㄨˊ");
  XCTAssertEqual(composer.cnvSequence("hxj"), "ㄏㄨˇ");
  XCTAssertEqual(composer.cnvSequence("hxk"), "ㄏㄨˋ");
  XCTAssertEqual(composer.cnvSequence("hxa"), "ㄏㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("hxaf"), "ㄏㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hxaj"), "ㄏㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hxak"), "ㄏㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("hxo"), "ㄏㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("hxof"), "ㄏㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hxoj"), "ㄏㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hxok"), "ㄏㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("hxod"), "ㄏㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("hxif"), "ㄏㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hxik"), "ㄏㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hxq"), "ㄏㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("hxqf"), "ㄏㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("hxqj"), "ㄏㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hxqk"), "ㄏㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("hxm"), "ㄏㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("hxmf"), "ㄏㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hxmj"), "ㄏㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hxmk"), "ㄏㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hxn"), "ㄏㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("hxnf"), "ㄏㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hxnj"), "ㄏㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hxnk"), "ㄏㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hxt"), "ㄏㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("hxtf"), "ㄏㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hxtj"), "ㄏㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hxtk"), "ㄏㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hxtd"), "ㄏㄨㄤ˙");
  XCTAssertEqual(composer.cnvSequence("hxl"), "ㄏㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("hxlf"), "ㄏㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hxlj"), "ㄏㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hxlk"), "ㄏㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ge"), "ㄐㄧ");
  XCTAssertEqual(composer.cnvSequence("gef"), "ㄐㄧˊ");
  XCTAssertEqual(composer.cnvSequence("gej"), "ㄐㄧˇ");
  XCTAssertEqual(composer.cnvSequence("gek"), "ㄐㄧˋ");
  XCTAssertEqual(composer.cnvSequence("gea"), "ㄐㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("geaf"), "ㄐㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("geaj"), "ㄐㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("geak"), "ㄐㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gew"), "ㄐㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("gewf"), "ㄐㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("gewj"), "ㄐㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("gewk"), "ㄐㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("gewd"), "ㄐㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("gez"), "ㄐㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("gezf"), "ㄐㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("gezj"), "ㄐㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gezk"), "ㄐㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("gep"), "ㄐㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("gepj"), "ㄐㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("gepk"), "ㄐㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gem"), "ㄐㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("gemj"), "ㄐㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gemk"), "ㄐㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gen"), "ㄐㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("genj"), "ㄐㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("genk"), "ㄐㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("get"), "ㄐㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("getf"), "ㄐㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("getj"), "ㄐㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("getk"), "ㄐㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gel"), "ㄐㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("gelj"), "ㄐㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gelk"), "ㄐㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gu"), "ㄐㄩ");
  XCTAssertEqual(composer.cnvSequence("guf"), "ㄐㄩˊ");
  XCTAssertEqual(composer.cnvSequence("guj"), "ㄐㄩˇ");
  XCTAssertEqual(composer.cnvSequence("guk"), "ㄐㄩˋ");
  XCTAssertEqual(composer.cnvSequence("guw"), "ㄐㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("guwf"), "ㄐㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("guwj"), "ㄐㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("guwk"), "ㄐㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("gum"), "ㄐㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("gumj"), "ㄐㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gumk"), "ㄐㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gun"), "ㄐㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("gunf"), "ㄐㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gunj"), "ㄐㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gunk"), "ㄐㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gul"), "ㄐㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("gulj"), "ㄐㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gulk"), "ㄐㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vd"), "ㄑ˙");
  XCTAssertEqual(composer.cnvSequence("ve"), "ㄑㄧ");
  XCTAssertEqual(composer.cnvSequence("vef"), "ㄑㄧˊ");
  XCTAssertEqual(composer.cnvSequence("vej"), "ㄑㄧˇ");
  XCTAssertEqual(composer.cnvSequence("vek"), "ㄑㄧˋ");
  XCTAssertEqual(composer.cnvSequence("vea"), "ㄑㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("veaf"), "ㄑㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("veaj"), "ㄑㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("veak"), "ㄑㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vew"), "ㄑㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("vewf"), "ㄑㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vewj"), "ㄑㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("vewk"), "ㄑㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vez"), "ㄑㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("vezf"), "ㄑㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vezj"), "ㄑㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vezk"), "ㄑㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vep"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("vepf"), "ㄑㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("vepj"), "ㄑㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("vepk"), "ㄑㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vem"), "ㄑㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("vemf"), "ㄑㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vemj"), "ㄑㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vemk"), "ㄑㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ven"), "ㄑㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("venf"), "ㄑㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("venj"), "ㄑㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("venk"), "ㄑㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vet"), "ㄑㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("vetf"), "ㄑㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vetj"), "ㄑㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vetk"), "ㄑㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vel"), "ㄑㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("velf"), "ㄑㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("velj"), "ㄑㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("velk"), "ㄑㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vu"), "ㄑㄩ");
  XCTAssertEqual(composer.cnvSequence("vuf"), "ㄑㄩˊ");
  XCTAssertEqual(composer.cnvSequence("vuj"), "ㄑㄩˇ");
  XCTAssertEqual(composer.cnvSequence("vuk"), "ㄑㄩˋ");
  XCTAssertEqual(composer.cnvSequence("vuw"), "ㄑㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("vuwf"), "ㄑㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vuwk"), "ㄑㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vum"), "ㄑㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("vumf"), "ㄑㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vumj"), "ㄑㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vumk"), "ㄑㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vun"), "ㄑㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("vunf"), "ㄑㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vunj"), "ㄑㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vunk"), "ㄑㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vul"), "ㄑㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("vulf"), "ㄑㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vulj"), "ㄑㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vulk"), "ㄑㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ce"), "ㄒㄧ");
  XCTAssertEqual(composer.cnvSequence("cef"), "ㄒㄧˊ");
  XCTAssertEqual(composer.cnvSequence("cej"), "ㄒㄧˇ");
  XCTAssertEqual(composer.cnvSequence("cek"), "ㄒㄧˋ");
  XCTAssertEqual(composer.cnvSequence("cea"), "ㄒㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("ceaf"), "ㄒㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ceaj"), "ㄒㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ceak"), "ㄒㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cew"), "ㄒㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("cewf"), "ㄒㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("cewj"), "ㄒㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("cewk"), "ㄒㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cez"), "ㄒㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("cezf"), "ㄒㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cezj"), "ㄒㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cezk"), "ㄒㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("cep"), "ㄒㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("cepf"), "ㄒㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cepj"), "ㄒㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("cepk"), "ㄒㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cem"), "ㄒㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("cemf"), "ㄒㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cemj"), "ㄒㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cemk"), "ㄒㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cen"), "ㄒㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("cenf"), "ㄒㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cenj"), "ㄒㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cenk"), "ㄒㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cet"), "ㄒㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("cetf"), "ㄒㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cetj"), "ㄒㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cetk"), "ㄒㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cel"), "ㄒㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("celf"), "ㄒㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("celj"), "ㄒㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("celk"), "ㄒㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cu"), "ㄒㄩ");
  XCTAssertEqual(composer.cnvSequence("cuf"), "ㄒㄩˊ");
  XCTAssertEqual(composer.cnvSequence("cuj"), "ㄒㄩˇ");
  XCTAssertEqual(composer.cnvSequence("cuk"), "ㄒㄩˋ");
  XCTAssertEqual(composer.cnvSequence("cuw"), "ㄒㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("cuwf"), "ㄒㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("cuwj"), "ㄒㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("cuwk"), "ㄒㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cum"), "ㄒㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("cumf"), "ㄒㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cumj"), "ㄒㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cumk"), "ㄒㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cun"), "ㄒㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("cunf"), "ㄒㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cunk"), "ㄒㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cul"), "ㄒㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("culf"), "ㄒㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("culj"), "ㄒㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("culk"), "ㄒㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("g"), "ㄓ");
  XCTAssertEqual(composer.cnvSequence("gf"), "ㄓˊ");
  XCTAssertEqual(composer.cnvSequence("gj"), "ㄓˇ");
  XCTAssertEqual(composer.cnvSequence("gk"), "ㄓˋ");
  XCTAssertEqual(composer.cnvSequence("ga"), "ㄓㄚ");
  XCTAssertEqual(composer.cnvSequence("gaf"), "ㄓㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gaj"), "ㄓㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gak"), "ㄓㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gr"), "ㄓㄜ");
  XCTAssertEqual(composer.cnvSequence("grf"), "ㄓㄜˊ");
  XCTAssertEqual(composer.cnvSequence("grj"), "ㄓㄜˇ");
  XCTAssertEqual(composer.cnvSequence("grk"), "ㄓㄜˋ");
  XCTAssertEqual(composer.cnvSequence("grd"), "ㄓㄜ˙");
  XCTAssertEqual(composer.cnvSequence("gi"), "ㄓㄞ");
  XCTAssertEqual(composer.cnvSequence("gif"), "ㄓㄞˊ");
  XCTAssertEqual(composer.cnvSequence("gij"), "ㄓㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gik"), "ㄓㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gqk"), "ㄓㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gz"), "ㄓㄠ");
  XCTAssertEqual(composer.cnvSequence("gzf"), "ㄓㄠˊ");
  XCTAssertEqual(composer.cnvSequence("gzj"), "ㄓㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gzk"), "ㄓㄠˋ");
  XCTAssertEqual(composer.cnvSequence("gp"), "ㄓㄡ");
  XCTAssertEqual(composer.cnvSequence("gpf"), "ㄓㄡˊ");
  XCTAssertEqual(composer.cnvSequence("gpj"), "ㄓㄡˇ");
  XCTAssertEqual(composer.cnvSequence("gpk"), "ㄓㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gm"), "ㄓㄢ");
  XCTAssertEqual(composer.cnvSequence("gmj"), "ㄓㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gmk"), "ㄓㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gn"), "ㄓㄣ");
  XCTAssertEqual(composer.cnvSequence("gnf"), "ㄓㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gnj"), "ㄓㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gnk"), "ㄓㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gt"), "ㄓㄤ");
  XCTAssertEqual(composer.cnvSequence("gtj"), "ㄓㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gtk"), "ㄓㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gl"), "ㄓㄥ");
  XCTAssertEqual(composer.cnvSequence("glj"), "ㄓㄥˇ");
  XCTAssertEqual(composer.cnvSequence("glk"), "ㄓㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gx"), "ㄓㄨ");
  XCTAssertEqual(composer.cnvSequence("gxf"), "ㄓㄨˊ");
  XCTAssertEqual(composer.cnvSequence("gxj"), "ㄓㄨˇ");
  XCTAssertEqual(composer.cnvSequence("gxk"), "ㄓㄨˋ");
  XCTAssertEqual(composer.cnvSequence("gxa"), "ㄓㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("gxaj"), "ㄓㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gxo"), "ㄓㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("gxof"), "ㄓㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("gxok"), "ㄓㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("gxi"), "ㄓㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("gxij"), "ㄓㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gxik"), "ㄓㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gxq"), "ㄓㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("gxqj"), "ㄓㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gxqk"), "ㄓㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gxm"), "ㄓㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("gxmj"), "ㄓㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gxmk"), "ㄓㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gxn"), "ㄓㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("gxnj"), "ㄓㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gxnk"), "ㄓㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gxt"), "ㄓㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("gxtj"), "ㄓㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gxtk"), "ㄓㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gxl"), "ㄓㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("gxlj"), "ㄓㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gxlk"), "ㄓㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("y"), "ㄔ");
  XCTAssertEqual(composer.cnvSequence("yf"), "ㄔˊ");
  XCTAssertEqual(composer.cnvSequence("yj"), "ㄔˇ");
  XCTAssertEqual(composer.cnvSequence("yk"), "ㄔˋ");
  XCTAssertEqual(composer.cnvSequence("ya"), "ㄔㄚ");
  XCTAssertEqual(composer.cnvSequence("yaf"), "ㄔㄚˊ");
  XCTAssertEqual(composer.cnvSequence("yaj"), "ㄔㄚˇ");
  XCTAssertEqual(composer.cnvSequence("yak"), "ㄔㄚˋ");
  XCTAssertEqual(composer.cnvSequence("yr"), "ㄔㄜ");
  XCTAssertEqual(composer.cnvSequence("yrj"), "ㄔㄜˇ");
  XCTAssertEqual(composer.cnvSequence("yrk"), "ㄔㄜˋ");
  XCTAssertEqual(composer.cnvSequence("yi"), "ㄔㄞ");
  XCTAssertEqual(composer.cnvSequence("yif"), "ㄔㄞˊ");
  XCTAssertEqual(composer.cnvSequence("yij"), "ㄔㄞˇ");
  XCTAssertEqual(composer.cnvSequence("yik"), "ㄔㄞˋ");
  XCTAssertEqual(composer.cnvSequence("yz"), "ㄔㄠ");
  XCTAssertEqual(composer.cnvSequence("yzf"), "ㄔㄠˊ");
  XCTAssertEqual(composer.cnvSequence("yzj"), "ㄔㄠˇ");
  XCTAssertEqual(composer.cnvSequence("yzk"), "ㄔㄠˋ");
  XCTAssertEqual(composer.cnvSequence("yp"), "ㄔㄡ");
  XCTAssertEqual(composer.cnvSequence("ypf"), "ㄔㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ypj"), "ㄔㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ypk"), "ㄔㄡˋ");
  XCTAssertEqual(composer.cnvSequence("ym"), "ㄔㄢ");
  XCTAssertEqual(composer.cnvSequence("ymf"), "ㄔㄢˊ");
  XCTAssertEqual(composer.cnvSequence("ymj"), "ㄔㄢˇ");
  XCTAssertEqual(composer.cnvSequence("ymk"), "ㄔㄢˋ");
  XCTAssertEqual(composer.cnvSequence("yn"), "ㄔㄣ");
  XCTAssertEqual(composer.cnvSequence("ynf"), "ㄔㄣˊ");
  XCTAssertEqual(composer.cnvSequence("ynj"), "ㄔㄣˇ");
  XCTAssertEqual(composer.cnvSequence("ynk"), "ㄔㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ynd"), "ㄔㄣ˙");
  XCTAssertEqual(composer.cnvSequence("yt"), "ㄔㄤ");
  XCTAssertEqual(composer.cnvSequence("ytf"), "ㄔㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ytj"), "ㄔㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ytk"), "ㄔㄤˋ");
  XCTAssertEqual(composer.cnvSequence("yl"), "ㄔㄥ");
  XCTAssertEqual(composer.cnvSequence("ylf"), "ㄔㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ylj"), "ㄔㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ylk"), "ㄔㄥˋ");
  XCTAssertEqual(composer.cnvSequence("yx"), "ㄔㄨ");
  XCTAssertEqual(composer.cnvSequence("yxf"), "ㄔㄨˊ");
  XCTAssertEqual(composer.cnvSequence("yxj"), "ㄔㄨˇ");
  XCTAssertEqual(composer.cnvSequence("yxk"), "ㄔㄨˋ");
  XCTAssertEqual(composer.cnvSequence("yxa"), "ㄔㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("yxaj"), "ㄔㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("yxak"), "ㄔㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("yxo"), "ㄔㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("yxok"), "ㄔㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("yxi"), "ㄔㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("yxif"), "ㄔㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("yxij"), "ㄔㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("yxik"), "ㄔㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("yxq"), "ㄔㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("yxqf"), "ㄔㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("yxqj"), "ㄔㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("yxqk"), "ㄔㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("yxm"), "ㄔㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("yxmf"), "ㄔㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("yxmj"), "ㄔㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("yxmk"), "ㄔㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("yxn"), "ㄔㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("yxnf"), "ㄔㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("yxnj"), "ㄔㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("yxt"), "ㄔㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("yxtf"), "ㄔㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("yxtj"), "ㄔㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("yxtk"), "ㄔㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("yxl"), "ㄔㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("yxlf"), "ㄔㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("yxlj"), "ㄔㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("yxlk"), "ㄔㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("c"), "ㄕ");
  XCTAssertEqual(composer.cnvSequence("cf"), "ㄕˊ");
  XCTAssertEqual(composer.cnvSequence("cj"), "ㄕˇ");
  XCTAssertEqual(composer.cnvSequence("ck"), "ㄕˋ");
  XCTAssertEqual(composer.cnvSequence("cd"), "ㄕ˙");
  XCTAssertEqual(composer.cnvSequence("ca"), "ㄕㄚ");
  XCTAssertEqual(composer.cnvSequence("caf"), "ㄕㄚˊ");
  XCTAssertEqual(composer.cnvSequence("caj"), "ㄕㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cak"), "ㄕㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cad"), "ㄕㄚ˙");
  XCTAssertEqual(composer.cnvSequence("cr"), "ㄕㄜ");
  XCTAssertEqual(composer.cnvSequence("crf"), "ㄕㄜˊ");
  XCTAssertEqual(composer.cnvSequence("crj"), "ㄕㄜˇ");
  XCTAssertEqual(composer.cnvSequence("crk"), "ㄕㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ci"), "ㄕㄞ");
  XCTAssertEqual(composer.cnvSequence("cij"), "ㄕㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cik"), "ㄕㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cqf"), "ㄕㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cz"), "ㄕㄠ");
  XCTAssertEqual(composer.cnvSequence("czf"), "ㄕㄠˊ");
  XCTAssertEqual(composer.cnvSequence("czj"), "ㄕㄠˇ");
  XCTAssertEqual(composer.cnvSequence("czk"), "ㄕㄠˋ");
  XCTAssertEqual(composer.cnvSequence("cp"), "ㄕㄡ");
  XCTAssertEqual(composer.cnvSequence("cpf"), "ㄕㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cpj"), "ㄕㄡˇ");
  XCTAssertEqual(composer.cnvSequence("cpk"), "ㄕㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cm"), "ㄕㄢ");
  XCTAssertEqual(composer.cnvSequence("cmf"), "ㄕㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cmj"), "ㄕㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cmk"), "ㄕㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cn"), "ㄕㄣ");
  XCTAssertEqual(composer.cnvSequence("cnf"), "ㄕㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cnj"), "ㄕㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cnk"), "ㄕㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ct"), "ㄕㄤ");
  XCTAssertEqual(composer.cnvSequence("ctj"), "ㄕㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ctk"), "ㄕㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ctd"), "ㄕㄤ˙");
  XCTAssertEqual(composer.cnvSequence("cl"), "ㄕㄥ");
  XCTAssertEqual(composer.cnvSequence("clf"), "ㄕㄥˊ");
  XCTAssertEqual(composer.cnvSequence("clj"), "ㄕㄥˇ");
  XCTAssertEqual(composer.cnvSequence("clk"), "ㄕㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cx"), "ㄕㄨ");
  XCTAssertEqual(composer.cnvSequence("cxf"), "ㄕㄨˊ");
  XCTAssertEqual(composer.cnvSequence("cxj"), "ㄕㄨˇ");
  XCTAssertEqual(composer.cnvSequence("cxk"), "ㄕㄨˋ");
  XCTAssertEqual(composer.cnvSequence("cxa"), "ㄕㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("cxaj"), "ㄕㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cxak"), "ㄕㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cxo"), "ㄕㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("cxok"), "ㄕㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("cxi"), "ㄕㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("cxij"), "ㄕㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cxik"), "ㄕㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cxq"), "ㄕㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("cxqf"), "ㄕㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cxqj"), "ㄕㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cxqk"), "ㄕㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("cxm"), "ㄕㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("cxmk"), "ㄕㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cxnj"), "ㄕㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cxnk"), "ㄕㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cxt"), "ㄕㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("cxtf"), "ㄕㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cxtj"), "ㄕㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cxtk"), "ㄕㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jk"), "ㄖˋ");
  XCTAssertEqual(composer.cnvSequence("jrj"), "ㄖㄜˇ");
  XCTAssertEqual(composer.cnvSequence("jrk"), "ㄖㄜˋ");
  XCTAssertEqual(composer.cnvSequence("jzf"), "ㄖㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jzj"), "ㄖㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jzk"), "ㄖㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jpf"), "ㄖㄡˊ");
  XCTAssertEqual(composer.cnvSequence("jpj"), "ㄖㄡˇ");
  XCTAssertEqual(composer.cnvSequence("jpk"), "ㄖㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jmf"), "ㄖㄢˊ");
  XCTAssertEqual(composer.cnvSequence("jmj"), "ㄖㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jmk"), "ㄖㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jnf"), "ㄖㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jnj"), "ㄖㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jnk"), "ㄖㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jt"), "ㄖㄤ");
  XCTAssertEqual(composer.cnvSequence("jtf"), "ㄖㄤˊ");
  XCTAssertEqual(composer.cnvSequence("jtj"), "ㄖㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jtk"), "ㄖㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jl"), "ㄖㄥ");
  XCTAssertEqual(composer.cnvSequence("jlf"), "ㄖㄥˊ");
  XCTAssertEqual(composer.cnvSequence("jlj"), "ㄖㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jlk"), "ㄖㄥˋ");
  XCTAssertEqual(composer.cnvSequence("jxf"), "ㄖㄨˊ");
  XCTAssertEqual(composer.cnvSequence("jxj"), "ㄖㄨˇ");
  XCTAssertEqual(composer.cnvSequence("jxk"), "ㄖㄨˋ");
  XCTAssertEqual(composer.cnvSequence("jxof"), "ㄖㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("jxok"), "ㄖㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("jxqf"), "ㄖㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("jxqj"), "ㄖㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("jxqk"), "ㄖㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jxmf"), "ㄖㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("jxmj"), "ㄖㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jxmk"), "ㄖㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jxnf"), "ㄖㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jxnj"), "ㄖㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jxnk"), "ㄖㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jxlf"), "ㄖㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("jxlj"), "ㄖㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jxlk"), "ㄖㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("q"), "ㄗ");
  XCTAssertEqual(composer.cnvSequence("qf"), "ㄗˊ");
  XCTAssertEqual(composer.cnvSequence("qj"), "ㄗˇ");
  XCTAssertEqual(composer.cnvSequence("qk"), "ㄗˋ");
  XCTAssertEqual(composer.cnvSequence("qd"), "ㄗ˙");
  XCTAssertEqual(composer.cnvSequence("qa"), "ㄗㄚ");
  XCTAssertEqual(composer.cnvSequence("qaf"), "ㄗㄚˊ");
  XCTAssertEqual(composer.cnvSequence("qaj"), "ㄗㄚˇ");
  XCTAssertEqual(composer.cnvSequence("qrf"), "ㄗㄜˊ");
  XCTAssertEqual(composer.cnvSequence("qrj"), "ㄗㄜˇ");
  XCTAssertEqual(composer.cnvSequence("qrk"), "ㄗㄜˋ");
  XCTAssertEqual(composer.cnvSequence("qi"), "ㄗㄞ");
  XCTAssertEqual(composer.cnvSequence("qij"), "ㄗㄞˇ");
  XCTAssertEqual(composer.cnvSequence("qik"), "ㄗㄞˋ");
  XCTAssertEqual(composer.cnvSequence("qqf"), "ㄗㄟˊ");
  XCTAssertEqual(composer.cnvSequence("qz"), "ㄗㄠ");
  XCTAssertEqual(composer.cnvSequence("qzf"), "ㄗㄠˊ");
  XCTAssertEqual(composer.cnvSequence("qzj"), "ㄗㄠˇ");
  XCTAssertEqual(composer.cnvSequence("qzk"), "ㄗㄠˋ");
  XCTAssertEqual(composer.cnvSequence("qp"), "ㄗㄡ");
  XCTAssertEqual(composer.cnvSequence("qpj"), "ㄗㄡˇ");
  XCTAssertEqual(composer.cnvSequence("qpk"), "ㄗㄡˋ");
  XCTAssertEqual(composer.cnvSequence("qm"), "ㄗㄢ");
  XCTAssertEqual(composer.cnvSequence("qmf"), "ㄗㄢˊ");
  XCTAssertEqual(composer.cnvSequence("qmj"), "ㄗㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qmk"), "ㄗㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qn"), "ㄗㄣ");
  XCTAssertEqual(composer.cnvSequence("qnj"), "ㄗㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qnk"), "ㄗㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qt"), "ㄗㄤ");
  XCTAssertEqual(composer.cnvSequence("qtj"), "ㄗㄤˇ");
  XCTAssertEqual(composer.cnvSequence("qtk"), "ㄗㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ql"), "ㄗㄥ");
  XCTAssertEqual(composer.cnvSequence("qlj"), "ㄗㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qlk"), "ㄗㄥˋ");
  XCTAssertEqual(composer.cnvSequence("qx"), "ㄗㄨ");
  XCTAssertEqual(composer.cnvSequence("qxf"), "ㄗㄨˊ");
  XCTAssertEqual(composer.cnvSequence("qxj"), "ㄗㄨˇ");
  XCTAssertEqual(composer.cnvSequence("qxk"), "ㄗㄨˋ");
  XCTAssertEqual(composer.cnvSequence("qxo"), "ㄗㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("qxof"), "ㄗㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("qxoj"), "ㄗㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("qxok"), "ㄗㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("qxod"), "ㄗㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("qxq"), "ㄗㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("qxqj"), "ㄗㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("qxqk"), "ㄗㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("qxm"), "ㄗㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("qxmj"), "ㄗㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("qxmk"), "ㄗㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("qxn"), "ㄗㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("qxnj"), "ㄗㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("qxnk"), "ㄗㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("qxl"), "ㄗㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("qxlj"), "ㄗㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("qxlk"), "ㄗㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("w"), "ㄘ");
  XCTAssertEqual(composer.cnvSequence("wf"), "ㄘˊ");
  XCTAssertEqual(composer.cnvSequence("wj"), "ㄘˇ");
  XCTAssertEqual(composer.cnvSequence("wk"), "ㄘˋ");
  XCTAssertEqual(composer.cnvSequence("wa"), "ㄘㄚ");
  XCTAssertEqual(composer.cnvSequence("waj"), "ㄘㄚˇ");
  XCTAssertEqual(composer.cnvSequence("wak"), "ㄘㄚˋ");
  XCTAssertEqual(composer.cnvSequence("wrk"), "ㄘㄜˋ");
  XCTAssertEqual(composer.cnvSequence("wi"), "ㄘㄞ");
  XCTAssertEqual(composer.cnvSequence("wif"), "ㄘㄞˊ");
  XCTAssertEqual(composer.cnvSequence("wij"), "ㄘㄞˇ");
  XCTAssertEqual(composer.cnvSequence("wik"), "ㄘㄞˋ");
  XCTAssertEqual(composer.cnvSequence("wz"), "ㄘㄠ");
  XCTAssertEqual(composer.cnvSequence("wzf"), "ㄘㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wzj"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wzk"), "ㄘㄠˋ");
  XCTAssertEqual(composer.cnvSequence("wp"), "ㄘㄡ");
  XCTAssertEqual(composer.cnvSequence("wpf"), "ㄘㄡˊ");
  XCTAssertEqual(composer.cnvSequence("wpj"), "ㄘㄡˇ");
  XCTAssertEqual(composer.cnvSequence("wpk"), "ㄘㄡˋ");
  XCTAssertEqual(composer.cnvSequence("wm"), "ㄘㄢ");
  XCTAssertEqual(composer.cnvSequence("wmf"), "ㄘㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wmj"), "ㄘㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wmk"), "ㄘㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wn"), "ㄘㄣ");
  XCTAssertEqual(composer.cnvSequence("wnf"), "ㄘㄣˊ");
  XCTAssertEqual(composer.cnvSequence("wt"), "ㄘㄤ");
  XCTAssertEqual(composer.cnvSequence("wtf"), "ㄘㄤˊ");
  XCTAssertEqual(composer.cnvSequence("wtj"), "ㄘㄤˇ");
  XCTAssertEqual(composer.cnvSequence("wtk"), "ㄘㄤˋ");
  XCTAssertEqual(composer.cnvSequence("wl"), "ㄘㄥ");
  XCTAssertEqual(composer.cnvSequence("wlf"), "ㄘㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wlj"), "ㄘㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wlk"), "ㄘㄥˋ");
  XCTAssertEqual(composer.cnvSequence("wx"), "ㄘㄨ");
  XCTAssertEqual(composer.cnvSequence("wxf"), "ㄘㄨˊ");
  XCTAssertEqual(composer.cnvSequence("wxj"), "ㄘㄨˇ");
  XCTAssertEqual(composer.cnvSequence("wxk"), "ㄘㄨˋ");
  XCTAssertEqual(composer.cnvSequence("wxo"), "ㄘㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("wxof"), "ㄘㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("wxoj"), "ㄘㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("wxok"), "ㄘㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("wxq"), "ㄘㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("wxqj"), "ㄘㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("wxqk"), "ㄘㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("wxm"), "ㄘㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("wxmf"), "ㄘㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("wxmj"), "ㄘㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("wxmk"), "ㄘㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("wxn"), "ㄘㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("wxnf"), "ㄘㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("wxnj"), "ㄘㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("wxnk"), "ㄘㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("wxl"), "ㄘㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("wxlf"), "ㄘㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("wxlj"), "ㄘㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("wxlk"), "ㄘㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("s"), "ㄙ");
  XCTAssertEqual(composer.cnvSequence("sj"), "ㄙˇ");
  XCTAssertEqual(composer.cnvSequence("sk"), "ㄙˋ");
  XCTAssertEqual(composer.cnvSequence("sa"), "ㄙㄚ");
  XCTAssertEqual(composer.cnvSequence("saj"), "ㄙㄚˇ");
  XCTAssertEqual(composer.cnvSequence("sak"), "ㄙㄚˋ");
  XCTAssertEqual(composer.cnvSequence("sad"), "ㄙㄚ˙");
  XCTAssertEqual(composer.cnvSequence("sr"), "ㄙㄜ");
  XCTAssertEqual(composer.cnvSequence("srk"), "ㄙㄜˋ");
  XCTAssertEqual(composer.cnvSequence("si"), "ㄙㄞ");
  XCTAssertEqual(composer.cnvSequence("sif"), "ㄙㄞˊ");
  XCTAssertEqual(composer.cnvSequence("sij"), "ㄙㄞˇ");
  XCTAssertEqual(composer.cnvSequence("sik"), "ㄙㄞˋ");
  XCTAssertEqual(composer.cnvSequence("sq"), "ㄙㄟ");
  XCTAssertEqual(composer.cnvSequence("sz"), "ㄙㄠ");
  XCTAssertEqual(composer.cnvSequence("szj"), "ㄙㄠˇ");
  XCTAssertEqual(composer.cnvSequence("szk"), "ㄙㄠˋ");
  XCTAssertEqual(composer.cnvSequence("sp"), "ㄙㄡ");
  XCTAssertEqual(composer.cnvSequence("spj"), "ㄙㄡˇ");
  XCTAssertEqual(composer.cnvSequence("spk"), "ㄙㄡˋ");
  XCTAssertEqual(composer.cnvSequence("sm"), "ㄙㄢ");
  XCTAssertEqual(composer.cnvSequence("smj"), "ㄙㄢˇ");
  XCTAssertEqual(composer.cnvSequence("smk"), "ㄙㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sn"), "ㄙㄣ");
  XCTAssertEqual(composer.cnvSequence("snj"), "ㄙㄣˇ");
  XCTAssertEqual(composer.cnvSequence("st"), "ㄙㄤ");
  XCTAssertEqual(composer.cnvSequence("stj"), "ㄙㄤˇ");
  XCTAssertEqual(composer.cnvSequence("stk"), "ㄙㄤˋ");
  XCTAssertEqual(composer.cnvSequence("sl"), "ㄙㄥ");
  XCTAssertEqual(composer.cnvSequence("slk"), "ㄙㄥˋ");
  XCTAssertEqual(composer.cnvSequence("sx"), "ㄙㄨ");
  XCTAssertEqual(composer.cnvSequence("sxf"), "ㄙㄨˊ");
  XCTAssertEqual(composer.cnvSequence("sxj"), "ㄙㄨˇ");
  XCTAssertEqual(composer.cnvSequence("sxk"), "ㄙㄨˋ");
  XCTAssertEqual(composer.cnvSequence("sxo"), "ㄙㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("sxof"), "ㄙㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("sxoj"), "ㄙㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("sxok"), "ㄙㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("sxq"), "ㄙㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("sxqf"), "ㄙㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sxqj"), "ㄙㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("sxqk"), "ㄙㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("sxm"), "ㄙㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("sxmj"), "ㄙㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sxmk"), "ㄙㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sxn"), "ㄙㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("sxnj"), "ㄙㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sxnk"), "ㄙㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sxl"), "ㄙㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("sxlf"), "ㄙㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sxlj"), "ㄙㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sxlk"), "ㄙㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("a"), "ㄚ");
  XCTAssertEqual(composer.cnvSequence("af"), "ㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ak"), "ㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ad"), "ㄚ˙");
  XCTAssertEqual(composer.cnvSequence("o"), "ㄛ");
  XCTAssertEqual(composer.cnvSequence("of"), "ㄛˊ");
  XCTAssertEqual(composer.cnvSequence("oj"), "ㄛˇ");
  XCTAssertEqual(composer.cnvSequence("ok"), "ㄛˋ");
  XCTAssertEqual(composer.cnvSequence("r"), "ㄜ");
  XCTAssertEqual(composer.cnvSequence("rf"), "ㄜˊ");
  XCTAssertEqual(composer.cnvSequence("rj"), "ㄜˇ");
  XCTAssertEqual(composer.cnvSequence("rk"), "ㄜˋ");
  // XCTAssertEqual(composer.cnvSequence("wf"), "ㄝˊ");
  // XCTAssertEqual(composer.cnvSequence("wj"), "ㄝˇ");
  // XCTAssertEqual(composer.cnvSequence("wk"), "ㄝˋ");
  // XCTAssertEqual(composer.cnvSequence("wd"), "ㄝ˙");
  XCTAssertEqual(composer.cnvSequence("i"), "ㄞ");
  XCTAssertEqual(composer.cnvSequence("if"), "ㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ij"), "ㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ik"), "ㄞˋ");
  // XCTAssertEqual(composer.cnvSequence("qk"), "ㄟˋ");
  XCTAssertEqual(composer.cnvSequence("z"), "ㄠ");
  XCTAssertEqual(composer.cnvSequence("zf"), "ㄠˊ");
  XCTAssertEqual(composer.cnvSequence("zj"), "ㄠˇ");
  XCTAssertEqual(composer.cnvSequence("zk"), "ㄠˋ");
  XCTAssertEqual(composer.cnvSequence("p "), "ㄡ ");
  XCTAssertEqual(composer.cnvSequence("pf"), "ㄡˊ");
  XCTAssertEqual(composer.cnvSequence("pj"), "ㄡˇ");
  XCTAssertEqual(composer.cnvSequence("pk"), "ㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pd"), "ㄡ˙");
  XCTAssertEqual(composer.cnvSequence("m "), "ㄢ ");
  XCTAssertEqual(composer.cnvSequence("mf"), "ㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mj"), "ㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mk"), "ㄢˋ");
  XCTAssertEqual(composer.cnvSequence("n "), "ㄣ ");
  XCTAssertEqual(composer.cnvSequence("nf"), "ㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nj"), "ㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nk"), "ㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nd"), "ㄣ˙");
  XCTAssertEqual(composer.cnvSequence("t "), "ㄤ ");
  XCTAssertEqual(composer.cnvSequence("tf"), "ㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tj"), "ㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tk"), "ㄤˋ");
  XCTAssertEqual(composer.cnvSequence("l "), "ㄥ ");
  XCTAssertEqual(composer.cnvSequence("lk"), "ㄥˋ");
  XCTAssertEqual(composer.cnvSequence("h "), "ㄦ ");
  XCTAssertEqual(composer.cnvSequence("hf"), "ㄦˊ");
  XCTAssertEqual(composer.cnvSequence("hj"), "ㄦˇ");
  XCTAssertEqual(composer.cnvSequence("hk"), "ㄦˋ");
  XCTAssertEqual(composer.cnvSequence("hd"), "ㄦ˙");
  XCTAssertEqual(composer.cnvSequence("e"), "ㄧ");
  XCTAssertEqual(composer.cnvSequence("ef"), "ㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ej"), "ㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ek"), "ㄧˋ");
  XCTAssertEqual(composer.cnvSequence("ea"), "ㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("eaf"), "ㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("eaj"), "ㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("eak"), "ㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ead"), "ㄧㄚ˙");
  XCTAssertEqual(composer.cnvSequence("eo"), "ㄧㄛ");
  XCTAssertEqual(composer.cnvSequence("eod"), "ㄧㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ew"), "ㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("ewf"), "ㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("ewj"), "ㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ewk"), "ㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ewd"), "ㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("eif"), "ㄧㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ez"), "ㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("ezf"), "ㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ezj"), "ㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ezk"), "ㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ep"), "ㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("epf"), "ㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("epj"), "ㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("epk"), "ㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("em"), "ㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("emf"), "ㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("emj"), "ㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("emk"), "ㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("en"), "ㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("enf"), "ㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("enj"), "ㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("enk"), "ㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("et"), "ㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("etf"), "ㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("etj"), "ㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("etk"), "ㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("el"), "ㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("elf"), "ㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("elj"), "ㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("elk"), "ㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("x"), "ㄨ");
  XCTAssertEqual(composer.cnvSequence("xf"), "ㄨˊ");
  XCTAssertEqual(composer.cnvSequence("xj"), "ㄨˇ");
  XCTAssertEqual(composer.cnvSequence("xk"), "ㄨˋ");
  XCTAssertEqual(composer.cnvSequence("xa"), "ㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("xaf"), "ㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xaj"), "ㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xak"), "ㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xad"), "ㄨㄚ˙");
  XCTAssertEqual(composer.cnvSequence("xo"), "ㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("xoj"), "ㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("xok"), "ㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("xi"), "ㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("xij"), "ㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xik"), "ㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xq"), "ㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("xqf"), "ㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xqj"), "ㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("xqk"), "ㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("xm"), "ㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("xmf"), "ㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xmj"), "ㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xmk"), "ㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xn"), "ㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("xnf"), "ㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xnj"), "ㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xnk"), "ㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xt"), "ㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("xtf"), "ㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xtj"), "ㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xtk"), "ㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xl"), "ㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("xlj"), "ㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xlk"), "ㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("u"), "ㄩ");
  XCTAssertEqual(composer.cnvSequence("uf"), "ㄩˊ");
  XCTAssertEqual(composer.cnvSequence("uj"), "ㄩˇ");
  XCTAssertEqual(composer.cnvSequence("uk"), "ㄩˋ");
  XCTAssertEqual(composer.cnvSequence("uw"), "ㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("uwj"), "ㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("uwk"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("um"), "ㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("umf"), "ㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("umj"), "ㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("umk"), "ㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("un"), "ㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("unf"), "ㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("unj"), "ㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("unk"), "ㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ul"), "ㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("ulf"), "ㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ulj"), "ㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ulk"), "ㄩㄥˋ");
}
- (void)test_Zhuyin_HsuKeys {
  // Testing handleHsu();
  Composer composer = Composer("", ofHsu);
  XCTAssertEqual(composer.cnvSequence("kek"), "ㄎㄧㄤ");
  // AreEqual(Composer.cnvSequence("vezf"), "ㄍㄧㄠˊ");
  // AreEqual(Composer.cnvSequence("gen"), "ㄍㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("bekd"), "ㄅㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("bekj"), "ㄅㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dxk"), "ㄉㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("by"), "ㄅㄚ");
  XCTAssertEqual(composer.cnvSequence("byd"), "ㄅㄚˊ");
  XCTAssertEqual(composer.cnvSequence("byf"), "ㄅㄚˇ");
  XCTAssertEqual(composer.cnvSequence("byj"), "ㄅㄚˋ");
  XCTAssertEqual(composer.cnvSequence("bys"), "ㄅㄚ˙");
  XCTAssertEqual(composer.cnvSequence("bh"), "ㄅㄛ");
  XCTAssertEqual(composer.cnvSequence("bhd"), "ㄅㄛˊ");
  XCTAssertEqual(composer.cnvSequence("bhf"), "ㄅㄛˇ");
  XCTAssertEqual(composer.cnvSequence("bhj"), "ㄅㄛˋ");
  XCTAssertEqual(composer.cnvSequence("bhs"), "ㄅㄛ˙");
  XCTAssertEqual(composer.cnvSequence("bi"), "ㄅㄞ");
  XCTAssertEqual(composer.cnvSequence("bid"), "ㄅㄞˊ");
  XCTAssertEqual(composer.cnvSequence("bif"), "ㄅㄞˇ");
  XCTAssertEqual(composer.cnvSequence("bij"), "ㄅㄞˋ");
  XCTAssertEqual(composer.cnvSequence("bis"), "ㄅㄞ˙");
  XCTAssertEqual(composer.cnvSequence("ba"), "ㄅㄟ");
  XCTAssertEqual(composer.cnvSequence("baf"), "ㄅㄟˇ");
  XCTAssertEqual(composer.cnvSequence("baj"), "ㄅㄟˋ");
  XCTAssertEqual(composer.cnvSequence("bas"), "ㄅㄟ˙");
  XCTAssertEqual(composer.cnvSequence("bw"), "ㄅㄠ");
  XCTAssertEqual(composer.cnvSequence("bwd"), "ㄅㄠˊ");
  XCTAssertEqual(composer.cnvSequence("bwf"), "ㄅㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bwj"), "ㄅㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bm"), "ㄅㄢ");
  XCTAssertEqual(composer.cnvSequence("bmf"), "ㄅㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bmj"), "ㄅㄢˋ");
  XCTAssertEqual(composer.cnvSequence("bn"), "ㄅㄣ");
  XCTAssertEqual(composer.cnvSequence("bnf"), "ㄅㄣˇ");
  XCTAssertEqual(composer.cnvSequence("bnj"), "ㄅㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bk"), "ㄅㄤ");
  XCTAssertEqual(composer.cnvSequence("bkf"), "ㄅㄤˇ");
  XCTAssertEqual(composer.cnvSequence("bkj"), "ㄅㄤˋ");
  XCTAssertEqual(composer.cnvSequence("bl"), "ㄅㄥ");
  XCTAssertEqual(composer.cnvSequence("bld"), "ㄅㄥˊ");
  XCTAssertEqual(composer.cnvSequence("blf"), "ㄅㄥˇ");
  XCTAssertEqual(composer.cnvSequence("blj"), "ㄅㄥˋ");
  XCTAssertEqual(composer.cnvSequence("be"), "ㄅㄧ");
  XCTAssertEqual(composer.cnvSequence("bed"), "ㄅㄧˊ");
  XCTAssertEqual(composer.cnvSequence("bef"), "ㄅㄧˇ");
  XCTAssertEqual(composer.cnvSequence("bej"), "ㄅㄧˋ");
  XCTAssertEqual(composer.cnvSequence("bee"), "ㄅㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("beed"), "ㄅㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("beef"), "ㄅㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("beej"), "ㄅㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("bew"), "ㄅㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("bewf"), "ㄅㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("bewj"), "ㄅㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("bem"), "ㄅㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("bemd"), "ㄅㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("bemf"), "ㄅㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("bemj"), "ㄅㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ben"), "ㄅㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("benf"), "ㄅㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("benj"), "ㄅㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("bel"), "ㄅㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("belf"), "ㄅㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("belj"), "ㄅㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("bx"), "ㄅㄨ");
  XCTAssertEqual(composer.cnvSequence("bxd"), "ㄅㄨˊ");
  XCTAssertEqual(composer.cnvSequence("bxf"), "ㄅㄨˇ");
  XCTAssertEqual(composer.cnvSequence("bxj"), "ㄅㄨˋ");
  XCTAssertEqual(composer.cnvSequence("py"), "ㄆㄚ");
  XCTAssertEqual(composer.cnvSequence("pyd"), "ㄆㄚˊ");
  XCTAssertEqual(composer.cnvSequence("pyf"), "ㄆㄚˇ");
  XCTAssertEqual(composer.cnvSequence("pyj"), "ㄆㄚˋ");
  XCTAssertEqual(composer.cnvSequence("pys"), "ㄆㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ph"), "ㄆㄛ");
  XCTAssertEqual(composer.cnvSequence("phd"), "ㄆㄛˊ");
  XCTAssertEqual(composer.cnvSequence("phf"), "ㄆㄛˇ");
  XCTAssertEqual(composer.cnvSequence("phj"), "ㄆㄛˋ");
  XCTAssertEqual(composer.cnvSequence("pi"), "ㄆㄞ");
  XCTAssertEqual(composer.cnvSequence("pid"), "ㄆㄞˊ");
  XCTAssertEqual(composer.cnvSequence("pif"), "ㄆㄞˇ");
  XCTAssertEqual(composer.cnvSequence("pij"), "ㄆㄞˋ");
  XCTAssertEqual(composer.cnvSequence("pa"), "ㄆㄟ");
  XCTAssertEqual(composer.cnvSequence("pad"), "ㄆㄟˊ");
  XCTAssertEqual(composer.cnvSequence("paf"), "ㄆㄟˇ");
  XCTAssertEqual(composer.cnvSequence("paj"), "ㄆㄟˋ");
  XCTAssertEqual(composer.cnvSequence("pw"), "ㄆㄠ");
  XCTAssertEqual(composer.cnvSequence("pwd"), "ㄆㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pwf"), "ㄆㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pwj"), "ㄆㄠˋ");
  XCTAssertEqual(composer.cnvSequence("po"), "ㄆㄡ");
  XCTAssertEqual(composer.cnvSequence("pod"), "ㄆㄡˊ");
  XCTAssertEqual(composer.cnvSequence("pof"), "ㄆㄡˇ");
  XCTAssertEqual(composer.cnvSequence("poj"), "ㄆㄡˋ");
  XCTAssertEqual(composer.cnvSequence("pm"), "ㄆㄢ");
  XCTAssertEqual(composer.cnvSequence("pmd"), "ㄆㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pmf"), "ㄆㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pmj"), "ㄆㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pn"), "ㄆㄣ");
  XCTAssertEqual(composer.cnvSequence("pnd"), "ㄆㄣˊ");
  XCTAssertEqual(composer.cnvSequence("pnf"), "ㄆㄣˇ");
  XCTAssertEqual(composer.cnvSequence("pnj"), "ㄆㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pk"), "ㄆㄤ");
  XCTAssertEqual(composer.cnvSequence("pkd"), "ㄆㄤˊ");
  XCTAssertEqual(composer.cnvSequence("pkf"), "ㄆㄤˇ");
  XCTAssertEqual(composer.cnvSequence("pkj"), "ㄆㄤˋ");
  XCTAssertEqual(composer.cnvSequence("pl"), "ㄆㄥ");
  XCTAssertEqual(composer.cnvSequence("pld"), "ㄆㄥˊ");
  XCTAssertEqual(composer.cnvSequence("plf"), "ㄆㄥˇ");
  XCTAssertEqual(composer.cnvSequence("plj"), "ㄆㄥˋ");
  XCTAssertEqual(composer.cnvSequence("pe"), "ㄆㄧ");
  XCTAssertEqual(composer.cnvSequence("ped"), "ㄆㄧˊ");
  XCTAssertEqual(composer.cnvSequence("pef"), "ㄆㄧˇ");
  XCTAssertEqual(composer.cnvSequence("pej"), "ㄆㄧˋ");
  XCTAssertEqual(composer.cnvSequence("pey"), "ㄆㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("pee"), "ㄆㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("peef"), "ㄆㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("peej"), "ㄆㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("pew"), "ㄆㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("pewd"), "ㄆㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("pewf"), "ㄆㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("pewj"), "ㄆㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("pem"), "ㄆㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("pemd"), "ㄆㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("pemf"), "ㄆㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("pemj"), "ㄆㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("pen"), "ㄆㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("pend"), "ㄆㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("penf"), "ㄆㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("penj"), "ㄆㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("pel"), "ㄆㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("peld"), "ㄆㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("pelf"), "ㄆㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("pelj"), "ㄆㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("px"), "ㄆㄨ");
  XCTAssertEqual(composer.cnvSequence("pxd"), "ㄆㄨˊ");
  XCTAssertEqual(composer.cnvSequence("pxf"), "ㄆㄨˇ");
  XCTAssertEqual(composer.cnvSequence("pxj"), "ㄆㄨˋ");
  XCTAssertEqual(composer.cnvSequence("my"), "ㄇㄚ");
  XCTAssertEqual(composer.cnvSequence("myd"), "ㄇㄚˊ");
  XCTAssertEqual(composer.cnvSequence("myf"), "ㄇㄚˇ");
  XCTAssertEqual(composer.cnvSequence("myj"), "ㄇㄚˋ");
  XCTAssertEqual(composer.cnvSequence("mys"), "ㄇㄚ˙");
  XCTAssertEqual(composer.cnvSequence("mh"), "ㄇㄛ");
  XCTAssertEqual(composer.cnvSequence("mhd"), "ㄇㄛˊ");
  XCTAssertEqual(composer.cnvSequence("mhf"), "ㄇㄛˇ");
  XCTAssertEqual(composer.cnvSequence("mhj"), "ㄇㄛˋ");
  XCTAssertEqual(composer.cnvSequence("mhs"), "ㄇㄛ˙");
  XCTAssertEqual(composer.cnvSequence("mg"), "ㄇㄜ");
  XCTAssertEqual(composer.cnvSequence("mgj"), "ㄇㄜˋ");
  XCTAssertEqual(composer.cnvSequence("mgs"), "ㄇㄜ˙");
  XCTAssertEqual(composer.cnvSequence("mi"), "ㄇㄞ");
  XCTAssertEqual(composer.cnvSequence("mid"), "ㄇㄞˊ");
  XCTAssertEqual(composer.cnvSequence("mif"), "ㄇㄞˇ");
  XCTAssertEqual(composer.cnvSequence("mij"), "ㄇㄞˋ");
  XCTAssertEqual(composer.cnvSequence("mad"), "ㄇㄟˊ");
  XCTAssertEqual(composer.cnvSequence("maf"), "ㄇㄟˇ");
  XCTAssertEqual(composer.cnvSequence("maj"), "ㄇㄟˋ");
  XCTAssertEqual(composer.cnvSequence("mw"), "ㄇㄠ");
  XCTAssertEqual(composer.cnvSequence("mwd"), "ㄇㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mwf"), "ㄇㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mwj"), "ㄇㄠˋ");
  XCTAssertEqual(composer.cnvSequence("mod"), "ㄇㄡˊ");
  XCTAssertEqual(composer.cnvSequence("mof"), "ㄇㄡˇ");
  XCTAssertEqual(composer.cnvSequence("moj"), "ㄇㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mm"), "ㄇㄢ");
  XCTAssertEqual(composer.cnvSequence("mmd"), "ㄇㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mmf"), "ㄇㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mmj"), "ㄇㄢˋ");
  XCTAssertEqual(composer.cnvSequence("mn"), "ㄇㄣ");
  XCTAssertEqual(composer.cnvSequence("mnd"), "ㄇㄣˊ");
  XCTAssertEqual(composer.cnvSequence("mnf"), "ㄇㄣˇ");
  XCTAssertEqual(composer.cnvSequence("mnj"), "ㄇㄣˋ");
  XCTAssertEqual(composer.cnvSequence("mns"), "ㄇㄣ˙");
  XCTAssertEqual(composer.cnvSequence("mk"), "ㄇㄤ");
  XCTAssertEqual(composer.cnvSequence("mkd"), "ㄇㄤˊ");
  XCTAssertEqual(composer.cnvSequence("mkf"), "ㄇㄤˇ");
  XCTAssertEqual(composer.cnvSequence("mkj"), "ㄇㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ml"), "ㄇㄥ");
  XCTAssertEqual(composer.cnvSequence("mld"), "ㄇㄥˊ");
  XCTAssertEqual(composer.cnvSequence("mlf"), "ㄇㄥˇ");
  XCTAssertEqual(composer.cnvSequence("mlj"), "ㄇㄥˋ");
  XCTAssertEqual(composer.cnvSequence("me"), "ㄇㄧ");
  XCTAssertEqual(composer.cnvSequence("med"), "ㄇㄧˊ");
  XCTAssertEqual(composer.cnvSequence("mef"), "ㄇㄧˇ");
  XCTAssertEqual(composer.cnvSequence("mej"), "ㄇㄧˋ");
  XCTAssertEqual(composer.cnvSequence("mee"), "ㄇㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("meed"), "ㄇㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("meej"), "ㄇㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("mew"), "ㄇㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("mewd"), "ㄇㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("mewf"), "ㄇㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("mewj"), "ㄇㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("meod"), "ㄇㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("meof"), "ㄇㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("meoj"), "ㄇㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("mem"), "ㄇㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("memd"), "ㄇㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("memf"), "ㄇㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("memj"), "ㄇㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("men"), "ㄇㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("mend"), "ㄇㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("menf"), "ㄇㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("meld"), "ㄇㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("melf"), "ㄇㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("melj"), "ㄇㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("mxd"), "ㄇㄨˊ");
  XCTAssertEqual(composer.cnvSequence("mxf"), "ㄇㄨˇ");
  XCTAssertEqual(composer.cnvSequence("mxj"), "ㄇㄨˋ");
  XCTAssertEqual(composer.cnvSequence("fy"), "ㄈㄚ");
  XCTAssertEqual(composer.cnvSequence("fyd"), "ㄈㄚˊ");
  XCTAssertEqual(composer.cnvSequence("fyf"), "ㄈㄚˇ");
  XCTAssertEqual(composer.cnvSequence("fyj"), "ㄈㄚˋ");
  XCTAssertEqual(composer.cnvSequence("fhd"), "ㄈㄛˊ");
  XCTAssertEqual(composer.cnvSequence("fa"), "ㄈㄟ");
  XCTAssertEqual(composer.cnvSequence("fad"), "ㄈㄟˊ");
  XCTAssertEqual(composer.cnvSequence("faf"), "ㄈㄟˇ");
  XCTAssertEqual(composer.cnvSequence("faj"), "ㄈㄟˋ");
  XCTAssertEqual(composer.cnvSequence("fo"), "ㄈㄡ");
  XCTAssertEqual(composer.cnvSequence("fod"), "ㄈㄡˊ");
  XCTAssertEqual(composer.cnvSequence("fof"), "ㄈㄡˇ");
  XCTAssertEqual(composer.cnvSequence("foj"), "ㄈㄡˋ");
  XCTAssertEqual(composer.cnvSequence("fm"), "ㄈㄢ");
  XCTAssertEqual(composer.cnvSequence("fmd"), "ㄈㄢˊ");
  XCTAssertEqual(composer.cnvSequence("fmf"), "ㄈㄢˇ");
  XCTAssertEqual(composer.cnvSequence("fmj"), "ㄈㄢˋ");
  XCTAssertEqual(composer.cnvSequence("fn"), "ㄈㄣ");
  XCTAssertEqual(composer.cnvSequence("fnd"), "ㄈㄣˊ");
  XCTAssertEqual(composer.cnvSequence("fnf"), "ㄈㄣˇ");
  XCTAssertEqual(composer.cnvSequence("fnj"), "ㄈㄣˋ");
  XCTAssertEqual(composer.cnvSequence("fns"), "ㄈㄣ˙");
  XCTAssertEqual(composer.cnvSequence("fk"), "ㄈㄤ");
  XCTAssertEqual(composer.cnvSequence("fkd"), "ㄈㄤˊ");
  XCTAssertEqual(composer.cnvSequence("fkf"), "ㄈㄤˇ");
  XCTAssertEqual(composer.cnvSequence("fkj"), "ㄈㄤˋ");
  XCTAssertEqual(composer.cnvSequence("fl"), "ㄈㄥ");
  XCTAssertEqual(composer.cnvSequence("fld"), "ㄈㄥˊ");
  XCTAssertEqual(composer.cnvSequence("flf"), "ㄈㄥˇ");
  XCTAssertEqual(composer.cnvSequence("flj"), "ㄈㄥˋ");
  XCTAssertEqual(composer.cnvSequence("fewj"), "ㄈㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("fx"), "ㄈㄨ");
  XCTAssertEqual(composer.cnvSequence("fxd"), "ㄈㄨˊ");
  XCTAssertEqual(composer.cnvSequence("fxf"), "ㄈㄨˇ");
  XCTAssertEqual(composer.cnvSequence("fxj"), "ㄈㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dy"), "ㄉㄚ");
  XCTAssertEqual(composer.cnvSequence("dyd"), "ㄉㄚˊ");
  XCTAssertEqual(composer.cnvSequence("dyf"), "ㄉㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dyj"), "ㄉㄚˋ");
  XCTAssertEqual(composer.cnvSequence("dys"), "ㄉㄚ˙");
  XCTAssertEqual(composer.cnvSequence("dg"), "ㄉㄜ");
  XCTAssertEqual(composer.cnvSequence("dgd"), "ㄉㄜˊ");
  XCTAssertEqual(composer.cnvSequence("dgs"), "ㄉㄜ˙");
  XCTAssertEqual(composer.cnvSequence("di"), "ㄉㄞ");
  XCTAssertEqual(composer.cnvSequence("dif"), "ㄉㄞˇ");
  XCTAssertEqual(composer.cnvSequence("dij"), "ㄉㄞˋ");
  XCTAssertEqual(composer.cnvSequence("daf"), "ㄉㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dw"), "ㄉㄠ");
  XCTAssertEqual(composer.cnvSequence("dwd"), "ㄉㄠˊ");
  XCTAssertEqual(composer.cnvSequence("dwf"), "ㄉㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dwj"), "ㄉㄠˋ");
  XCTAssertEqual(composer.cnvSequence("do"), "ㄉㄡ");
  XCTAssertEqual(composer.cnvSequence("dod"), "ㄉㄡˊ");
  XCTAssertEqual(composer.cnvSequence("dof"), "ㄉㄡˇ");
  XCTAssertEqual(composer.cnvSequence("doj"), "ㄉㄡˋ");
  XCTAssertEqual(composer.cnvSequence("dm"), "ㄉㄢ");
  XCTAssertEqual(composer.cnvSequence("dmf"), "ㄉㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dmj"), "ㄉㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dnj"), "ㄉㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dk"), "ㄉㄤ");
  XCTAssertEqual(composer.cnvSequence("dkf"), "ㄉㄤˇ");
  XCTAssertEqual(composer.cnvSequence("dkj"), "ㄉㄤˋ");
  XCTAssertEqual(composer.cnvSequence("dl"), "ㄉㄥ");
  XCTAssertEqual(composer.cnvSequence("dlf"), "ㄉㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dlj"), "ㄉㄥˋ");
  XCTAssertEqual(composer.cnvSequence("de"), "ㄉㄧ");
  XCTAssertEqual(composer.cnvSequence("ded"), "ㄉㄧˊ");
  XCTAssertEqual(composer.cnvSequence("def"), "ㄉㄧˇ");
  XCTAssertEqual(composer.cnvSequence("dej"), "ㄉㄧˋ");
  XCTAssertEqual(composer.cnvSequence("deyf"), "ㄉㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("dee"), "ㄉㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("deed"), "ㄉㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("deef"), "ㄉㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("deej"), "ㄉㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("dew"), "ㄉㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("dewf"), "ㄉㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("dewj"), "ㄉㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("deo"), "ㄉㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("dem"), "ㄉㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("demd"), "ㄉㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("demf"), "ㄉㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("demj"), "ㄉㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("del"), "ㄉㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("deld"), "ㄉㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("delf"), "ㄉㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("delj"), "ㄉㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("dx"), "ㄉㄨ");
  XCTAssertEqual(composer.cnvSequence("dxd"), "ㄉㄨˊ");
  XCTAssertEqual(composer.cnvSequence("dxf"), "ㄉㄨˇ");
  XCTAssertEqual(composer.cnvSequence("dxj"), "ㄉㄨˋ");
  XCTAssertEqual(composer.cnvSequence("dxh"), "ㄉㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("dxhd"), "ㄉㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("dxhf"), "ㄉㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("dxhj"), "ㄉㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("dxhs"), "ㄉㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("dxa"), "ㄉㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("dxaf"), "ㄉㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("dxaj"), "ㄉㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("dxm"), "ㄉㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("dxmf"), "ㄉㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("dxmj"), "ㄉㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("dxn"), "ㄉㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("dxnf"), "ㄉㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("dxnj"), "ㄉㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("dxl"), "ㄉㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("dxlf"), "ㄉㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("dxlj"), "ㄉㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ty"), "ㄊㄚ");
  XCTAssertEqual(composer.cnvSequence("tyf"), "ㄊㄚˇ");
  XCTAssertEqual(composer.cnvSequence("tyj"), "ㄊㄚˋ");
  XCTAssertEqual(composer.cnvSequence("tgj"), "ㄊㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ti"), "ㄊㄞ");
  XCTAssertEqual(composer.cnvSequence("tid"), "ㄊㄞˊ");
  XCTAssertEqual(composer.cnvSequence("tif"), "ㄊㄞˇ");
  XCTAssertEqual(composer.cnvSequence("tij"), "ㄊㄞˋ");
  XCTAssertEqual(composer.cnvSequence("tis"), "ㄊㄞ˙");
  XCTAssertEqual(composer.cnvSequence("tw"), "ㄊㄠ");
  XCTAssertEqual(composer.cnvSequence("twd"), "ㄊㄠˊ");
  XCTAssertEqual(composer.cnvSequence("twf"), "ㄊㄠˇ");
  XCTAssertEqual(composer.cnvSequence("twj"), "ㄊㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tws"), "ㄊㄠ˙");
  XCTAssertEqual(composer.cnvSequence("to"), "ㄊㄡ");
  XCTAssertEqual(composer.cnvSequence("tod"), "ㄊㄡˊ");
  XCTAssertEqual(composer.cnvSequence("tof"), "ㄊㄡˇ");
  XCTAssertEqual(composer.cnvSequence("toj"), "ㄊㄡˋ");
  XCTAssertEqual(composer.cnvSequence("tos"), "ㄊㄡ˙");
  XCTAssertEqual(composer.cnvSequence("tm"), "ㄊㄢ");
  XCTAssertEqual(composer.cnvSequence("tmd"), "ㄊㄢˊ");
  XCTAssertEqual(composer.cnvSequence("tmf"), "ㄊㄢˇ");
  XCTAssertEqual(composer.cnvSequence("tmj"), "ㄊㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tk"), "ㄊㄤ");
  XCTAssertEqual(composer.cnvSequence("tkd"), "ㄊㄤˊ");
  XCTAssertEqual(composer.cnvSequence("tkf"), "ㄊㄤˇ");
  XCTAssertEqual(composer.cnvSequence("tkj"), "ㄊㄤˋ");
  XCTAssertEqual(composer.cnvSequence("tl"), "ㄊㄥ");
  XCTAssertEqual(composer.cnvSequence("tld"), "ㄊㄥˊ");
  XCTAssertEqual(composer.cnvSequence("tlj"), "ㄊㄥˋ");
  XCTAssertEqual(composer.cnvSequence("te"), "ㄊㄧ");
  XCTAssertEqual(composer.cnvSequence("ted"), "ㄊㄧˊ");
  XCTAssertEqual(composer.cnvSequence("tef"), "ㄊㄧˇ");
  XCTAssertEqual(composer.cnvSequence("tej"), "ㄊㄧˋ");
  XCTAssertEqual(composer.cnvSequence("tee"), "ㄊㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("teed"), "ㄊㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("teef"), "ㄊㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("teej"), "ㄊㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("tew"), "ㄊㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("tewd"), "ㄊㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("tewf"), "ㄊㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("tewj"), "ㄊㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("tem"), "ㄊㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("temd"), "ㄊㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("temf"), "ㄊㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("temj"), "ㄊㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("tel"), "ㄊㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("teld"), "ㄊㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("telf"), "ㄊㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("telj"), "ㄊㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("tx"), "ㄊㄨ");
  XCTAssertEqual(composer.cnvSequence("txd"), "ㄊㄨˊ");
  XCTAssertEqual(composer.cnvSequence("txf"), "ㄊㄨˇ");
  XCTAssertEqual(composer.cnvSequence("txj"), "ㄊㄨˋ");
  XCTAssertEqual(composer.cnvSequence("txh"), "ㄊㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("txhd"), "ㄊㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("txhf"), "ㄊㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("txhj"), "ㄊㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("txa"), "ㄊㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("txad"), "ㄊㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("txaf"), "ㄊㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("txaj"), "ㄊㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("txm"), "ㄊㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("txmd"), "ㄊㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("txmf"), "ㄊㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("txmj"), "ㄊㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("txn"), "ㄊㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("txnd"), "ㄊㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("txnf"), "ㄊㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("txnj"), "ㄊㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("txl"), "ㄊㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("txld"), "ㄊㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("txlf"), "ㄊㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("txlj"), "ㄊㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ny"), "ㄋㄚ");
  XCTAssertEqual(composer.cnvSequence("nyd"), "ㄋㄚˊ");
  XCTAssertEqual(composer.cnvSequence("nyf"), "ㄋㄚˇ");
  XCTAssertEqual(composer.cnvSequence("nyj"), "ㄋㄚˋ");
  XCTAssertEqual(composer.cnvSequence("nys"), "ㄋㄚ˙");
  XCTAssertEqual(composer.cnvSequence("ngj"), "ㄋㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ngs"), "ㄋㄜ˙");
  XCTAssertEqual(composer.cnvSequence("nid"), "ㄋㄞˊ");
  XCTAssertEqual(composer.cnvSequence("nif"), "ㄋㄞˇ");
  XCTAssertEqual(composer.cnvSequence("nij"), "ㄋㄞˋ");
  XCTAssertEqual(composer.cnvSequence("nad"), "ㄋㄟˊ");
  XCTAssertEqual(composer.cnvSequence("naf"), "ㄋㄟˇ");
  XCTAssertEqual(composer.cnvSequence("naj"), "ㄋㄟˋ");
  XCTAssertEqual(composer.cnvSequence("nw"), "ㄋㄠ");
  XCTAssertEqual(composer.cnvSequence("nwd"), "ㄋㄠˊ");
  XCTAssertEqual(composer.cnvSequence("nwf"), "ㄋㄠˇ");
  XCTAssertEqual(composer.cnvSequence("nwj"), "ㄋㄠˋ");
  XCTAssertEqual(composer.cnvSequence("nod"), "ㄋㄡˊ");
  XCTAssertEqual(composer.cnvSequence("nof"), "ㄋㄡˇ");
  XCTAssertEqual(composer.cnvSequence("noj"), "ㄋㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nm"), "ㄋㄢ");
  XCTAssertEqual(composer.cnvSequence("nmd"), "ㄋㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nmf"), "ㄋㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nmj"), "ㄋㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nnf"), "ㄋㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nnj"), "ㄋㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nk"), "ㄋㄤ");
  XCTAssertEqual(composer.cnvSequence("nkd"), "ㄋㄤˊ");
  XCTAssertEqual(composer.cnvSequence("nkf"), "ㄋㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nkj"), "ㄋㄤˋ");
  XCTAssertEqual(composer.cnvSequence("nks"), "ㄋㄤ˙");
  XCTAssertEqual(composer.cnvSequence("nld"), "ㄋㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nlf"), "ㄋㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ne"), "ㄋㄧ");
  XCTAssertEqual(composer.cnvSequence("ned"), "ㄋㄧˊ");
  XCTAssertEqual(composer.cnvSequence("nef"), "ㄋㄧˇ");
  XCTAssertEqual(composer.cnvSequence("nej"), "ㄋㄧˋ");
  XCTAssertEqual(composer.cnvSequence("nee"), "ㄋㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("need"), "ㄋㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("neej"), "ㄋㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("newf"), "ㄋㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("newj"), "ㄋㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("neo"), "ㄋㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("neod"), "ㄋㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("neof"), "ㄋㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("neoj"), "ㄋㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("nem"), "ㄋㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("nemd"), "ㄋㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nemf"), "ㄋㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nemj"), "ㄋㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nen"), "ㄋㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("nend"), "ㄋㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nenf"), "ㄋㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nenj"), "ㄋㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("nekd"), "ㄋㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("nekf"), "ㄋㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("nekj"), "ㄋㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("neld"), "ㄋㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nelf"), "ㄋㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nelj"), "ㄋㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nxd"), "ㄋㄨˊ");
  XCTAssertEqual(composer.cnvSequence("nxf"), "ㄋㄨˇ");
  XCTAssertEqual(composer.cnvSequence("nxj"), "ㄋㄨˋ");
  XCTAssertEqual(composer.cnvSequence("nxhd"), "ㄋㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("nxhf"), "ㄋㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("nxhj"), "ㄋㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("nxad"), "ㄋㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("nxmd"), "ㄋㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("nxmf"), "ㄋㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("nxmj"), "ㄋㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("nxnd"), "ㄋㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nxld"), "ㄋㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("nxlf"), "ㄋㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("nxlj"), "ㄋㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("nud"), "ㄋㄩˊ");
  XCTAssertEqual(composer.cnvSequence("nuf"), "ㄋㄩˇ");
  XCTAssertEqual(composer.cnvSequence("nuj"), "ㄋㄩˋ");
  XCTAssertEqual(composer.cnvSequence("nuej"), "ㄋㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ly"), "ㄌㄚ");
  XCTAssertEqual(composer.cnvSequence("lyd"), "ㄌㄚˊ");
  XCTAssertEqual(composer.cnvSequence("lyf"), "ㄌㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lyj"), "ㄌㄚˋ");
  XCTAssertEqual(composer.cnvSequence("lys"), "ㄌㄚ˙");
  XCTAssertEqual(composer.cnvSequence("lh"), "ㄌㄛ");
  XCTAssertEqual(composer.cnvSequence("lhs"), "ㄌㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lg"), "ㄌㄜ");
  XCTAssertEqual(composer.cnvSequence("lgd"), "ㄌㄜˊ");
  XCTAssertEqual(composer.cnvSequence("lgj"), "ㄌㄜˋ");
  XCTAssertEqual(composer.cnvSequence("lgs"), "ㄌㄜ˙");
  XCTAssertEqual(composer.cnvSequence("lid"), "ㄌㄞˊ");
  XCTAssertEqual(composer.cnvSequence("lif"), "ㄌㄞˇ");
  XCTAssertEqual(composer.cnvSequence("lij"), "ㄌㄞˋ");
  XCTAssertEqual(composer.cnvSequence("la"), "ㄌㄟ");
  XCTAssertEqual(composer.cnvSequence("lad"), "ㄌㄟˊ");
  XCTAssertEqual(composer.cnvSequence("laf"), "ㄌㄟˇ");
  XCTAssertEqual(composer.cnvSequence("laj"), "ㄌㄟˋ");
  XCTAssertEqual(composer.cnvSequence("las"), "ㄌㄟ˙");
  XCTAssertEqual(composer.cnvSequence("lw"), "ㄌㄠ");
  XCTAssertEqual(composer.cnvSequence("lwd"), "ㄌㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lwf"), "ㄌㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lwj"), "ㄌㄠˋ");
  XCTAssertEqual(composer.cnvSequence("lo"), "ㄌㄡ");
  XCTAssertEqual(composer.cnvSequence("lod"), "ㄌㄡˊ");
  XCTAssertEqual(composer.cnvSequence("lof"), "ㄌㄡˇ");
  XCTAssertEqual(composer.cnvSequence("loj"), "ㄌㄡˋ");
  XCTAssertEqual(composer.cnvSequence("los"), "ㄌㄡ˙");
  XCTAssertEqual(composer.cnvSequence("lmd"), "ㄌㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lmf"), "ㄌㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lmj"), "ㄌㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lk"), "ㄌㄤ");
  XCTAssertEqual(composer.cnvSequence("lkd"), "ㄌㄤˊ");
  XCTAssertEqual(composer.cnvSequence("lkf"), "ㄌㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lkj"), "ㄌㄤˋ");
  XCTAssertEqual(composer.cnvSequence("ll"), "ㄌㄥ");
  XCTAssertEqual(composer.cnvSequence("lld"), "ㄌㄥˊ");
  XCTAssertEqual(composer.cnvSequence("llf"), "ㄌㄥˇ");
  XCTAssertEqual(composer.cnvSequence("llj"), "ㄌㄥˋ");
  XCTAssertEqual(composer.cnvSequence("le"), "ㄌㄧ");
  XCTAssertEqual(composer.cnvSequence("led"), "ㄌㄧˊ");
  XCTAssertEqual(composer.cnvSequence("lef"), "ㄌㄧˇ");
  XCTAssertEqual(composer.cnvSequence("lej"), "ㄌㄧˋ");
  XCTAssertEqual(composer.cnvSequence("les"), "ㄌㄧ˙");
  XCTAssertEqual(composer.cnvSequence("leyf"), "ㄌㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("lee"), "ㄌㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("leed"), "ㄌㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("leef"), "ㄌㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("leej"), "ㄌㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lew"), "ㄌㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("lewd"), "ㄌㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("lewf"), "ㄌㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("lewj"), "ㄌㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("leo"), "ㄌㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("leod"), "ㄌㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("leof"), "ㄌㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("leoj"), "ㄌㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("lem"), "ㄌㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("lemd"), "ㄌㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lemf"), "ㄌㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lemj"), "ㄌㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lend"), "ㄌㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lenf"), "ㄌㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lenj"), "ㄌㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lekd"), "ㄌㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("lekf"), "ㄌㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("lekj"), "ㄌㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("lel"), "ㄌㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("leld"), "ㄌㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lelf"), "ㄌㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lelj"), "ㄌㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lx"), "ㄌㄨ");
  XCTAssertEqual(composer.cnvSequence("lxd"), "ㄌㄨˊ");
  XCTAssertEqual(composer.cnvSequence("lxf"), "ㄌㄨˇ");
  XCTAssertEqual(composer.cnvSequence("lxj"), "ㄌㄨˋ");
  XCTAssertEqual(composer.cnvSequence("lxh"), "ㄌㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("lxhd"), "ㄌㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("lxhf"), "ㄌㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("lxhj"), "ㄌㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("lxhs"), "ㄌㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("lxmd"), "ㄌㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lxmf"), "ㄌㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("lxmj"), "ㄌㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("lxn"), "ㄌㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("lxnd"), "ㄌㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("lxnf"), "ㄌㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("lxnj"), "ㄌㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("lxl"), "ㄌㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("lxld"), "ㄌㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("lxlf"), "ㄌㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("lxlj"), "ㄌㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("lu"), "ㄌㄩ");
  XCTAssertEqual(composer.cnvSequence("lud"), "ㄌㄩˊ");
  XCTAssertEqual(composer.cnvSequence("luf"), "ㄌㄩˇ");
  XCTAssertEqual(composer.cnvSequence("luj"), "ㄌㄩˋ");
  XCTAssertEqual(composer.cnvSequence("lue"), "ㄌㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("luef"), "ㄌㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("luej"), "ㄌㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("lumd"), "ㄌㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("lumf"), "ㄌㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gy"), "ㄍㄚ");
  XCTAssertEqual(composer.cnvSequence("gyd"), "ㄍㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gyf"), "ㄍㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gyj"), "ㄍㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gys"), "ㄍㄚ˙");
  XCTAssertEqual(composer.cnvSequence("gg"), "ㄍㄜ");
  XCTAssertEqual(composer.cnvSequence("ggd"), "ㄍㄜˊ");
  XCTAssertEqual(composer.cnvSequence("ggf"), "ㄍㄜˇ");
  XCTAssertEqual(composer.cnvSequence("ggj"), "ㄍㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ggs"), "ㄍㄜ˙");
  XCTAssertEqual(composer.cnvSequence("gi"), "ㄍㄞ");
  XCTAssertEqual(composer.cnvSequence("gif"), "ㄍㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gij"), "ㄍㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gaf"), "ㄍㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gw"), "ㄍㄠ");
  XCTAssertEqual(composer.cnvSequence("gwf"), "ㄍㄠˇ");
  XCTAssertEqual(composer.cnvSequence("gwj"), "ㄍㄠˋ");
  XCTAssertEqual(composer.cnvSequence("go"), "ㄍㄡ");
  XCTAssertEqual(composer.cnvSequence("gof"), "ㄍㄡˇ");
  XCTAssertEqual(composer.cnvSequence("goj"), "ㄍㄡˋ");
  XCTAssertEqual(composer.cnvSequence("gm"), "ㄍㄢ");
  XCTAssertEqual(composer.cnvSequence("gmf"), "ㄍㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gmj"), "ㄍㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gn"), "ㄍㄣ");
  XCTAssertEqual(composer.cnvSequence("gnd"), "ㄍㄣˊ");
  XCTAssertEqual(composer.cnvSequence("gnf"), "ㄍㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gnj"), "ㄍㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gk"), "ㄍㄤ");
  XCTAssertEqual(composer.cnvSequence("gkf"), "ㄍㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gkj"), "ㄍㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gl"), "ㄍㄥ");
  XCTAssertEqual(composer.cnvSequence("glf"), "ㄍㄥˇ");
  XCTAssertEqual(composer.cnvSequence("glj"), "ㄍㄥˋ");
  XCTAssertEqual(composer.cnvSequence("gx"), "ㄍㄨ");
  XCTAssertEqual(composer.cnvSequence("gxd"), "ㄍㄨˊ");
  XCTAssertEqual(composer.cnvSequence("gxf"), "ㄍㄨˇ");
  XCTAssertEqual(composer.cnvSequence("gxj"), "ㄍㄨˋ");
  XCTAssertEqual(composer.cnvSequence("gxy"), "ㄍㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("gxyd"), "ㄍㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("gxyf"), "ㄍㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("gxyj"), "ㄍㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("gxh"), "ㄍㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("gxhd"), "ㄍㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("gxhf"), "ㄍㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("gxhj"), "ㄍㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("gxgd"), "ㄍㄨㄜˊ");
  XCTAssertEqual(composer.cnvSequence("gxi"), "ㄍㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("gxif"), "ㄍㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("gxij"), "ㄍㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("gxa"), "ㄍㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("gxaf"), "ㄍㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("gxaj"), "ㄍㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("gxm"), "ㄍㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("gxmf"), "ㄍㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("gxmj"), "ㄍㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("gxn"), "ㄍㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("gxnf"), "ㄍㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("gxnj"), "ㄍㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("gxk"), "ㄍㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("gxkf"), "ㄍㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("gxkj"), "ㄍㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("gxl"), "ㄍㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("gxld"), "ㄍㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("gxlf"), "ㄍㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("gxlj"), "ㄍㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ky"), "ㄎㄚ");
  XCTAssertEqual(composer.cnvSequence("kyf"), "ㄎㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kyj"), "ㄎㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kg"), "ㄎㄜ");
  XCTAssertEqual(composer.cnvSequence("kgd"), "ㄎㄜˊ");
  XCTAssertEqual(composer.cnvSequence("kgf"), "ㄎㄜˇ");
  XCTAssertEqual(composer.cnvSequence("kgj"), "ㄎㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ki"), "ㄎㄞ");
  XCTAssertEqual(composer.cnvSequence("kif"), "ㄎㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kij"), "ㄎㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kw"), "ㄎㄠ");
  XCTAssertEqual(composer.cnvSequence("kwf"), "ㄎㄠˇ");
  XCTAssertEqual(composer.cnvSequence("kwj"), "ㄎㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ko"), "ㄎㄡ");
  XCTAssertEqual(composer.cnvSequence("kof"), "ㄎㄡˇ");
  XCTAssertEqual(composer.cnvSequence("koj"), "ㄎㄡˋ");
  XCTAssertEqual(composer.cnvSequence("km"), "ㄎㄢ");
  XCTAssertEqual(composer.cnvSequence("kmf"), "ㄎㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kmj"), "ㄎㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kn"), "ㄎㄣ");
  XCTAssertEqual(composer.cnvSequence("knf"), "ㄎㄣˇ");
  XCTAssertEqual(composer.cnvSequence("knj"), "ㄎㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kk"), "ㄎㄤ");
  XCTAssertEqual(composer.cnvSequence("kkd"), "ㄎㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kkf"), "ㄎㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kkj"), "ㄎㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kl"), "ㄎㄥ");
  XCTAssertEqual(composer.cnvSequence("klf"), "ㄎㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kx"), "ㄎㄨ");
  XCTAssertEqual(composer.cnvSequence("kxd"), "ㄎㄨˊ");
  XCTAssertEqual(composer.cnvSequence("kxf"), "ㄎㄨˇ");
  XCTAssertEqual(composer.cnvSequence("kxj"), "ㄎㄨˋ");
  XCTAssertEqual(composer.cnvSequence("kxy"), "ㄎㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("kxyf"), "ㄎㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("kxyj"), "ㄎㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("kxhj"), "ㄎㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("kxi"), "ㄎㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("kxif"), "ㄎㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("kxij"), "ㄎㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("kxa"), "ㄎㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("kxad"), "ㄎㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("kxaf"), "ㄎㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("kxaj"), "ㄎㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("kxm"), "ㄎㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("kxmf"), "ㄎㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("kxmj"), "ㄎㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("kxn"), "ㄎㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("kxnf"), "ㄎㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("kxnj"), "ㄎㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("kxk"), "ㄎㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("kxkd"), "ㄎㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kxkf"), "ㄎㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kxkj"), "ㄎㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("kxl"), "ㄎㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("kxlf"), "ㄎㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("kxlj"), "ㄎㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hy"), "ㄏㄚ");
  XCTAssertEqual(composer.cnvSequence("hyd"), "ㄏㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hyf"), "ㄏㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hg"), "ㄏㄜ");
  XCTAssertEqual(composer.cnvSequence("hgd"), "ㄏㄜˊ");
  XCTAssertEqual(composer.cnvSequence("hgf"), "ㄏㄜˇ");
  XCTAssertEqual(composer.cnvSequence("hgj"), "ㄏㄜˋ");
  XCTAssertEqual(composer.cnvSequence("hi"), "ㄏㄞ");
  XCTAssertEqual(composer.cnvSequence("hid"), "ㄏㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hif"), "ㄏㄞˇ");
  XCTAssertEqual(composer.cnvSequence("hij"), "ㄏㄞˋ");
  XCTAssertEqual(composer.cnvSequence("ha"), "ㄏㄟ");
  XCTAssertEqual(composer.cnvSequence("haf"), "ㄏㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hw"), "ㄏㄠ");
  XCTAssertEqual(composer.cnvSequence("hwd"), "ㄏㄠˊ");
  XCTAssertEqual(composer.cnvSequence("hwf"), "ㄏㄠˇ");
  XCTAssertEqual(composer.cnvSequence("hwj"), "ㄏㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ho"), "ㄏㄡ");
  XCTAssertEqual(composer.cnvSequence("hod"), "ㄏㄡˊ");
  XCTAssertEqual(composer.cnvSequence("hof"), "ㄏㄡˇ");
  XCTAssertEqual(composer.cnvSequence("hoj"), "ㄏㄡˋ");
  XCTAssertEqual(composer.cnvSequence("hm"), "ㄏㄢ");
  XCTAssertEqual(composer.cnvSequence("hmd"), "ㄏㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hmf"), "ㄏㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hmj"), "ㄏㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hn"), "ㄏㄣ");
  XCTAssertEqual(composer.cnvSequence("hnd"), "ㄏㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hnf"), "ㄏㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hnj"), "ㄏㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hk"), "ㄏㄤ");
  XCTAssertEqual(composer.cnvSequence("hkd"), "ㄏㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hkf"), "ㄏㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hkj"), "ㄏㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hl"), "ㄏㄥ");
  XCTAssertEqual(composer.cnvSequence("hld"), "ㄏㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hlj"), "ㄏㄥˋ");
  XCTAssertEqual(composer.cnvSequence("hx"), "ㄏㄨ");
  XCTAssertEqual(composer.cnvSequence("hxd"), "ㄏㄨˊ");
  XCTAssertEqual(composer.cnvSequence("hxf"), "ㄏㄨˇ");
  XCTAssertEqual(composer.cnvSequence("hxj"), "ㄏㄨˋ");
  XCTAssertEqual(composer.cnvSequence("hxy"), "ㄏㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("hxyd"), "ㄏㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("hxyf"), "ㄏㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("hxyj"), "ㄏㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("hxh"), "ㄏㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("hxhd"), "ㄏㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hxhf"), "ㄏㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hxhj"), "ㄏㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("hxhs"), "ㄏㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("hxid"), "ㄏㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("hxij"), "ㄏㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("hxa"), "ㄏㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("hxad"), "ㄏㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("hxaf"), "ㄏㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("hxaj"), "ㄏㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("hxm"), "ㄏㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("hxmd"), "ㄏㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("hxmf"), "ㄏㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("hxmj"), "ㄏㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("hxn"), "ㄏㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("hxnd"), "ㄏㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("hxnf"), "ㄏㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("hxnj"), "ㄏㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("hxk"), "ㄏㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("hxkd"), "ㄏㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("hxkf"), "ㄏㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("hxkj"), "ㄏㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("hxks"), "ㄏㄨㄤ˙");
  XCTAssertEqual(composer.cnvSequence("hxl"), "ㄏㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("hxld"), "ㄏㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("hxlf"), "ㄏㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("hxlj"), "ㄏㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("je"), "ㄐㄧ");
  XCTAssertEqual(composer.cnvSequence("jed"), "ㄐㄧˊ");
  XCTAssertEqual(composer.cnvSequence("jef"), "ㄐㄧˇ");
  XCTAssertEqual(composer.cnvSequence("jej"), "ㄐㄧˋ");
  XCTAssertEqual(composer.cnvSequence("jey"), "ㄐㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("jeyd"), "ㄐㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("jeyf"), "ㄐㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jeyj"), "ㄐㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("jee"), "ㄐㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("jeed"), "ㄐㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("jeef"), "ㄐㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("jeej"), "ㄐㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("jees"), "ㄐㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("jew"), "ㄐㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("jewd"), "ㄐㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jewf"), "ㄐㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jewj"), "ㄐㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jeo"), "ㄐㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("jeof"), "ㄐㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("jeoj"), "ㄐㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jem"), "ㄐㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("jemf"), "ㄐㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jemj"), "ㄐㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jen"), "ㄐㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("jenf"), "ㄐㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jenj"), "ㄐㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jek"), "ㄐㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("jekd"), "ㄐㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("jekf"), "ㄐㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jekj"), "ㄐㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jel"), "ㄐㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("jelf"), "ㄐㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jelj"), "ㄐㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ju"), "ㄐㄩ");
  XCTAssertEqual(composer.cnvSequence("jud"), "ㄐㄩˊ");
  XCTAssertEqual(composer.cnvSequence("juf"), "ㄐㄩˇ");
  XCTAssertEqual(composer.cnvSequence("juj"), "ㄐㄩˋ");
  XCTAssertEqual(composer.cnvSequence("jue"), "ㄐㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("jued"), "ㄐㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("juef"), "ㄐㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("juej"), "ㄐㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("jum"), "ㄐㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("jumf"), "ㄐㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jumj"), "ㄐㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jun"), "ㄐㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("jund"), "ㄐㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("junf"), "ㄐㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("junj"), "ㄐㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jul"), "ㄐㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("julf"), "ㄐㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("julj"), "ㄐㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vs"), "ㄑ˙");
  XCTAssertEqual(composer.cnvSequence("ve"), "ㄑㄧ");
  XCTAssertEqual(composer.cnvSequence("ved"), "ㄑㄧˊ");
  XCTAssertEqual(composer.cnvSequence("vef"), "ㄑㄧˇ");
  XCTAssertEqual(composer.cnvSequence("vej"), "ㄑㄧˋ");
  XCTAssertEqual(composer.cnvSequence("vey"), "ㄑㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("veyd"), "ㄑㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("veyf"), "ㄑㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("veyj"), "ㄑㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vee"), "ㄑㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("veed"), "ㄑㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("veef"), "ㄑㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("veej"), "ㄑㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vew"), "ㄑㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("vewd"), "ㄑㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vewf"), "ㄑㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vewj"), "ㄑㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("veo"), "ㄑㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("veod"), "ㄑㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("veof"), "ㄑㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("veoj"), "ㄑㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vem"), "ㄑㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("vemd"), "ㄑㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vemf"), "ㄑㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vemj"), "ㄑㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("ven"), "ㄑㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("vend"), "ㄑㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("venf"), "ㄑㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("venj"), "ㄑㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vek"), "ㄑㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("vekd"), "ㄑㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vekf"), "ㄑㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vekj"), "ㄑㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vel"), "ㄑㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("veld"), "ㄑㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("velf"), "ㄑㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("velj"), "ㄑㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vu"), "ㄑㄩ");
  XCTAssertEqual(composer.cnvSequence("vud"), "ㄑㄩˊ");
  XCTAssertEqual(composer.cnvSequence("vuf"), "ㄑㄩˇ");
  XCTAssertEqual(composer.cnvSequence("vuj"), "ㄑㄩˋ");
  XCTAssertEqual(composer.cnvSequence("vue"), "ㄑㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("vued"), "ㄑㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("vuej"), "ㄑㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("vum"), "ㄑㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("vumd"), "ㄑㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vumf"), "ㄑㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vumj"), "ㄑㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vun"), "ㄑㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("vund"), "ㄑㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vunf"), "ㄑㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vunj"), "ㄑㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vul"), "ㄑㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("vuld"), "ㄑㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vulf"), "ㄑㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vulj"), "ㄑㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ce"), "ㄒㄧ");
  XCTAssertEqual(composer.cnvSequence("ced"), "ㄒㄧˊ");
  XCTAssertEqual(composer.cnvSequence("cef"), "ㄒㄧˇ");
  XCTAssertEqual(composer.cnvSequence("cej"), "ㄒㄧˋ");
  XCTAssertEqual(composer.cnvSequence("cey"), "ㄒㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("ceyd"), "ㄒㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("ceyf"), "ㄒㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ceyj"), "ㄒㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cee"), "ㄒㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("ceed"), "ㄒㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("ceef"), "ㄒㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("ceej"), "ㄒㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cew"), "ㄒㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("cewd"), "ㄒㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cewf"), "ㄒㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cewj"), "ㄒㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ceo"), "ㄒㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("ceod"), "ㄒㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("ceof"), "ㄒㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("ceoj"), "ㄒㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cem"), "ㄒㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("cemd"), "ㄒㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cemf"), "ㄒㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cemj"), "ㄒㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cen"), "ㄒㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("cend"), "ㄒㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cenf"), "ㄒㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cenj"), "ㄒㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cek"), "ㄒㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("cekd"), "ㄒㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cekf"), "ㄒㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cekj"), "ㄒㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cel"), "ㄒㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("celd"), "ㄒㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("celf"), "ㄒㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("celj"), "ㄒㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cu"), "ㄒㄩ");
  XCTAssertEqual(composer.cnvSequence("cud"), "ㄒㄩˊ");
  XCTAssertEqual(composer.cnvSequence("cuf"), "ㄒㄩˇ");
  XCTAssertEqual(composer.cnvSequence("cuj"), "ㄒㄩˋ");
  XCTAssertEqual(composer.cnvSequence("cue"), "ㄒㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("cued"), "ㄒㄩㄝˊ");
  XCTAssertEqual(composer.cnvSequence("cuef"), "ㄒㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("cuej"), "ㄒㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("cum"), "ㄒㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("cumd"), "ㄒㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cumf"), "ㄒㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cumj"), "ㄒㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cun"), "ㄒㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("cund"), "ㄒㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cunj"), "ㄒㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cul"), "ㄒㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("culd"), "ㄒㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("culf"), "ㄒㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("culj"), "ㄒㄩㄥˋ");
  XCTAssertEqual(composer.cnvSequence("j"), "ㄓ");
  XCTAssertEqual(composer.cnvSequence("jd"), "ㄓˊ");
  XCTAssertEqual(composer.cnvSequence("jf"), "ㄓˇ");
  XCTAssertEqual(composer.cnvSequence("jj"), "ㄓˋ");
  XCTAssertEqual(composer.cnvSequence("jy"), "ㄓㄚ");
  XCTAssertEqual(composer.cnvSequence("jyd"), "ㄓㄚˊ");
  XCTAssertEqual(composer.cnvSequence("jyf"), "ㄓㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jyj"), "ㄓㄚˋ");
  XCTAssertEqual(composer.cnvSequence("jg"), "ㄓㄜ");
  XCTAssertEqual(composer.cnvSequence("jgd"), "ㄓㄜˊ");
  XCTAssertEqual(composer.cnvSequence("jgf"), "ㄓㄜˇ");
  XCTAssertEqual(composer.cnvSequence("jgj"), "ㄓㄜˋ");
  XCTAssertEqual(composer.cnvSequence("jgs"), "ㄓㄜ˙");
  XCTAssertEqual(composer.cnvSequence("ji"), "ㄓㄞ");
  XCTAssertEqual(composer.cnvSequence("jid"), "ㄓㄞˊ");
  XCTAssertEqual(composer.cnvSequence("jif"), "ㄓㄞˇ");
  XCTAssertEqual(composer.cnvSequence("jij"), "ㄓㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jaj"), "ㄓㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jw"), "ㄓㄠ");
  XCTAssertEqual(composer.cnvSequence("jwd"), "ㄓㄠˊ");
  XCTAssertEqual(composer.cnvSequence("jwf"), "ㄓㄠˇ");
  XCTAssertEqual(composer.cnvSequence("jwj"), "ㄓㄠˋ");
  XCTAssertEqual(composer.cnvSequence("jo"), "ㄓㄡ");
  XCTAssertEqual(composer.cnvSequence("jod"), "ㄓㄡˊ");
  XCTAssertEqual(composer.cnvSequence("jof"), "ㄓㄡˇ");
  XCTAssertEqual(composer.cnvSequence("joj"), "ㄓㄡˋ");
  XCTAssertEqual(composer.cnvSequence("jm"), "ㄓㄢ");
  XCTAssertEqual(composer.cnvSequence("jmf"), "ㄓㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jmj"), "ㄓㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jn"), "ㄓㄣ");
  XCTAssertEqual(composer.cnvSequence("jnd"), "ㄓㄣˊ");
  XCTAssertEqual(composer.cnvSequence("jnf"), "ㄓㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jnj"), "ㄓㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jk"), "ㄓㄤ");
  XCTAssertEqual(composer.cnvSequence("jkf"), "ㄓㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jkj"), "ㄓㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jl"), "ㄓㄥ");
  XCTAssertEqual(composer.cnvSequence("jlf"), "ㄓㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jlj"), "ㄓㄥˋ");
  XCTAssertEqual(composer.cnvSequence("jx"), "ㄓㄨ");
  XCTAssertEqual(composer.cnvSequence("jxd"), "ㄓㄨˊ");
  XCTAssertEqual(composer.cnvSequence("jxf"), "ㄓㄨˇ");
  XCTAssertEqual(composer.cnvSequence("jxj"), "ㄓㄨˋ");
  XCTAssertEqual(composer.cnvSequence("jxy"), "ㄓㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("jxyf"), "ㄓㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("jxh"), "ㄓㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("jxhd"), "ㄓㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("jxhj"), "ㄓㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("jxi"), "ㄓㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("jxif"), "ㄓㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("jxij"), "ㄓㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("jxa"), "ㄓㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("jxaf"), "ㄓㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("jxaj"), "ㄓㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("jxm"), "ㄓㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("jxmf"), "ㄓㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("jxmj"), "ㄓㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("jxn"), "ㄓㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("jxnf"), "ㄓㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("jxnj"), "ㄓㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("jxk"), "ㄓㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("jxkf"), "ㄓㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("jxkj"), "ㄓㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("jxl"), "ㄓㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("jxlf"), "ㄓㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("jxlj"), "ㄓㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("v "), "ㄔ ");
  XCTAssertEqual(composer.cnvSequence("vd"), "ㄔˊ");
  XCTAssertEqual(composer.cnvSequence("vf"), "ㄔˇ");
  XCTAssertEqual(composer.cnvSequence("vj"), "ㄔˋ");
  XCTAssertEqual(composer.cnvSequence("vy"), "ㄔㄚ");
  XCTAssertEqual(composer.cnvSequence("vyd"), "ㄔㄚˊ");
  XCTAssertEqual(composer.cnvSequence("vyf"), "ㄔㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vyj"), "ㄔㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vg "), "ㄔㄜ ");
  XCTAssertEqual(composer.cnvSequence("vgf"), "ㄔㄜˇ");
  XCTAssertEqual(composer.cnvSequence("vgj"), "ㄔㄜˋ");
  XCTAssertEqual(composer.cnvSequence("vi"), "ㄔㄞ");
  XCTAssertEqual(composer.cnvSequence("vid"), "ㄔㄞˊ");
  XCTAssertEqual(composer.cnvSequence("vif"), "ㄔㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vij"), "ㄔㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vw"), "ㄔㄠ");
  XCTAssertEqual(composer.cnvSequence("vwd"), "ㄔㄠˊ");
  XCTAssertEqual(composer.cnvSequence("vwf"), "ㄔㄠˇ");
  XCTAssertEqual(composer.cnvSequence("vwj"), "ㄔㄠˋ");
  XCTAssertEqual(composer.cnvSequence("vo"), "ㄔㄡ");
  XCTAssertEqual(composer.cnvSequence("vod"), "ㄔㄡˊ");
  XCTAssertEqual(composer.cnvSequence("vof"), "ㄔㄡˇ");
  XCTAssertEqual(composer.cnvSequence("voj"), "ㄔㄡˋ");
  XCTAssertEqual(composer.cnvSequence("vm "), "ㄔㄢ ");
  XCTAssertEqual(composer.cnvSequence("vmd"), "ㄔㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vmf"), "ㄔㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vmj"), "ㄔㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vn "), "ㄔㄣ ");
  XCTAssertEqual(composer.cnvSequence("vnd"), "ㄔㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vnf"), "ㄔㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vnj"), "ㄔㄣˋ");
  XCTAssertEqual(composer.cnvSequence("vns"), "ㄔㄣ˙");
  XCTAssertEqual(composer.cnvSequence("vk "), "ㄔㄤ ");
  XCTAssertEqual(composer.cnvSequence("vkd"), "ㄔㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vkf"), "ㄔㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vkj"), "ㄔㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vl "), "ㄔㄥ ");
  XCTAssertEqual(composer.cnvSequence("vld"), "ㄔㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vlf"), "ㄔㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vlj"), "ㄔㄥˋ");
  XCTAssertEqual(composer.cnvSequence("vx"), "ㄔㄨ");
  XCTAssertEqual(composer.cnvSequence("vxd"), "ㄔㄨˊ");
  XCTAssertEqual(composer.cnvSequence("vxf"), "ㄔㄨˇ");
  XCTAssertEqual(composer.cnvSequence("vxj"), "ㄔㄨˋ");
  XCTAssertEqual(composer.cnvSequence("vxy"), "ㄔㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("vxyf"), "ㄔㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("vxyj"), "ㄔㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("vxh"), "ㄔㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("vxhj"), "ㄔㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("vxi"), "ㄔㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("vxid"), "ㄔㄨㄞˊ");
  XCTAssertEqual(composer.cnvSequence("vxif"), "ㄔㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("vxij"), "ㄔㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("vxa"), "ㄔㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("vxad"), "ㄔㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("vxaf"), "ㄔㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("vxaj"), "ㄔㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("vxm"), "ㄔㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("vxmd"), "ㄔㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("vxmf"), "ㄔㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("vxmj"), "ㄔㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("vxn"), "ㄔㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("vxnd"), "ㄔㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("vxnf"), "ㄔㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("vxk"), "ㄔㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("vxkd"), "ㄔㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("vxkf"), "ㄔㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("vxkj"), "ㄔㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("vxl"), "ㄔㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("vxld"), "ㄔㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("vxlf"), "ㄔㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("vxlj"), "ㄔㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("c"), "ㄕ");
  XCTAssertEqual(composer.cnvSequence("cd"), "ㄕˊ");
  XCTAssertEqual(composer.cnvSequence("cf"), "ㄕˇ");
  XCTAssertEqual(composer.cnvSequence("cj"), "ㄕˋ");
  XCTAssertEqual(composer.cnvSequence("cs"), "ㄕ˙");
  XCTAssertEqual(composer.cnvSequence("cy"), "ㄕㄚ");
  XCTAssertEqual(composer.cnvSequence("cyd"), "ㄕㄚˊ");
  XCTAssertEqual(composer.cnvSequence("cyf"), "ㄕㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cyj"), "ㄕㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cys"), "ㄕㄚ˙");
  XCTAssertEqual(composer.cnvSequence("cg"), "ㄕㄜ");
  XCTAssertEqual(composer.cnvSequence("cgd"), "ㄕㄜˊ");
  XCTAssertEqual(composer.cnvSequence("cgf"), "ㄕㄜˇ");
  XCTAssertEqual(composer.cnvSequence("cgj"), "ㄕㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ci"), "ㄕㄞ");
  XCTAssertEqual(composer.cnvSequence("cif"), "ㄕㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cij"), "ㄕㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cad"), "ㄕㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cw"), "ㄕㄠ");
  XCTAssertEqual(composer.cnvSequence("cwd"), "ㄕㄠˊ");
  XCTAssertEqual(composer.cnvSequence("cwf"), "ㄕㄠˇ");
  XCTAssertEqual(composer.cnvSequence("cwj"), "ㄕㄠˋ");
  XCTAssertEqual(composer.cnvSequence("co"), "ㄕㄡ");
  XCTAssertEqual(composer.cnvSequence("cod"), "ㄕㄡˊ");
  XCTAssertEqual(composer.cnvSequence("cof"), "ㄕㄡˇ");
  XCTAssertEqual(composer.cnvSequence("coj"), "ㄕㄡˋ");
  XCTAssertEqual(composer.cnvSequence("cm"), "ㄕㄢ");
  XCTAssertEqual(composer.cnvSequence("cmd"), "ㄕㄢˊ");
  XCTAssertEqual(composer.cnvSequence("cmf"), "ㄕㄢˇ");
  XCTAssertEqual(composer.cnvSequence("cmj"), "ㄕㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cn"), "ㄕㄣ");
  XCTAssertEqual(composer.cnvSequence("cnd"), "ㄕㄣˊ");
  XCTAssertEqual(composer.cnvSequence("cnf"), "ㄕㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cnj"), "ㄕㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ck"), "ㄕㄤ");
  XCTAssertEqual(composer.cnvSequence("ckf"), "ㄕㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ckj"), "ㄕㄤˋ");
  XCTAssertEqual(composer.cnvSequence("cks"), "ㄕㄤ˙");
  XCTAssertEqual(composer.cnvSequence("cl"), "ㄕㄥ");
  XCTAssertEqual(composer.cnvSequence("cld"), "ㄕㄥˊ");
  XCTAssertEqual(composer.cnvSequence("clf"), "ㄕㄥˇ");
  XCTAssertEqual(composer.cnvSequence("clj"), "ㄕㄥˋ");
  XCTAssertEqual(composer.cnvSequence("cx"), "ㄕㄨ");
  XCTAssertEqual(composer.cnvSequence("cxd"), "ㄕㄨˊ");
  XCTAssertEqual(composer.cnvSequence("cxf"), "ㄕㄨˇ");
  XCTAssertEqual(composer.cnvSequence("cxj"), "ㄕㄨˋ");
  XCTAssertEqual(composer.cnvSequence("cxy"), "ㄕㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("cxyf"), "ㄕㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("cxyj"), "ㄕㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("cxh"), "ㄕㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("cxhj"), "ㄕㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("cxi"), "ㄕㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("cxif"), "ㄕㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("cxij"), "ㄕㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("cxa"), "ㄕㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("cxad"), "ㄕㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("cxaf"), "ㄕㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("cxaj"), "ㄕㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("cxm"), "ㄕㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("cxmj"), "ㄕㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("cxnf"), "ㄕㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("cxnj"), "ㄕㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("cxk"), "ㄕㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("cxkd"), "ㄕㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("cxkf"), "ㄕㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("cxkj"), "ㄕㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("rj"), "ㄖˋ");
  XCTAssertEqual(composer.cnvSequence("rgf"), "ㄖㄜˇ");
  XCTAssertEqual(composer.cnvSequence("rgj"), "ㄖㄜˋ");
  XCTAssertEqual(composer.cnvSequence("rwd"), "ㄖㄠˊ");
  XCTAssertEqual(composer.cnvSequence("rwf"), "ㄖㄠˇ");
  XCTAssertEqual(composer.cnvSequence("rwj"), "ㄖㄠˋ");
  XCTAssertEqual(composer.cnvSequence("rod"), "ㄖㄡˊ");
  XCTAssertEqual(composer.cnvSequence("rof"), "ㄖㄡˇ");
  XCTAssertEqual(composer.cnvSequence("roj"), "ㄖㄡˋ");
  XCTAssertEqual(composer.cnvSequence("rmd"), "ㄖㄢˊ");
  XCTAssertEqual(composer.cnvSequence("rmf"), "ㄖㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rmj"), "ㄖㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rnd"), "ㄖㄣˊ");
  XCTAssertEqual(composer.cnvSequence("rnf"), "ㄖㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rnj"), "ㄖㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rk"), "ㄖㄤ");
  XCTAssertEqual(composer.cnvSequence("rkd"), "ㄖㄤˊ");
  XCTAssertEqual(composer.cnvSequence("rkf"), "ㄖㄤˇ");
  XCTAssertEqual(composer.cnvSequence("rkj"), "ㄖㄤˋ");
  XCTAssertEqual(composer.cnvSequence("rl"), "ㄖㄥ");
  XCTAssertEqual(composer.cnvSequence("rld"), "ㄖㄥˊ");
  XCTAssertEqual(composer.cnvSequence("rlf"), "ㄖㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rlj"), "ㄖㄥˋ");
  XCTAssertEqual(composer.cnvSequence("rxd"), "ㄖㄨˊ");
  XCTAssertEqual(composer.cnvSequence("rxf"), "ㄖㄨˇ");
  XCTAssertEqual(composer.cnvSequence("rxj"), "ㄖㄨˋ");
  XCTAssertEqual(composer.cnvSequence("rxhd"), "ㄖㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("rxhj"), "ㄖㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("rxad"), "ㄖㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("rxaf"), "ㄖㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("rxaj"), "ㄖㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("rxmd"), "ㄖㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("rxmf"), "ㄖㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("rxmj"), "ㄖㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("rxnd"), "ㄖㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("rxnf"), "ㄖㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("rxnj"), "ㄖㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("rxld"), "ㄖㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("rxlf"), "ㄖㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("rxlj"), "ㄖㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("z"), "ㄗ");
  XCTAssertEqual(composer.cnvSequence("zd"), "ㄗˊ");
  XCTAssertEqual(composer.cnvSequence("zf"), "ㄗˇ");
  XCTAssertEqual(composer.cnvSequence("zj"), "ㄗˋ");
  XCTAssertEqual(composer.cnvSequence("zs"), "ㄗ˙");
  XCTAssertEqual(composer.cnvSequence("zy"), "ㄗㄚ");
  XCTAssertEqual(composer.cnvSequence("zyd"), "ㄗㄚˊ");
  XCTAssertEqual(composer.cnvSequence("zyf"), "ㄗㄚˇ");
  XCTAssertEqual(composer.cnvSequence("zgd"), "ㄗㄜˊ");
  XCTAssertEqual(composer.cnvSequence("zgf"), "ㄗㄜˇ");
  XCTAssertEqual(composer.cnvSequence("zgj"), "ㄗㄜˋ");
  XCTAssertEqual(composer.cnvSequence("zi"), "ㄗㄞ");
  XCTAssertEqual(composer.cnvSequence("zif"), "ㄗㄞˇ");
  XCTAssertEqual(composer.cnvSequence("zij"), "ㄗㄞˋ");
  XCTAssertEqual(composer.cnvSequence("zad"), "ㄗㄟˊ");
  XCTAssertEqual(composer.cnvSequence("zw"), "ㄗㄠ");
  XCTAssertEqual(composer.cnvSequence("zwd"), "ㄗㄠˊ");
  XCTAssertEqual(composer.cnvSequence("zwf"), "ㄗㄠˇ");
  XCTAssertEqual(composer.cnvSequence("zwj"), "ㄗㄠˋ");
  XCTAssertEqual(composer.cnvSequence("zo"), "ㄗㄡ");
  XCTAssertEqual(composer.cnvSequence("zof"), "ㄗㄡˇ");
  XCTAssertEqual(composer.cnvSequence("zoj"), "ㄗㄡˋ");
  XCTAssertEqual(composer.cnvSequence("zm"), "ㄗㄢ");
  XCTAssertEqual(composer.cnvSequence("zmd"), "ㄗㄢˊ");
  XCTAssertEqual(composer.cnvSequence("zmf"), "ㄗㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zmj"), "ㄗㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zn"), "ㄗㄣ");
  XCTAssertEqual(composer.cnvSequence("znf"), "ㄗㄣˇ");
  XCTAssertEqual(composer.cnvSequence("znj"), "ㄗㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zk"), "ㄗㄤ");
  XCTAssertEqual(composer.cnvSequence("zkf"), "ㄗㄤˇ");
  XCTAssertEqual(composer.cnvSequence("zkj"), "ㄗㄤˋ");
  XCTAssertEqual(composer.cnvSequence("zl"), "ㄗㄥ");
  XCTAssertEqual(composer.cnvSequence("zlf"), "ㄗㄥˇ");
  XCTAssertEqual(composer.cnvSequence("zlj"), "ㄗㄥˋ");
  XCTAssertEqual(composer.cnvSequence("zx"), "ㄗㄨ");
  XCTAssertEqual(composer.cnvSequence("zxd"), "ㄗㄨˊ");
  XCTAssertEqual(composer.cnvSequence("zxf"), "ㄗㄨˇ");
  XCTAssertEqual(composer.cnvSequence("zxj"), "ㄗㄨˋ");
  XCTAssertEqual(composer.cnvSequence("zxh"), "ㄗㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("zxhd"), "ㄗㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("zxhf"), "ㄗㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("zxhj"), "ㄗㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("zxhs"), "ㄗㄨㄛ˙");
  XCTAssertEqual(composer.cnvSequence("zxa"), "ㄗㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("zxaf"), "ㄗㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("zxaj"), "ㄗㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("zxm"), "ㄗㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("zxmf"), "ㄗㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("zxmj"), "ㄗㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("zxn"), "ㄗㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("zxnf"), "ㄗㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("zxnj"), "ㄗㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("zxl"), "ㄗㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("zxlf"), "ㄗㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("zxlj"), "ㄗㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("a"), "ㄘ");
  XCTAssertEqual(composer.cnvSequence("ad"), "ㄘˊ");
  XCTAssertEqual(composer.cnvSequence("af"), "ㄘˇ");
  XCTAssertEqual(composer.cnvSequence("aj"), "ㄘˋ");
  XCTAssertEqual(composer.cnvSequence("ay"), "ㄘㄚ");
  XCTAssertEqual(composer.cnvSequence("ayf"), "ㄘㄚˇ");
  XCTAssertEqual(composer.cnvSequence("ayj"), "ㄘㄚˋ");
  XCTAssertEqual(composer.cnvSequence("agj"), "ㄘㄜˋ");
  XCTAssertEqual(composer.cnvSequence("ai"), "ㄘㄞ");
  XCTAssertEqual(composer.cnvSequence("aid"), "ㄘㄞˊ");
  XCTAssertEqual(composer.cnvSequence("aif"), "ㄘㄞˇ");
  XCTAssertEqual(composer.cnvSequence("aij"), "ㄘㄞˋ");
  XCTAssertEqual(composer.cnvSequence("aw"), "ㄘㄠ");
  XCTAssertEqual(composer.cnvSequence("awd"), "ㄘㄠˊ");
  XCTAssertEqual(composer.cnvSequence("awf"), "ㄘㄠˇ");
  XCTAssertEqual(composer.cnvSequence("awj"), "ㄘㄠˋ");
  XCTAssertEqual(composer.cnvSequence("ao"), "ㄘㄡ");
  XCTAssertEqual(composer.cnvSequence("aod"), "ㄘㄡˊ");
  XCTAssertEqual(composer.cnvSequence("aof"), "ㄘㄡˇ");
  XCTAssertEqual(composer.cnvSequence("aoj"), "ㄘㄡˋ");
  XCTAssertEqual(composer.cnvSequence("am"), "ㄘㄢ");
  XCTAssertEqual(composer.cnvSequence("amd"), "ㄘㄢˊ");
  XCTAssertEqual(composer.cnvSequence("amf"), "ㄘㄢˇ");
  XCTAssertEqual(composer.cnvSequence("amj"), "ㄘㄢˋ");
  XCTAssertEqual(composer.cnvSequence("an"), "ㄘㄣ");
  XCTAssertEqual(composer.cnvSequence("and"), "ㄘㄣˊ");
  XCTAssertEqual(composer.cnvSequence("ak"), "ㄘㄤ");
  XCTAssertEqual(composer.cnvSequence("akd"), "ㄘㄤˊ");
  XCTAssertEqual(composer.cnvSequence("akf"), "ㄘㄤˇ");
  XCTAssertEqual(composer.cnvSequence("akj"), "ㄘㄤˋ");
  XCTAssertEqual(composer.cnvSequence("al"), "ㄘㄥ");
  XCTAssertEqual(composer.cnvSequence("ald"), "ㄘㄥˊ");
  XCTAssertEqual(composer.cnvSequence("alf"), "ㄘㄥˇ");
  XCTAssertEqual(composer.cnvSequence("alj"), "ㄘㄥˋ");
  XCTAssertEqual(composer.cnvSequence("ax"), "ㄘㄨ");
  XCTAssertEqual(composer.cnvSequence("axd"), "ㄘㄨˊ");
  XCTAssertEqual(composer.cnvSequence("axf"), "ㄘㄨˇ");
  XCTAssertEqual(composer.cnvSequence("axj"), "ㄘㄨˋ");
  XCTAssertEqual(composer.cnvSequence("axh"), "ㄘㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("axhd"), "ㄘㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("axhf"), "ㄘㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("axhj"), "ㄘㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("axa"), "ㄘㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("axaf"), "ㄘㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("axaj"), "ㄘㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("axm"), "ㄘㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("axmd"), "ㄘㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("axmf"), "ㄘㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("axmj"), "ㄘㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("axn"), "ㄘㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("axnd"), "ㄘㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("axnf"), "ㄘㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("axnj"), "ㄘㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("axl"), "ㄘㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("axld"), "ㄘㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("axlf"), "ㄘㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("axlj"), "ㄘㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("s"), "ㄙ");
  XCTAssertEqual(composer.cnvSequence("sf"), "ㄙˇ");
  XCTAssertEqual(composer.cnvSequence("sj"), "ㄙˋ");
  XCTAssertEqual(composer.cnvSequence("sy"), "ㄙㄚ");
  XCTAssertEqual(composer.cnvSequence("syf"), "ㄙㄚˇ");
  XCTAssertEqual(composer.cnvSequence("syj"), "ㄙㄚˋ");
  XCTAssertEqual(composer.cnvSequence("sys"), "ㄙㄚ˙");
  XCTAssertEqual(composer.cnvSequence("sg"), "ㄙㄜ");
  XCTAssertEqual(composer.cnvSequence("sgj"), "ㄙㄜˋ");
  XCTAssertEqual(composer.cnvSequence("si"), "ㄙㄞ");
  XCTAssertEqual(composer.cnvSequence("sid"), "ㄙㄞˊ");
  XCTAssertEqual(composer.cnvSequence("sif"), "ㄙㄞˇ");
  XCTAssertEqual(composer.cnvSequence("sij"), "ㄙㄞˋ");
  XCTAssertEqual(composer.cnvSequence("sa"), "ㄙㄟ");
  XCTAssertEqual(composer.cnvSequence("sw"), "ㄙㄠ");
  XCTAssertEqual(composer.cnvSequence("swf"), "ㄙㄠˇ");
  XCTAssertEqual(composer.cnvSequence("swj"), "ㄙㄠˋ");
  XCTAssertEqual(composer.cnvSequence("so"), "ㄙㄡ");
  XCTAssertEqual(composer.cnvSequence("sof"), "ㄙㄡˇ");
  XCTAssertEqual(composer.cnvSequence("soj"), "ㄙㄡˋ");
  XCTAssertEqual(composer.cnvSequence("sm"), "ㄙㄢ");
  XCTAssertEqual(composer.cnvSequence("smf"), "ㄙㄢˇ");
  XCTAssertEqual(composer.cnvSequence("smj"), "ㄙㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sn"), "ㄙㄣ");
  XCTAssertEqual(composer.cnvSequence("snf"), "ㄙㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sk"), "ㄙㄤ");
  XCTAssertEqual(composer.cnvSequence("skf"), "ㄙㄤˇ");
  XCTAssertEqual(composer.cnvSequence("skj"), "ㄙㄤˋ");
  XCTAssertEqual(composer.cnvSequence("sl"), "ㄙㄥ");
  XCTAssertEqual(composer.cnvSequence("slj"), "ㄙㄥˋ");
  XCTAssertEqual(composer.cnvSequence("sx"), "ㄙㄨ");
  XCTAssertEqual(composer.cnvSequence("sxd"), "ㄙㄨˊ");
  XCTAssertEqual(composer.cnvSequence("sxf"), "ㄙㄨˇ");
  XCTAssertEqual(composer.cnvSequence("sxj"), "ㄙㄨˋ");
  XCTAssertEqual(composer.cnvSequence("sxh"), "ㄙㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("sxhd"), "ㄙㄨㄛˊ");
  XCTAssertEqual(composer.cnvSequence("sxhf"), "ㄙㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("sxhj"), "ㄙㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("sxa"), "ㄙㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("sxad"), "ㄙㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("sxaf"), "ㄙㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("sxaj"), "ㄙㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("sxm"), "ㄙㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("sxmf"), "ㄙㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("sxmj"), "ㄙㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("sxn"), "ㄙㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("sxnf"), "ㄙㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("sxnj"), "ㄙㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("sxl"), "ㄙㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("sxld"), "ㄙㄨㄥˊ");
  XCTAssertEqual(composer.cnvSequence("sxlf"), "ㄙㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("sxlj"), "ㄙㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("y"), "ㄚ");
  XCTAssertEqual(composer.cnvSequence("yd"), "ㄚˊ");
  XCTAssertEqual(composer.cnvSequence("yj"), "ㄚˋ");
  XCTAssertEqual(composer.cnvSequence("ys"), "ㄚ˙");
  XCTAssertEqual(composer.cnvSequence("h "), "ㄛ ");
  XCTAssertEqual(composer.cnvSequence("hd"), "ㄛˊ");
  XCTAssertEqual(composer.cnvSequence("hf"), "ㄛˇ");
  XCTAssertEqual(composer.cnvSequence("hj"), "ㄛˋ");
  XCTAssertEqual(composer.cnvSequence("g "), "ㄜ ");
  XCTAssertEqual(composer.cnvSequence("gd"), "ㄜˊ");
  XCTAssertEqual(composer.cnvSequence("gf"), "ㄜˇ");
  XCTAssertEqual(composer.cnvSequence("gj"), "ㄜˋ");
  // XCTAssertEqual(composer.cnvSequence("ed"), "ㄝˊ");
  // XCTAssertEqual(composer.cnvSequence("ef"), "ㄝˇ");
  // XCTAssertEqual(composer.cnvSequence("ej"), "ㄝˋ");
  // XCTAssertEqual(composer.cnvSequence("es"), "ㄝ˙");
  XCTAssertEqual(composer.cnvSequence("i"), "ㄞ");
  XCTAssertEqual(composer.cnvSequence("id"), "ㄞˊ");
  XCTAssertEqual(composer.cnvSequence("if"), "ㄞˇ");
  XCTAssertEqual(composer.cnvSequence("ij"), "ㄞˋ");
  // XCTAssertEqual(composer.cnvSequence("aj"), "ㄟˋ");
  XCTAssertEqual(composer.cnvSequence("w"), "ㄠ");
  XCTAssertEqual(composer.cnvSequence("wd"), "ㄠˊ");
  XCTAssertEqual(composer.cnvSequence("wf"), "ㄠˇ");
  XCTAssertEqual(composer.cnvSequence("wj"), "ㄠˋ");
  XCTAssertEqual(composer.cnvSequence("o"), "ㄡ");
  XCTAssertEqual(composer.cnvSequence("od"), "ㄡˊ");
  XCTAssertEqual(composer.cnvSequence("of"), "ㄡˇ");
  XCTAssertEqual(composer.cnvSequence("oj"), "ㄡˋ");
  XCTAssertEqual(composer.cnvSequence("os"), "ㄡ˙");
  XCTAssertEqual(composer.cnvSequence("m "), "ㄢ ");
  XCTAssertEqual(composer.cnvSequence("md"), "ㄢˊ");
  XCTAssertEqual(composer.cnvSequence("mf"), "ㄢˇ");
  XCTAssertEqual(composer.cnvSequence("mj"), "ㄢˋ");
  XCTAssertEqual(composer.cnvSequence("n "), "ㄣ ");
  XCTAssertEqual(composer.cnvSequence("nd"), "ㄣˊ");
  XCTAssertEqual(composer.cnvSequence("nf"), "ㄣˇ");
  XCTAssertEqual(composer.cnvSequence("nj"), "ㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ns"), "ㄣ˙");
  XCTAssertEqual(composer.cnvSequence("k "), "ㄤ ");
  XCTAssertEqual(composer.cnvSequence("kd"), "ㄤˊ");
  XCTAssertEqual(composer.cnvSequence("kf"), "ㄤˇ");
  XCTAssertEqual(composer.cnvSequence("kj"), "ㄤˋ");
  // XCTAssertEqual(composer.cnvSequence("l "), "ㄥ ");
  // XCTAssertEqual(composer.cnvSequence("lj"), "ㄥˋ");
  XCTAssertEqual(composer.cnvSequence("l "), "ㄦ ");
  XCTAssertEqual(composer.cnvSequence("ld"), "ㄦˊ");
  XCTAssertEqual(composer.cnvSequence("lf"), "ㄦˇ");
  XCTAssertEqual(composer.cnvSequence("lj"), "ㄦˋ");
  XCTAssertEqual(composer.cnvSequence("ls"), "ㄦ˙");
  XCTAssertEqual(composer.cnvSequence("e"), "ㄧ");
  XCTAssertEqual(composer.cnvSequence("ed"), "ㄧˊ");
  XCTAssertEqual(composer.cnvSequence("ef"), "ㄧˇ");
  XCTAssertEqual(composer.cnvSequence("ej"), "ㄧˋ");
  XCTAssertEqual(composer.cnvSequence("ey"), "ㄧㄚ");
  XCTAssertEqual(composer.cnvSequence("eyd"), "ㄧㄚˊ");
  XCTAssertEqual(composer.cnvSequence("eyf"), "ㄧㄚˇ");
  XCTAssertEqual(composer.cnvSequence("eyj"), "ㄧㄚˋ");
  XCTAssertEqual(composer.cnvSequence("eys"), "ㄧㄚ˙");
  XCTAssertEqual(composer.cnvSequence("eh"), "ㄧㄛ");
  XCTAssertEqual(composer.cnvSequence("ehs"), "ㄧㄛ˙");
  XCTAssertEqual(composer.cnvSequence("ee"), "ㄧㄝ");
  XCTAssertEqual(composer.cnvSequence("eed"), "ㄧㄝˊ");
  XCTAssertEqual(composer.cnvSequence("eef"), "ㄧㄝˇ");
  XCTAssertEqual(composer.cnvSequence("eej"), "ㄧㄝˋ");
  XCTAssertEqual(composer.cnvSequence("ees"), "ㄧㄝ˙");
  XCTAssertEqual(composer.cnvSequence("eid"), "ㄧㄞˊ");
  XCTAssertEqual(composer.cnvSequence("ew"), "ㄧㄠ");
  XCTAssertEqual(composer.cnvSequence("ewd"), "ㄧㄠˊ");
  XCTAssertEqual(composer.cnvSequence("ewf"), "ㄧㄠˇ");
  XCTAssertEqual(composer.cnvSequence("ewj"), "ㄧㄠˋ");
  XCTAssertEqual(composer.cnvSequence("eo"), "ㄧㄡ");
  XCTAssertEqual(composer.cnvSequence("eod"), "ㄧㄡˊ");
  XCTAssertEqual(composer.cnvSequence("eof"), "ㄧㄡˇ");
  XCTAssertEqual(composer.cnvSequence("eoj"), "ㄧㄡˋ");
  XCTAssertEqual(composer.cnvSequence("em"), "ㄧㄢ");
  XCTAssertEqual(composer.cnvSequence("emd"), "ㄧㄢˊ");
  XCTAssertEqual(composer.cnvSequence("emf"), "ㄧㄢˇ");
  XCTAssertEqual(composer.cnvSequence("emj"), "ㄧㄢˋ");
  XCTAssertEqual(composer.cnvSequence("en"), "ㄧㄣ");
  XCTAssertEqual(composer.cnvSequence("end"), "ㄧㄣˊ");
  XCTAssertEqual(composer.cnvSequence("enf"), "ㄧㄣˇ");
  XCTAssertEqual(composer.cnvSequence("enj"), "ㄧㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ek"), "ㄧㄤ");
  XCTAssertEqual(composer.cnvSequence("ekd"), "ㄧㄤˊ");
  XCTAssertEqual(composer.cnvSequence("ekf"), "ㄧㄤˇ");
  XCTAssertEqual(composer.cnvSequence("ekj"), "ㄧㄤˋ");
  XCTAssertEqual(composer.cnvSequence("el"), "ㄧㄥ");
  XCTAssertEqual(composer.cnvSequence("eld"), "ㄧㄥˊ");
  XCTAssertEqual(composer.cnvSequence("elf"), "ㄧㄥˇ");
  XCTAssertEqual(composer.cnvSequence("elj"), "ㄧㄥˋ");
  XCTAssertEqual(composer.cnvSequence("x"), "ㄨ");
  XCTAssertEqual(composer.cnvSequence("xd"), "ㄨˊ");
  XCTAssertEqual(composer.cnvSequence("xf"), "ㄨˇ");
  XCTAssertEqual(composer.cnvSequence("xj"), "ㄨˋ");
  XCTAssertEqual(composer.cnvSequence("xy"), "ㄨㄚ");
  XCTAssertEqual(composer.cnvSequence("xyd"), "ㄨㄚˊ");
  XCTAssertEqual(composer.cnvSequence("xyf"), "ㄨㄚˇ");
  XCTAssertEqual(composer.cnvSequence("xyj"), "ㄨㄚˋ");
  XCTAssertEqual(composer.cnvSequence("xys"), "ㄨㄚ˙");
  XCTAssertEqual(composer.cnvSequence("xh"), "ㄨㄛ");
  XCTAssertEqual(composer.cnvSequence("xhf"), "ㄨㄛˇ");
  XCTAssertEqual(composer.cnvSequence("xhj"), "ㄨㄛˋ");
  XCTAssertEqual(composer.cnvSequence("xi"), "ㄨㄞ");
  XCTAssertEqual(composer.cnvSequence("xif"), "ㄨㄞˇ");
  XCTAssertEqual(composer.cnvSequence("xij"), "ㄨㄞˋ");
  XCTAssertEqual(composer.cnvSequence("xa"), "ㄨㄟ");
  XCTAssertEqual(composer.cnvSequence("xad"), "ㄨㄟˊ");
  XCTAssertEqual(composer.cnvSequence("xaf"), "ㄨㄟˇ");
  XCTAssertEqual(composer.cnvSequence("xaj"), "ㄨㄟˋ");
  XCTAssertEqual(composer.cnvSequence("xm"), "ㄨㄢ");
  XCTAssertEqual(composer.cnvSequence("xmd"), "ㄨㄢˊ");
  XCTAssertEqual(composer.cnvSequence("xmf"), "ㄨㄢˇ");
  XCTAssertEqual(composer.cnvSequence("xmj"), "ㄨㄢˋ");
  XCTAssertEqual(composer.cnvSequence("xn"), "ㄨㄣ");
  XCTAssertEqual(composer.cnvSequence("xnd"), "ㄨㄣˊ");
  XCTAssertEqual(composer.cnvSequence("xnf"), "ㄨㄣˇ");
  XCTAssertEqual(composer.cnvSequence("xnj"), "ㄨㄣˋ");
  XCTAssertEqual(composer.cnvSequence("xk"), "ㄨㄤ");
  XCTAssertEqual(composer.cnvSequence("xkd"), "ㄨㄤˊ");
  XCTAssertEqual(composer.cnvSequence("xkf"), "ㄨㄤˇ");
  XCTAssertEqual(composer.cnvSequence("xkj"), "ㄨㄤˋ");
  XCTAssertEqual(composer.cnvSequence("xl"), "ㄨㄥ");
  XCTAssertEqual(composer.cnvSequence("xlf"), "ㄨㄥˇ");
  XCTAssertEqual(composer.cnvSequence("xlj"), "ㄨㄥˋ");
  XCTAssertEqual(composer.cnvSequence("u"), "ㄩ");
  XCTAssertEqual(composer.cnvSequence("ud"), "ㄩˊ");
  XCTAssertEqual(composer.cnvSequence("uf"), "ㄩˇ");
  XCTAssertEqual(composer.cnvSequence("uj"), "ㄩˋ");
  XCTAssertEqual(composer.cnvSequence("ue"), "ㄩㄝ");
  XCTAssertEqual(composer.cnvSequence("uef"), "ㄩㄝˇ");
  XCTAssertEqual(composer.cnvSequence("uej"), "ㄩㄝˋ");
  XCTAssertEqual(composer.cnvSequence("um"), "ㄩㄢ");
  XCTAssertEqual(composer.cnvSequence("umd"), "ㄩㄢˊ");
  XCTAssertEqual(composer.cnvSequence("umf"), "ㄩㄢˇ");
  XCTAssertEqual(composer.cnvSequence("umj"), "ㄩㄢˋ");
  XCTAssertEqual(composer.cnvSequence("un"), "ㄩㄣ");
  XCTAssertEqual(composer.cnvSequence("und"), "ㄩㄣˊ");
  XCTAssertEqual(composer.cnvSequence("unf"), "ㄩㄣˇ");
  XCTAssertEqual(composer.cnvSequence("unj"), "ㄩㄣˋ");
  XCTAssertEqual(composer.cnvSequence("ul"), "ㄩㄥ");
  XCTAssertEqual(composer.cnvSequence("uld"), "ㄩㄥˊ");
  XCTAssertEqual(composer.cnvSequence("ulf"), "ㄩㄥˇ");
  XCTAssertEqual(composer.cnvSequence("ulj"), "ㄩㄥˋ");
}

@end
